title,body,from_scratch,linear_algebra,deep_learning,tensorflow,statistics,machine_learning,analysis,probability_distribution
Demystifying Entropy (And More),"Then, cross entropy would have been calculated as Indeed, we can use our function to verify the coherency of this statement. In other words, when our predicted distribution equals the true distribution we are trying to model, cross entropy becomes 0, as a desirable cost function would behave. This is why crosss entropy is often used in classification models where we have a one-hot encoded vector that represents a true distribution, as exemplified by , and a prediction that models this distribution, denoted as  in our example. It is not difficult to see why cross entropy is a useful cost function frequently used in the field of machine learning. Entropy is an interesting concept with which we can quantify randomness in data. This process is no rocket science, but simply a process that involves calculations with probabilities. Although the link may not be immediately apparent, randomness is just another way of expressing probabilities and uncertainty, and it is from this premise that information and entropy take off. Beyond that, however, entropy is now used extensively in the field of machine learning, specifically as a loss function. Although it was not noted explicitly above, cross entropy calculates the same quantity as the logarithmic loss function. Essentially, cross entropy is useful in that it provides us with some intuitive information of how far two distributions are apart.",0,0,0,0,1,0,0,0
Demystifying Entropy (And More),"However, we can get a bit more scientific by calculating the cross entropy to see exactly how well our model performed with the given data. To achieve this, let’s quickly write some functions to calculate KL divergence and cross entropy. We will be reusing the  function we defined above. On a trivial note, we prevent Python from running into math domain errors, we add  to the provided distribution if the list contains 0. The result is unsurprising. If we recall that the definition of entropy is the amount of information content needed to encode information, we will quickly realize that  is a distribution with probability 1, which is why it makes sense that entropy converges to 0. Therefore, in this case, KL divergence equals cross entropy, which computes to approximately 0.415. What actually happened beneath the hood? If we recall the definition of cross entropy, we can easily see that, among the 10 terms, 9 of them were eliminated since  given the setup of the distribution . In the end, the only term that mattered was the third term, which was given by Why does this quantity make sense as an error term defining a loss function? In other words, why is cross entropy used as a loss function in classification tasks? To see this, let’s assume that our neural network was perfect in its prediction, or more realistically, trained to excessively overfit given data, i.e,  equals .",0,0,0,0,1,0,0,0
PyTorch Tensor Basics,"One of the main takeaways from that experience is that an intuition on dimensionality and tensor operations in general is a huge plus. This gets especially important for things like batching. One very basic thing I learned–admittedly perhaps too belatedly–is the difference between  and  as dimensions. Here is a concrete example. This creates a one-dimensional tensor, which is effectively a list. We can check the dimensions of this tensor by calling , which is very similar to how NumPy works. On the other hand, specifying the size as  results in a two-dimensional tensor. The simple, barely passing answer to the question of why  is two-dimension would be that it has double layered brackets. More exactly speaking, having an additional layer means that it is capable of storing another tensor within it; hence,  is living in a dimension that is one above that of . As mentioned earlier, batch dimension is something that becomes very important later on. Some PyTorch layers, most notably RNNs, even have an argument , which accepts a boolean value. If , PyTorch expects the first dimension of the input to be the batch dimension. If , which is the case by default, PyTorch assumes that the first dimension would be the sequence length dimension. A common operation that is used when dealing with inputs is , or its inverse, . Before explaining what these operations perform, let’s just take a look at an example. Let’s start with , the random tensor of size  initialized above.",0,0,1,0,0,0,0,0
Markov Chain and Chutes and Ladders,"This block produces the following figure: I doubt that anyone would play Chutes and Ladders for this long, but after about 150 rolls of the dice, we can expect with a fair amount of certainty that the game will come to an end. The graph above presents information on cumulative fractions, but we can also look at the graph for marginal probabilities by examining its derivative: And the result: From the looks of it, the maximum of the graph seems to exist somewhere around . To be exact, . This result tells us that we will finish the game in 19 rolls of the dice more often than any other number of turns. We can also use this information to calculate the expected value of the game length. Recall that Or if the probability density function is continuous, In this case, we have a discrete random variable, so we adopt the first formula for our analysis. The formula can be achieved in Python as follows: This result tells us that the typical length of a Chutes and Ladders game is approximately 36 turns. But an issue with using expected value as a metric of analysis is that long games with infinitesimal probabilities are weighted equally to short games of substantial probability of occurrence. This mistreatment can be corrected for by other ways of understanding the distribution, such as median: This function tries to find the point in the cumulative distribution where the value is closest to , i.e. the median of the distribution.",0,1,0,0,0,0,0,0
The Math Behind GANs,"Therefore, we might consider the following to be the loss function of the discriminator: Here, we are using a very generic, unspecific notation for  to refer to some function that tells us the distance or the difference between the two functional parameters. (If this reminded you of something like cross entropy or Kullback-Leibler divergence, you are definitely on the right track.) We can go ahead and do the same for the generator. The goal of the generator is to confuse the discriminator as much as possible such that it mislabels generated images as being true. The key here is to remember that a loss function is something that we wish to minimize. In the case of the generator, it should strive to minimize the difference between 1, the label for true data, and the discriminator’s evaluation of the generated fake data. A common loss function that is used in binary classification problems is binary cross entropy. As a quick review, let’s remind ourselves of what the formula for cross entropy looks like: In classification tasks, the random variable is discrete. Hence, the expectation can be expressed as a summation. We can simplify this expression even further in the case of binary cross entropy, since there are only two labels: zero and one. This is the  function that we have been loosely using in the sections above.",0,0,1,0,1,0,0,0
"Beta, Bayes, and Multi-armed Bandits","Let’s take a look at the posterior distribution for each bandit. We can easily plot them using , as shown below. Notice that I have also included the uniform prior for reference purposes.  The result is as we would expect: the bandit with the highest success parameter of 0.7 seems to have been pulled on the most, which explains why its variance is the smallest out of the bunch. Moreover, the mean of that particular posterior is also close to 0.7, its true value. Notice that the rest of the posteriors also somewhat have this trend, although more uncertainty is reflected into the shape of the distributions via the spread. It is interesting to see how we can go from a uniform prior, or , to almost normal-shaped distributions as we see above. To corroborate our intuition that the best bandit was indeed the most pulled, let’s quickly see the proportion of the pulls through a pie chart.  As you can see, there seems to be a positive correlation between the success parameter and the number of pulls. This is certainly good, since we want the gambler to pull on the best bandit the majority of times while avoiding the worse ones as much as possible. This certainly seems to be the case, given that the bandit with the worse parameter—0.1—was pulled the least. Last but not least, let’s revisit the cumulative regret graph introduced earlier.",0,0,0,0,1,0,0,1
A Simple Autocomplete Model,"You might remember back in the old days when autocomplete was just terrible. The suggestions provided by autocomplete would be useless if not downright stupid—I remember that one day when I intended to type “Gimme a sec,” only to see my message get edited into “Gimme a sex” by the divine touches of autocomplete. On the same day, the feature was turned off on my phone for the betterment of the world. Now, times have changed. Recently, I decided to give autocorrect a chance on my iPhone. Surprisingly, I find myself liking autocomplete more than hating it, especially now that the weather is getting colder by each day: when my frost-numbed finger tips touch on the wrong places of the phone screen to produce words that aren’t really words, iPhone’s autocomplete somehow magically reads my mind to rearrange all that inscrutable alphabet soup into words that make actual, coherent sense. Sometimes, it’s so good at correcting my typos that I intentionnally make careless mistakes on the keyboard just to see how far it can go. One of the obvious reasons behind such drastic improvements in autocomplete functionality is the development of deep neural networks. As we know, neural networks are great at learning hidden patterns as long as we feed it with enough data. In this post, we will implement a very simple version of a generative deep neural network that can easily form the backbone of some character-based autocomplete algorithm. Let’s begin! Let’s first go ahead and import all dependencies for this tutorial.",0,0,1,1,0,0,0,0
A Step Up with  Variational Autoencoders,"It’s finally time to test the model. Let’s first begin with data preparation and preprocessing. Now, we should have the training and test set ready to be fed into our network. Next, let’s define a simple callback application using the  monitor so that training can be stopped when no substantial improvements are being made to our model. This was included because training a VAE can take some time, and we don’t want to waste computing resources seeing only submarginal increments to the model performance. Training begins! After 14 epochs, training has stopped, meaning that no meaningful improvements were being made. Let’s visualize the representation of the latent space learned by the VAE. Visualizing this representation is easy in this case because we defined the latent space to be two-dimensional; in other words, all points can be plotted on a Cartesian plane. Let’s take a look:  This plot shows us how each numbers are distributed across the latent space. Notice that numbers that belong to the same class seem to be generally clustered around each other, although there is a messy region in the middle. This is a reasonable result: while we would expect ones to be fairly easy to distinguish from, say, eights, numbers like zeros and sixes might look very similar, and hence appear mixed as a lump in the fuzzy region in the middle. One cool thing about VAEs is that we can use their learned representation to see how numbers slowly morph and vary across a specified domain.",0,0,1,1,0,0,0,0
A Brief Introduction to Recurrent Neural Networks,"Then, the output of this embedding layer will be flattened to be passed onto a dense layer with one output transformed by the sigmoid activation function. We use the sigmoid function since we want to conduct a sentiment analysis of determining whether a given movie review is positive or negative. That wasn’t so difficult. Let’s initialize our model by defining the model parameters , , and , then plot the model to see the structure of the network alongside the input and output dimensions of each layer. Note that we defined  to be 16, which means that each word is transformed into dense vectors living in 16 dimensions. By plotting the model, we can get a better idea of the layers that compose the model.  The next model we will build is a simple recurrent neural network. This neural network is going to have an embedding layer, just like the previous model. However, instead of a dense layer, it will have two consecutive  layers stacked on top of each other. The  layer is essentially the  implementation of the  model we built earlier. Let’s take a look. We instantiate the model and take plot the network, just as we have done above.  The  model we built is, as the name shamelessly puts out, pretty simple. There are a lot more advanced recurrent neural networks that have complicated internal cell structures to better emulate human memory, in a sense.",0,0,1,1,0,0,0,0
A Brief Introduction to Recurrent Neural Networks,"Last but not least, let’s visualize the training scheme of all four models to take a identify any possible signs of convergence and overfitting, if any. To do that, we will be using the  function shown below. The dense feed-forward network seems to have a very linear pattern. One immediate pattern we see is that the model seems to be overfitting right away, since the testing accuracy decreases with each epoch while the training accuracy increases. This is certainly not a good sign; in the best case scenario, we want to see that training and testing labels moving in the same direction. Perhaps this is the biggest indication that a simple feed forward network is a suboptimal model choice in the context of this problem.  The graphs for the  model seems a lot better. At the very least, we see the training and test labels moving in unison: the accuracy increases with each epoch, while the loss slowly decreases. However, we do see some overfitting happening at the last two epochs or so. Specifically, note that cross entropy loss for the testing data seems to pick up an incrementing pattern past the seventh epoch. This observation suggests that we need to configure the model differently, presumably by decreasing the number of tunable parameters.  Next comes the winner of the day, the LSTM network. An interesting point to note about the learning curve of this model is that the test data accuracy and loss seem to stay roughly stagnant despite the progression of epochs.",0,0,1,1,0,0,0,0
Dissecting LSTMs,"The raw material that we pass into this filter is in fact the cell state, processed by a  activation function. This is also a familiar structure we saw earlier in the information update sequence of the network. Only this time, we use the cell state to generate output. This makes sense somewhat intuitively, since the cell state is essentially the memory of the network, and hence to generate output would require the use of this memory. Of course, this should not be construed so literally since what ultimately happens during backpropagation is entirely up to the network, and at that point we simply lay back and hope for the network to learn the best. This point notwithstanding, I find this admittedly coarse heuristic to be nonetheless useful in intuiting the clockwork behind LSTMs. At this point, we’re not quite done yet;  is not a vector of probabilities indicating which letter is the most likely in a one-hot encoded representation. Therefore, we will need to pass it through another affine layer, than apply a softmax activation. Hence,  is the final output of an LSTM layer. Here comes the tricky part: backprop. Thankfully, backprop is somewhat simple in the case of LSTMs due to the use of Hadamard products. The routine is not so much different from a vanilla neural network, so let’s try to hash out the equations. As we already know, backpropagation in neural networks is merely an extended application of the chain rule, with some minor caveats that matrix calculus entails.",0,0,1,0,0,0,0,0
An Introduction to Markov Chain Monte Carlo,"In the Metrapolis-Hastings model, the proposal distribution is assumed as normal. Next, we have to decide if the current value of  is a value to accept or not. Accepting a randomly sampled value means adding it to our list of historic observations—if we draw a histogram of the entries in this list, it is our hope that we would end up with a close approximation of the posterior distribution. Accepting this value is often referred to as a “jump,” because we can visualize this process as a random walk in the posterior sample space from point  to . The question is, how do we decide to jump or not? The answer lies in Bayes’ theorem: If, for example, we should accept the value and perform the jump, because this means that the new proposed parameter does a better job of explaining the data than does the current one. But recall the dilemma we discussed earlier: how do we compute the posterior? After all, the complexity of calcualting evidence was the very reason why scientists came up with MCMC in the first place. Well, here’s a clever trick that might be of use: rearrange (5) in fractional form to get rid of the evidence term in the denominator. In other words, (5) can be reexpressed as which means The evidence term nicely disappears, giving us an expression that we can easily evaluate! This is how Metropolis-Hastings resolves the dilemma of evidence computation—very simple yet some surprisingly effective algebra.",1,0,0,0,0,0,0,0
Logistic Regression Model from Scratch,"This tutorial is a continuation of the “from scratch” series we started last time with the blog post demonstrating the implementation of a simple k-nearest neighbors algorithm. The machine learning model we will be looking at today is logistic regression. If the “regression” part sounds familiar, yes, that is because logistic regression is a close cousin of linear regression—both models are employed in the context of regression problems. Linear regression is used when the estimation parameter is a continuous variable; logistic regression is best suited to tackle binary classification problems. Implementing the logistic regression model is slightly more challenging due to the mathematics involved in gradient descent, but we will make every step explicit throughout the way. Without further ado, let’s get into it. To understand the clockwork behind logistic regression, it is necessary to understand the logistic function. Simply put, the logistic function is a s-shaped curve the squishes real values between positive and negative infinity into the range . This property is convenient from a machine learning perspective because it allows us to perform binary classification. Binary classification is a type of classification problem where we are assigned the task of categorizing data into two groups. For instance, given the dimensions of a patient’s tumor, determine whether the tumor is malignant or benign. Another problem might involve classifying emails as either spam or not spam. We can label spam emails as 1 and non-spam emails as 0, feed the data into a predefined machine learning algorithm, and generate predictions using that model.",1,0,0,0,0,1,0,0
Logistic Regression Model from Scratch,"Now what’s next? Since we have a loss function, we need to build an algorithm that will allow us to minimize this cost function. One of the most common methods used to achieve cost minimization is gradient descent. As you might be able to tell, this algorithm has a lot to do with gradients, which can loosely be understood as a fancy way of saying derivatives. Below is an illustration of the gradient descent algorithm in action, sourced from this blog.  Basically, what gradient descent does is that it takes the derivative of the loss function with respect to the weight vector every epoch, or iteration, and takes a small step in the opposite direction of that derivative. If you think of this in the context of two dimensions as shown in the illustration, the gradient descent algorithm ends up moving down the parabola, taking little steps each time, until it eventually reaches the global minimum. In mathematical notation, we might express this process as follows: If we were to perform this in vectorized format, where  represents a vector containing the weight coefficients of the logistic regression model: The  notation is used to denote gradients, an important operation in matrix calculus which we explored in when deriving the normal equation solution to linear regression on this blog. The  denotes a hyperparameter known as the learning rate, which essentially determines how big of a step the gradient descent model takes with each iteration.",1,0,0,0,0,1,0,0
"Beta, Bayes, and Multi-armed Bandits","However, this is obviously not the most systematic approach, and there is not even a clear guideline as to how they should go about pulling these levers. Here is where the Bayesian approach comes in handy. It isn’t difficult to frame this as a Bayesian problem. Given a pull of the slot machine, the result of which we will denote as , a Bernoulli random variable, we can then formulate the problem as follows: And as the classical Bayesian analysis goes, the more data we collect through repeated experiments, the closer the posterior distribution will get to the target distribution. Through this process, we are able to approximate the parameter . Now we have to think about what distributions we want to use for the prior and likelihood. Let’s start with the easier one: the likelihood. The natural choice that makes sense is the binomial distribution. Each pull on the lever can be considered a Bernoulli trial, and as we start exploring with more pulls to accumulate data, we will essentially be sampling from a binomial distribution, with  success and  failures out of a total of  trials. Therefore, more concretely, we can say The more interesting part is the prior distribution. Intuitively, the one might be inclined to say that we need a uniform prior, and indeed that answer would technically be true. However, I qualify with “technically” since the real answer has an added layer of complexity.",0,0,0,0,1,0,0,1
Demystifying Entropy (And More),"This yields Recall that the definition of entropy goes as Plugging in this definition to (11) yields the simplified definition of cross entropy: If KL divergence represents the average amount of additional information needed to represent an event with  instead of , cross entropy tells us the average amount of total information needed to represent a stochastic event with  instead of . This is why cross entropy is a sum of the entropy of the distribution  plus the KL divergence between  and . Instead of dwelling in the theoretical realm regurgitating different definitions and interpretations of cross entropy and KL divergence, let’s take a look at a realistic example to gain a better grasp of these concepts. Say we have constructed a neural network to solve a task, such as MNIST hand-written digit classification. Let’s say we have fed our neural network an image corresponding to the number 2. In that case, the true distribution that we are trying to model, represented in vector form, will be  as shown below. The  statement is there to make sure that the probabilities sum up to 1. Let’s assume that our neural network made the following prediction about image. These two distributions, although similar, are different. But the question is, how different? Creating a visualization might give us some idea about the difference between the two distributions.  The two distributions are quite similar, meaning that our neural network did a good job of classifying given data.",0,0,0,0,1,0,0,0
Recommendation Algorithm with SVD,"Much like we understood  as a factor of eigendecomposition,  can be seen as a factor of eigendecomposition, this time on the matrix . Concretly, Notice the parallel between (2) and (4). It’s not difficult to see that, by symmetry,  is also going to be an orthogonal matrix containing the eigenvectors of . The most important difference between  and  concerns dimensionality: while  is a -by- matrix, V is an -by-. This disparity originates from the fact that  itself is a rectangular matrix, meaning that the dimensions of  and  are also different. Another point that requires clarification pertains to . Earlier, we made a substitution of  for . This tells us that  contains the square roots of the eigenvalues of  and , which, it is important to note, has identical non-zero eigenvalues. If this point brings confusion, I recommend that you peruse over the next subsection on linear algebra. Let’s conclude this section with the formula for singular value decomposition: Hopefully, now it is clear what , , and  are. Singular value decomposition can intuitively be thought of as a square root version of eigendecomposition, since essentially  and  are all derivatives that come from the “square” of a matrix, the two transpose multiples. This intuition also aligns with the fact that  is a diagonal matrix containing the square roots of eigenvalues of the transpose products. With these in mind, let’s get ready to build the recommendation model.",1,1,0,0,0,0,0,0
Convex Combinations and MAP,"And as we obtain larger quantities of data, the relative importance of the prior distribution starts to diminish. Imagine that we have an infinite number of data points. Then,  will soley be determined by the likelihood function, as the weight ascribed to the prior will decrease to zero. In other words, Conversely, we can imagine how having no data points at all would cause the weight values to shift in favor of the prior such that no importance is ascribed to the MLE estimate of the parameter. In this short article, we reviewed the concept of maximum a posteriori and developed a useful intuition about its result from the perspective of convex combinations. Maximum a posteriori, alongside its close relative maximum likelihood estimation,  is an interesting topic that deserives our attention. Hopefully through this post, you gained a better understanding of what the result of an MAP estimation actually means from a Bayesian point of view: a weighted average between the prior mean and the MLE estimate, where the weight is determined by the number of data points at our disposal. Also, I just thought that the name “convex conbinations” is pretty cool. The fancier the name, the more desire to learn—it is a natural human instinct indeed. I hope you enjoyed reading this article. In the next post, we will continue our discussion by exploring the concept of conjugate priors, which is something that we have always assumed as true and glossed over, yet is arguably what remains at the very core of Bayesian analysis.",0,0,0,0,1,0,0,0
Recommendation Algorithm with SVD,"Imagine performing the same analysis on a much larger matrix, from which we extract  number of non-trivial entries of . On scale, singular value decomposition becomes more powerful, as it allows large amounts of data to be processed in managable bites. This is more than enough theory on SVD. Now is finally the time to jump into building our recommendation model with singular value decomposition. In this section, we will generate some random data, namely the ratings matrix. The row of the ratings matrix can be interpreted as users; the columns, movies. In other words,  denotes the ratings the th user gave for the th movie. The example we will use was borrowed from this post by Zacharia Miller. Let’s quickly build this ratings matrix using  and  as shown below. Let’s first see what this matrix looks like. We can do this simply by calling the  function and saving it to some variable. For notational consistency, let’s name this variable . Great! Now we have a matrix of binary numbers, where  denotes the fact that the user liked the movie and  the fact that they disliked it. We can make some cursory qualitative observations of this toy data. Note, for instance, that users who like Movie 2 also tend to like Movie 3. Also, User 6 and User 8 have identical prefernece for movies—perhaps they both like a particular genre, or tend to like the movie starred by some actor or actress.",1,1,0,0,0,0,0,0
The Gibbs Sampler,"The full result is available on Wikipedia, but it’s always more interesting and rewarding to derive these results ourselves. But in this section, we will assume that we already know the final result of the derivation and use the formula for now. Note that the two functions are symmetrical, which is expected given that this is a bivariate distribution. These functions simulate a conditional distribution, where given a value of one random variable, we can sample the value of the other. This is the core mechanism by which we will be sampling from the joint probability distribution using the Gibbs sampling algorithm. Let’s initialize the parameters for the distribution and test the sampler. Great! This works as expected. For the purposes of demonstrating the implications of burn-in, let’s define discard the first 100 values that were sampled. Below is the plot of the final resulting distribution based on sampled values using the Gibbs sampler. The result is what we would expect: a bivariate Gaussian.  And this is what we end up with if we sample directly from the bivariate Gaussian instead of using the Gibbs sampler. Note that we can do this only because we chose a deliberately simple example; in many other contexts, this would certainly not be the case (if we could sample from a distribution directly, why use the Gibbs sampler in the first place?). Notice the similarity between the result achieved by sampling from the Gibbs sampler and the result produced from direct sampling as shown below.",0,1,0,0,1,0,0,0
Recommendation Algorithm with SVD,"If we can plot  onto the space above, we will be able to see to whom User 10’s preference is most similar. This comparison is useful since User 10 will most likely like the movie that the other use also rated highly. We can also create a similar plot for movies instead of users. The plot is shown below:  With some alteration of the viewing angle, now we see through visualization that Movies 2 and 3 are close, as we had expected from the original ratings matrix . This is an interesting result, and it shows just how powerful singular value decomposition is at extracting important patterns from given data sets. Now that we understand what SVD does for us, it’s time to code our recommender function that uses distance calculation to output movie recommendations. In this post, we will be using the dot product as a means of determining distance, although other metrics such as Euclidean distance would suit our purposes as well. An advantage of using the dot product is that it is computationally less expensive and easy to achieve with code, as shown below. The  function recommends an  number of movies given that the user rated  highly. For example, let’s say some user really liked Movie 2 and is looking for two more movies that are similar to Movie 2. Then, we can simply call the function above by passing in appropriate arguments as follows.",1,1,0,0,0,0,0,0
A sneak peek at Bayesian Inference,"From a statistics point of view, all we have to do now is conduct a random survey of the population to see the percentage of the demographic infected with the flu. Let’s say that 15 percent of the population has been affected with this flu. Plugging in the relevant value yields Using Bayes’ theorem, we are able to conclude that there is roughly a 24 percent chance that the man who tests positive on this examination is affected by the flu. That seems pretty low given the 90 percent accuracy of the test, doesn’t it? This ostensible discrepancy originates from the fact that the test has a substantial false positive of 50 percent, and also that the vast majority of the population is unaffected by the disease. This means that, if the entire population were to conduct this test, there would be more false positives than there would be true positives; hence the distortion in the value of the conditional probability. But what if the man were to take the same test again? Intuition tells us that the more test he takes, the more confident we can be on whether the man is or is not affected by the disease. For instance, if the man repeats the exam once and receives a positive report, the conditional probability that he is sick given two consecutive positive test results should be higher than the 24 percent we calculated above.",0,0,0,0,1,0,0,1
k-Nearest Neighbors Algorithm from Scratch,"As we can see, the KNN algorithm is extremely simple, but if we have enough data to feed it, it can produce some highly accurate predictions. There are still missing pieces to this puzzle, such as how to find the nearest neighbors, but we will explore the specifics of the algorithm on the go as we build the model from scratch. For now, just remember the big picture. Let’s get into the nuts and bolts of the KNN model. Below are the dependencies we will need for this demonstration. One problem we need to start thinking about is how to measure distance between two data points. After all, the implementation of KNN requires that we define some metric to measure the proximity between different points, rank them in order, and sort the list to find  nearest neighbors. One way to go about this is to use Euclidean distance, which is defined as follows: It is not difficult to build an implementation of in Python. We can easily achieve this using . Let’s test the functionality of the  function using some dummy dataset. This data set was borrowed from Jason Brownlee. Great! As expected, the distance between a point and itself is 0, and other calculated distances also seem reasonable. The next step is to write a function that returns the  nearest neighbors of a point given a data set and parameter . There are many ways to implement this, but an example is shown below.",1,0,0,0,0,1,0,0
Principal Component Analysis,"Using (2), we can reorganize (4) as follows: The last equality is due to the fact that we constrained the columns of  to be unit vectors that are orthogonal to each other. Now we can take a derivative of the argument with respect to  and set it equal to zero to find the minimum. This tells us that the optimal way of compressing  is simply by multiplying it by the transpose of the decoding matrix. In other words, we have found the transformation  in (2). For those of you who are confused about how gradients and matrix calculus work, here is a very short explanation. First, notice that  is just a scalar, since  is a column vector. Taking a gradient with respect to this quantity would mean that we get another column vector of equal dimensions with  with the following elements: And we know how to go from there. The same line of thinking can be applied to think about the second term, . We know that  is a row vector since its dot product with  should be possible dimensionally speaking. Then, we know that the gradient with respect to  should give each of the elements of , but in column vector format—hence the need for a transpose. In general, the rule of thumb is that the gradient of a scalar with respect to a vector or a matrix should return a vector or matrix of the same dimension.",0,1,0,0,1,0,0,0
BLEU from scratch,"corresponds to ;  corresponds to . Using this modified metric, we can see that the  is now penalized quite a lot through the clipping mechanism. But there are still problems that modified precision doesn’t take into account. Consider the following example translation. To us, it’s pretty obvious that  is a bad translation. Although some of the key words might be there, the order in which they are arranged violates English syntax. This is the limitation of using unigrams for precision analysis. To make sure that sentences are coherent and read fluently, we now have to introduce the notion of n-grams, where  is larger than 1. This way, we can preserve some of the sequential encoding in reference sentences and make better comparison. The fact that unigrams are a poor way of evaluating translations becomes immediately clear once we plot the  in n-grams against modified precision.  As you can see, precision score decreases as  gets higher. This makes sense: a larger  simply means that the window of comparison is larger. Unless whole phrases co-occur in the translation and reference sentences—which is highly unlikely—precision will be low. People have generally found that a suitable  value lies somewhere around 1 and 4. As we will see later, packages like  use what is known as cumulative 4-gram BLEU score, or BLEU-4. The good news is that our current implementation is already able to account for different  values. This is because we wrote a handy little function, . By passing in different values to , we can deal with different n-grams.",1,0,1,0,0,0,0,0
Likelihood and Probability,"Recall that we are dealing with distributions here, whose PDFs are not always the simplest and the most elegant-looking. If we multiply  terms of the normal PDF, for instance, we would end up with a giant exponential term. To prevent this fiasco, we can introduce a simple transformation: logarithms. Log is a monotonically increasing function, which is why maximizing some function  is equivalent to maximizing the log of that function, . Moreover, the log transformation expedites calculation since logarithms restructure multiplication as sums. With that in mind, we can construct a log equation for MLE from (3) as shown below. Because we are dealing with Euler’s number, , the natural log is our preferred base. Using the property in (3), we can simplify the equation above: To find the maximum of this function, we can use a bit of calculus. Specifically, our goal is to find a parameter that which makes the first derivative of the log likelihood function to equal 0. To find the optimal mean parameter , we derive the log likelihood function with respect to  while considering all other variables as constants. From this, it follows that Rearranging this equation, we are able to obtain the final expression for the optimal parameter  that which maximizes the likelihood function: As part 2 of the trilogy, we can also do the same for the other parameter of interest in the normal distribution, namely the standard deviation denoted by . We can simplify this equation by multiplying both sides by .",0,0,0,0,1,0,0,0
Markov Chain and Chutes and Ladders,"Because the multiplying any arbitrary vector by the identity matrix returns the vector itself, all vectors in the dimensional space can be considered an eigenvector to the matrix , with  = 1. A formal way to calculate eigenvectors and eigenvalues can be derived from the equation above. Since  is assumed as a nonzero vector, we can deduce that the matrix  is a singular matrix with a nontrivial null space. In fact, the vectors in this null space are precisely the eigenvectors that we are looking for. Here, it is useful to recall that the a way to determine the singularity of a matrix is by calculating its determinant. Using these set of observations, we can modify the equation above to the following form: By calculating the determinant of , we can derive the characteristic polynomial, from which we can obtain the set of eigenvectors for  representing some linear transformation . Now that we have reviewed some underlying concepts, perhaps it is time to apply our knowledge to a concrete example. Before we move on, I recommend that you check out this post I have written on the Markov process, just so that you are comfortable with the material to be presented in this section. In this post, we turn our attention to the game of Chutes and Ladders, which is an example of a Markov process which demonstrates the property of “memorylessness.",0,1,0,0,0,0,0,0
Gaussian Process Regression,"In other words, the new kernel matrix now becomes This can be seen as a minor correction to the kernel matrix to account for added Gaussian noise. Before we jump straight into code implementation, it’s necessary to discuss the Cholesky decomposition to get some technicality out of the way. The Cholesky decomposition is a specialization of the LDU decomposition, applied to symmetric matrices. The idea is that we can factor a symmetric matrix  as Let’s begin by considering the LDU decomposition of the  matrix. We know that for symmetric matrices, . This can easily be shown by comparing the LDU decomposition of  and  respectively: Therefore, we can rewrite the LDU decomposition of A as A nice property of diagonal matrices is that we can easily identify its square, namely, where  is a matrix whose diagonal entries are each square root of the corresponding originals in . The tranpose is not necessary since  is a diagonal matrix, but we do so for convenience purposes later on in the derivation. Note the trivial case of the identity matrix, whose square root is equal to itself since all diagonal elements take the value of 1 (and ). Given this piece of information, what we can now do is to rewrite the factorization of  as where . This is the Cholesky decomposition of symmetric matrices—to be more exact, positive semi-definite matrices. The reason why the Cholesky decomposition can only be performed on positive semi-definite matrices becomes apparent when we think about the definition of positive semi-definiteness.",1,0,0,0,0,1,0,0
So What are Autoencoders?,"Now that the autoencoder model is fully ready, it’s time to see what it can do! Although autoencoders present countless exciting possibilities for application, we will look at a relatively simple use of an autoencoder in this post: denoising. There might be times when the photos we take or image data we use are tarnished by noise—undesired dots or lines that undermine image quality. An autoencoder can be trained to remove these noises fairly easily as we will see in thi post. First, let’s import the MNIST data set for this tutorial. Nothing much exciting is happening below, except for the fact that we are rearranging and preprocessing the dataset so as to maximize training efficiency. Next, we will add  noise to the data. Note that the MNIST dataset does not contain noise by default: we will have to artificially and intentionally tarnish the dataset to produce a noisy training set for the autoencoder model. The  function precisely performs this function. Using the  function, we can create a noisy sample. Note that  was set to 0.5, although I’d imagine other values within reasonable range would work equally well as well. Training the model is very simple: the training data is , the noisy dataset, and the predicted label is . Through this configuration, we essentially expect the autoencoder to be able to see noisy images, after which encoding and decoding is performed via a transformation to a latent dimension to ultimately reproduce a pristine image devoid of any noise.",0,0,1,1,0,0,0,0
PyTorch Tensor Basics,"This is a very quick post in which I familiarize myself with basic tensor operations in PyTorch while also documenting and clarifying details that initially confused me. As you may realize, some of these points of confusion are rather minute details, while others concern important core operations that are commonly used. This document may grow as I start to use PyTorch more extensively for training or model implementation. Let’s get started. There appear to be two ways of specifying the size of a tensor. Using  as an example, let’s consider the difference between and It confused me how the two yielded identical results. Indeed, we can even verify that the two tensors are identical via I thought different behaviors would be expected if I passed in more dimensions, plus some additional arguments like , but this was not true. The conclusion of this analysis is that the two ways of specifying the size of a tensor are exactly identical. However, one note of caution is that NumPy is more opinionated than PyTorch and exclusively favors the tuple approach over the unpacked one. The conclusion of this analysis is that either approach is fine; it is perhaps a good idea to stick to one convention and stay consistent with that coding style throughout. Resizing or reshaping a tensor is an incredibly important tensor operation that is used all the time. The interesting thing is that there seems to be many ways of achieving the same behavior.",0,0,1,0,0,0,0,0
An Introduction to Markov Chain Monte Carlo,"As expected, we see that the result is normal, a result due to the property of conjugacy. Another observation we might make is that the posterior mean is seems to be slightly larger than 0. This is an expected result given that the mean of the numbers in our toy data set was larger than 0. Because the posterior can be intuited as an “average” between the observed data set and the prior, we would expect the posterior to be centered around a value greater than zero, which is indeed the case. Now that we have a full answer key to our problem, it’s time to build the Metropolis-Hastings sampler from scratch and compare the estimation generated by the sampler with the true analytical posterior we have just derived. Let’s go back to equation (7), which is the crux of the Metropolis-Hastings sampler. To recap, the MCMC sampler works by assuming some value sampled from the proposal distribution, calculating the likelihood and posterior, and seeing if the new proposed value is worth accepting, i.e. if it is worth making a jump in the random walk. All of this sounds pretty abstract when written in words, but it is a simple idea encapsulated by (7). Let’s build the Metropolis-Hastings sampler by implementing the algorithm described above in code as shown below. I looked at Thomas Wiecki’s implementation for reference and modified it to suit the purposes of this post. Although Markov Chain Monte Carlo sounds complicated, really it is achieved by this single block of code.",1,0,0,0,0,0,0,0
The Gibbs Sampler,"Heuristically, we know that the addition in  will become a multiplication when plugged back into the original formula for the multivariate Gaussian as shown in (3), using (4). Therefore, if we divide the entire expression by , we will only end up with the term produced by . Using this heuristic, we conclude that Notice that this result is exactly what we have in the function which we used to sample from the conditional distribution. The Gibbs sampler is another very interesting algorithm we can use to sample from complicated, intractable distributions. Although the use case of the Gibbs sampler is somewhat limited due to the fact that we need to be able to access the conditional distribution, it is a powerful algorithm nonetheless. We also discussed the notion of conditional distributions of the multivariate Gaussian in this post. The derivation was not the simplest, and granted we omitted a lot of algebra along the way, but it was a good mental exercise nonetheless. If you are interested in a simpler proof, I highly recommend that you check out the Stack Exchange post I linked above. I hope you enjoyed reading this post. Catch you up in the next one!.",0,1,0,0,1,0,0,0
A Brief Introduction to Recurrent Neural Networks,"Let’s cut to the chase: RNNs emulate memory by using the output from the previous sequence as an input to the next. Perhaps writing this down in matrix notation might give you a better idea of what the statement above means. Here is one way we might implement a very simple recurrent neural network. If the word “recursion” pops up into your mind, then you are on the right track. Notice that in calculating , the output of the current sequence, the output of the previous sequence,  is used. By using the output of the previous sequence, the recurrent neural network is able to “remember” some of the information that was produced by the previous input. Granted, this is not exactly what memory is or how it works in the strictest sense, but we can see how some information from the previous input is trickling down to affect the computation of the current sequence of input data. Note that I used  for the example, but we can just about use any other activation function. Here is one way we might implement this in Python. Although not necessary, I decided to opt for a class-based implementation to make things look tight and nicer. Let’s create a  class object to see that everything works properly. There is really not much point in seeing the output because the calculations are going to be based off of randomly generated data and randomly created weights, but perhaps there is something to be learned from the dimensionality of input and output data.",0,0,1,1,0,0,0,0
"Newton-Raphson, Secant, and More","An error term of  means that, if we halve the step size, we will also halve the error. This is best understood as a linear relationship between error and the step size. We can conduct a similar mode of analysis with backward divided difference. By symmetry, we can express  as If we rearrange (6), we end up with (2). Again, we see that backward divided difference yields linear error, or a trailing term of . Here’s where things get more interesting: in the case of center divided difference, the magnitude of the error term is , meaning that halving the step size decreases the error by four-folds. This is why center divided difference yields much more accurate approximations than forward or backward divided difference. To see this, we subtract (5) from (4), then move some terms, and divide both sides by . Notice that subtracting these two expression results in a lot of term cancellations. Dividing both sides by  yields From this result, we now know why the central divided difference method provides more accurate approximations of the derivative than do forward and backward divided difference. This is somewhat related to what we will be doing in the next section, so it’s a good intuition to have throughout when reading the rest of this article. Now that we have these tools for differential calculus, now comes the exciting part: solving non-linear equations. Specifically, we will be taking a look at two numerical methods: the Newton-Raphson method and the secant method.",0,0,0,0,0,0,1,0
"Linear Regression, in Two Ways","But before we jump into it, let’s briefly go over some basics of matrix calculus, which is the variant of calculus we will be using throughout. Much like we can derive a function by a variable, say  or , loosely speaking, we can derive a function by a matrix. More strictly speaking, this so-called derivative of a matrix is more formally known as the gradient. The reason why we introduced the gradient as a derivative by a matrix is that, in many ways, the gradient in matrix calculus resembles a lot of what we saw with derivatives in single variable calculus. For the most part, this intuition is constructive and helpful, and the few caveats where this intuition breaks down are beyond the purposes of this post. For now, let’s stick to that intuition as we venture into the topic of gradient. As we always like to do, let’s throw out the equation first to see what we’re getting into before anything else. We can represent the gradient of function  with respect to matrix  is a matrix of partial derivatives, defined as While this formula might seem complicated, in reality, it is just a convenient way of packaging partial derivatives of the function into a compact matrix. Let’s try to understand what this operation entails through a simple dummy example. As you can see, instead of a m-by-n matrix, we have a column vector  as an ingredient for a function.",0,1,0,0,0,0,0,0
BLEU from scratch,"Now we’re almost done. The last example to consider is the following translation: This is obviously a bad translation. However, due to the way modified precision is currently being calculated, this sentence will likely earn a high score. To prevent this from happening, we need to apply what is known as brevity penalty. As the name implies, this penalizes short candidate translations, thus ensuring that only sufficiently long machine translations are ascribed a high score. Although this might seem confusing, the underlying mechanism is quite simple. The goal is to find the length of the reference sentence whose length is closest to that of the candidate translation in question. If the length of that reference sentence is larger than the candidate sentence, we apply some penalty; if the candidate sentence is longer, than we do not apply any penalization. The specific formula for penalization looks as follows: The brevity penalty term is multiplied to the n-gram modified precision. Therefore, a value of 1 means that no penalization is applied. Let’s perform a quick sanity check to see whether the brevity penalty function works as expected. Finally, it’s time to put all the pieces together. The formula for BLEU can be written as follows: First, some notation clarifications.  specifies the size of the bag of word, or the n-gram.  denotes the weight we will ascribe to the modified precision——produced under that -gram configuration. In other words, we calculate the weighted average of log precision, exponentiate that sum, and apply some brevity penalty.",1,0,1,0,0,0,0,0
The Exponential Family,"Much like in the previous post on maximum likelihood estimation, we begin with some data set of  independent and identically distributed observations. This is going to be the setup of the MLE problem. Given this dataset, the objective of maximum likelihood estimation is to identify some parameter  that maximizes the likelihood, i.e. the probability of observing these data points under a probability distribution defined by . In other words, How do we identify this parameter? Well, the go-to equipment in a mathematician’s arsenal for an optimization problem like this one is calculus. Recall that our goal is to maximize the likelihood function, which can be calculated as follows: The first equality stands due to the assumption that all data are independent and identically distributed. Maximizing (16) is a complicated task, especially because we are dealing with a large product. Products aren’t bad, but we typically prefer sums because they are easier to work with. A simple hack that we almost always use when dealing with maximum likelihood, therefore, is to apply a log transformation to calculate the log likelihood, since the logarithm is a monotonically increasing function. In other words, What does the log likelihood look like? Well, all we have to do is to apply a log function to (16), which yields the following result. Maximizing the log liklihood can be achieved by setting the gradient to zero, as the gods of calculus would tell us.",0,0,0,0,1,0,0,1
Natural Gradient and Fisher,"In a previous post, we took a look at Fisher’s information matrix. Today, we will be taking a break from the R frenzy and continue our exploration of this topic, meshing together related ideas such as gradient descent, KL divergence, Hessian, and more. The typical formula for batch gradient descent looks something like this: This is the familiar gradient descent algorithm that we know of. While this approach works and certainly makes sense, there are definite limitations; hence the introduction of other more efficient algorithms such as SGD, Adam, and et cetera. However, these algorithms all have one thing in common: they adjust the parameter in the parameter space according to Euclidean distance. In other words, gradient descent essentially looks at regions that are some Euclidean distance away from the current parameter and chooses the direction of steepest descent. This is where the notion of natural gradients come into play: if our goal is to minimize the cost function, which is effectively equivalent to maximizing the likelihood, why not search within the distribution space of the likelihood function instead? After all, this makes more sense since gradient descent in parameter space is likely to be easily perturbed by the mode of parametrization, such as using precision instead of variance in a normal distribution, whereas searching in the distribution space would not be subject to this limitation. So the alternative to this approach would be to search the distribution space and find the distribution that which makes value of the cost function the smallest.",0,0,0,0,1,1,0,0
MLE and KL Divergence,"d) samples as shown below: Then, LLN states that A more precise statement of the law uses Chebyshev’s inequality: For the curious, here is the general formulation of Chebyshev’s inequality outside the context of LLN: For the purpose of this post, it is not necessary to go into how Chebyshev’s inequality is derived or what it means. However, it isn’t difficult to see how one might reformulate (8) to derive (7) to prove the Law of Large Numbers. All that the inequality is saying is that no more than a certain fraction of samples can fall outside more than a certain distance away from the mean of the distribution. With this understanding in mind, let’s return to the original problem and wrap up the proof. Let’s apply the Law of Large Numbers to modify the expected value expression sitting in (5): Voila! We have shown that minimizing the KL divergence amounts to finding the maximum likelihood estimate of . This was not the shortest of journeys, but it is interesting to see how the two concepts are related. Indeed, it sort of makes intuitive sense to think that minimizing the distance between the true and approximated distribution is best done through maximum likelihood estimation, which is a technique used to find the parameter of the distribution that best describes given data. I personally find little derivations and proofs like these to be quite interesting, which is why I plan on doing more posts on the mathematics of deep learning and its related concepts in the future.",0,0,0,0,1,0,0,0
Demystifying Entropy (And More),"We know for a fact that where  and  denote the events that the coin lands on heads and tails, respectively. How might we be able to express information involved in the event that the coin lands on tails? How about heads? There are many ways to approach this problem, but an easy way would be to use binary numbers. For example, we might ascribe meaning to 0 and 1 such that 0 represents heads and 1 represents tails. Of course, there might be other ways to encode information, such as setting 111 to heads and 000 to tails, but obviously this is wasting information. In other words, it is not the most efficient method of encoding. Even under a single digit binary number scheme, we would be able to decode a series of transmitted information without loss. It is not difficult to see, therefore, that all we need to express the result of a fair coin toss is a single digit of binary numbers 0 and 1. Typically, we use bits to denote the number of digits required to express information in binary numbers. In this case, the information involved in  is equal to 1 bit; by symmetry, the same goes for . If bits sounds similar to bytes or gigabytes we use for storage, you’re exactly on the right path. In fact, the relationship between bit and byte is established directly by the fact that where  denotes bits and  denotes bytes.",0,0,0,0,1,0,0,0
Dissecting LSTMs,"The equation for  is even simpler, since there is no matrix multiplication involved. Thus, the gradient flows backwards without any modification. Moving down a layer, we come across (6): Let’s begin by trying to find the gradient for . You might be wondering what the  term is doing in that equation. After all, isn’t that quantity precisely what we are trying to calculate? This is the one tricky yet also interesting part about RNN backpropagation. Recall that the whole point of a recurrent neural network is its use of variables from the previous forward pass. For example, we know that in the next forward pass,  will be concatenated with the input . In the backpropagation step corresponding to that forward pass, we would have computed ; thus, this gradient flows into the current backpropagation as well. Although this diagram applies to a standard RNN instead of an LSTM, the recurrent nature of backprop still stands. I present it here because I find this diagram to be very intuitive.  If you look at the right, the star represents the gradient from the last pass. If you look to the left, you will see that there is going to be a gradient for  that will eventually be passed over to the next backpropgation scheme. Since the forward pass is recurrent, so is the backward pass. Since we have , now it’s time to move further. Let’s derive the expression for the gradient for . Let’s do the same for the other term, .",0,0,1,0,0,0,0,0
Building Neural Network From Scratch,"The  function below is an implementation of back propagation that encapsulates equations (14) through (17). There is a subtlety that I did not discuss previously, which has to do with the bias terms. It may appear as if the gradient of the bias term does not match that of the bias term itself. Indeed, that is a valid observation according to equation (16). The way we go about this is that we add up the elements of the matrix according to columns. This is exactly what we do with the  command invoked when computing  and , which represent the gradient of the bias terms. With all the complex math behind, here is the code implementation of back propagation. Finally, our model is ready to be trained! Here is a simple function which we can use to train and test our model. Because each iteration can yield a different accuracy, we repeat the experiment multiple times—or specifically,  times—to obtain the mean accuracy of our model. We also get a standard deviation of the mean accuracy estimate to see whether or not the performance of the model is reliable and consistent. Let’s test our model with the  and  data, with batch size set to 10. The mean accuracy of our model is around 95 percent, which isn’t bad for a simple neural network with just two layers. The standard deviation is also reasonably low, indicating that the performance of our model is consistent with little variations.",1,1,1,0,0,0,0,0
BLEU from scratch,"Let’s see if the simple precision metric is able to capture this intuition. And indeed that seems to be the case! However, the simple precision-based metric has some huge problems. As an extreme example, consider the following  candidate translation. Obviously,  is a horrible translation, but the simple precision metric fails to flag it. This is because precision simply involves checking whether a hit occurs or not: it does not check for repeated bag of words. Hence, the original authors of BLEU introduces modified precision as a solution, which uses clipped counts. The gist of it is that, if some n-gram is repeated many times, we clip its count through the following formula: Here,  refers to the number of hits we assign to a certain n-gram. We sum this value over all distinct n-grams in the candidate sentence. Note that the distinction requirement effectively weeds out repetitive translations such as  we looked at earlier.  refers to the number of occurrences of a n-gram in the candidate sentence. For example, in , the unigram  appears 13 times, and so . This value, however, is clipped by , which is the maximum number of occurrence of that n-gram in any one of the reference sentences. In other words, for each reference, we count the number of occurrence of that n-gram and take the maximum value among them. This can seem very confusing, but hopefully it’s clearer once you read the code. Here is my implementation using . Notice that we use a  in order to remove redundancies.",1,0,1,0,0,0,0,0
A sneak peek at Bayesian Inference,"In other words, the prior would appear to be a uniform distribution, which is really a specific instance of a Beta distribution with . Presented below is a code snippet that simulates 500 coin flips, throughout which we perform five calculations to update our posterior. Executing this code block produces the following figure. This plot shows us the change in our posterior distribution that occurs due to Bayesian update with the processing of each data chunk. Specifically, we perform this Bayesian update after  trials. When no coin flips are performed, as shown in the first subplot, the prior follows a uniform distribution as detailed above. As more coin tosses are performed, however, we start to develop an understanding of the fairness of the coin. When we only have a few data points, the more probability there is that we obtain skewed data, which is why the mean estimate of our posterior seems skewed as well. However, with a larger number of trials, the law of large numbers guarantees that we will eventually be able to identify the value of our parameter , which is indeed the case. The key takeaway from this code block is the line . This is all the Bayesian method there is in this updating procedure.",0,0,0,0,1,0,0,1
A Step Up with  Variational Autoencoders,"Let’s start out by taking a look at the sampling function we will use to define one of the layers of the variational Autoencoder network. Simply put, the  above below takes as arguments  and  in the form of a bundled list. As you can guess from the name of the variables, these two  parameters refer to the mean and log variance of the random vector living in our predefined latent space. Note that we are assuming a diagonal Gaussian here: in other words, the covariance matrix of the multi-dimensional Gaussian is assumed to be diagonal, meaning that each elements of the vector are independent. If any of this sounds foreign to you, I recommend that you read this post on the Gaussian distribution. Let’s continue our discussion with the sampling function. The goal here is to sample a random vector in the latent space from the distribution specified by the two parameters, mean and log variance. The sampling process can be expressed as follows: where  denotes the mean, corresponding to ,  denotes a tensor of random numbers sampled from the standard normal distribution, and  denotes the standard deviation (we will see how this is related to  in just a moment). Essentially, the goal here is to use a resampling technique such that we can sample from a standard normal distribution centered around mean 0 and a standard deviation of 1, but consequentially sample from a distribution of  living in the latent space.",0,0,1,1,0,0,0,0
"Newton-Raphson, Secant, and More","It’s time to put the methods we developed in the preceding sections to use for solving non-linear equations. Specifically, we’ll begin by taking look at a classic algorithm, the Newton-Raphson method. The Newton-Raphson method is one of the many ways of solving non-linear equations. The intuition behind the Newton-Raphson method is pretty straightforward: we can use tangent lines to approximate the x-intercept, which is effectively the root of the equation . Specifically, we begin on some point on the graph, then obtain the tangent line on that point. Then, we obtain the -intercept of that tangent line, and repeat the process we’ve just completed by starting on a point on the graph whose -value is equal to that -intercept. The following image from Wikipedia illustrates this process quite well. (A digression: It’s interesting to see how “function” and “tangent” are written in German—in case you are wondering, I don’t know a word of German.)  Mathematically, the Newton-Raphson method can be expressed recursively as follows: Deriving this formula is quite simple. Say we start at a point on the graph, . The tangent line from that point will have a slope of . Therefore, the equation of the tangent line can be expressed as Then, the -intercept can simpy be obtained by finding an  value that which makes . Let  denote that point. Then, we arrive at the following update rule. Since we will be using  as the value for the next iteration, , and now we have the update rule as delineated in (4).",0,0,0,0,0,0,1,0
A Brief Introduction to Recurrent Neural Networks,"To better understand this phenomena, we probably have to run more trials with more data over longer iterations than we have done in this tutorial. This point notwithstanding, it is interesting to see how a single layer LSTM network can outperform a stacked RNN network.  The last up on this list is the one-dimensional convolutional neural network. The convent produced very remarkable results in this experiment, especially given its extremely short training time. Recurrent neural networks typically take a lot of time to train—even when they are not stacked—because each neuron is defined by a rather complicated operation involving many parameters, such as states, carriage, and so on. Convents, on the other hand, are relatively simpler, and thus take noticeably shorter to train and deploy. This tutorial demonstrates that convents can perform as well as simple recurrent networks to establish a baseline performance metric.  In this post, we briefly introduced and explored the concept of recurrent neural networks, how they work, and how to build them using the  functional API. Recurrent neural networks are one of the hottest topics in the contemporary deep learning academia because it presents numerous possibilities for applications. Hopefully this post gave you a better understanding of what all the hype is about, why RNNs are effective at what they do, and how they can be used in the context of basic natural language processing. In the next post, we will take a look at another interesting natural language processing task.",0,0,1,1,0,0,0,0
A Brief Introduction to Recurrent Neural Networks,"Neural networks are powerful models that can be used to identify complex hidden patterns in data. There are many types of neural networks, two of which we have seen already on this blog: the vanilla, feed-forward neural network and convolutional neural networks, often abbreviated as convnets. Today, we will add a third kind to this exciting mix: recurrent neural networks, or RNNs. Let’s take a brief conceptual look at how recurrent neural networks work, then implement a toy RNN to see how it compares to other models on the IMDB movie reviews dataset. I heavily borrowed my examples from Deep Learning with Python by François Chollet and the tutorial on text classification available from the official TensorFlow documentation. Recurrent neural networks, as the name implies, refer to neural network models that contain some sort of internal looping structure that simulates a flow of information. A good way to conceptualize this loop is to think of something like  loops, where a certain operation is performed repeatedly for a specified number of cycles. Given these pieces of information, we might ask ourselves two questions. Firstly, what does this looping operation involve? Secondly, what is the purpose of having this loop in the first place? Let’s try to answer both questions in the following subsections. One of the most salient features of a recurrent neural network is that it is capable of emulating some primitive form of memory. Why might we want to do this? Well, take the example of reading a text.",0,0,1,1,0,0,0,0
Complex Fibonacci,"It is worth noting that the quantity in the parenthesis, namely is otherwise referred to as the Golden ratio. Also observe that the other quantity is the negative inverse of the Golden ratio. Let’s take a closer look at why the Binet’s formula makes sense. This is not going to be a rigorous proof or a derivation, but rather an attempt at cursory analysis to provide food for thought. This process was heavily referenced from this Quora post. Intuitively, Binet’s formula has to do with the well-known fact that the ratio between two consecutive fibonacci numbers approaches the Golden ratio as  goes to infinity. In this light, we might understand the fibonacci sequence as a geometric sequence with a constant ratio. The goal, then, is to show that the ratio is in fact the Golden ratio. Then, we have the following recurrence relation between consecutive terms. Dividing both sides by , we get This is a simple quadratic equation that we can easily solve. With some precalculus algebra, we get And indeed we start to see the Golden ratio and its negative inverse as solutions to the quadratic. This means that we can express the fibonacci sequence as a linear combinations of these two solutions: Much like solving any difference equations, we have two initial conditions, namely that , . We also trivially know that , but only two conditions suffice to ascertain the value of the coefficients,  and .",0,0,0,0,0,0,1,0
"Beta, Bayes, and Multi-armed Bandits","Note that a lot of the code in this post was largely inspired by Peter’s blog. Before we get into any modeling, let’s first import the modules we’ll need and set things up. Instead of using the approach outlined in the blog I’ve linked to, I decided to use objects to model bandits. The rationale is that this approach seems to make a little bit more intuitive sense to me. Also, working with Django these days has made me feel more affinity with Python classes. At any rate, let’s go ahead. Now, we can initialize a bandit with some predetermined parameter, . Of course, our goal would be to determine the true value of this parameter through sampling and Bayesian magic. In this case, we have created a fair bandit with a  of 0.5. We can also simulate level pulls by repeatedly calling on . Note that this will accumulate the result of each Bernoulli trial in the  list object. Notice that we also have . This is an a list object that c Now that we have performed all the basic sanity checks we need, let’s quickly go ahead and create three bandit objects for demonstration purposes. Now we get into the details of how to perform the Bayesian update. More specifically, we’re interested in how we are going to use posterior probabilities to make decisions on which slot machine to pull on. This is where Thompson sampling comes in.",0,0,0,0,1,0,0,1
A Simple Autocomplete Model,"Now, all we have to do is to train the model with the data. Let’s run this for 50 epochs, just to give our model enough time to explore the loss function and settle on a good minimum. As I was training this model on Google Colab, I noticed that training even this simple model took a lot of time. Therefore, I decided that it is a good idea to probably save the trained model—in the worst case scenario that poor network connection suddenly caused the Jupyter kernel to die, saving a saved model file would be of huge help since I can continue training again from there. Saving the model on Google Colab requires us to import a simple module, . The process is very simple. To load the model, we can simply call the command below. Let’s take a look at the loss curve of the model. We can simply look at the value of the loss function as printed throughout the training scheme, but why not visualize it if we can?  As expected, the loss decreases throughout each epoch. The reason I was not paticularly worried about overfitting was that we had so much data to work with, especially in comparison with the relatively constrained memory capacity of our one-layered model. One of the objectives of this tutorial was to demonstrate the fun we can have with generative models, namely neural networks that can be used to generate data themselves, not just classify or predict data points.",0,0,1,1,0,0,0,0
"Beta, Bayes, and Multi-armed Bandits","The Beta distribution looks as follows: where Comparing (3) and the integral representation of the Beta function in (4), you will see that there is a clear resemblance, and this is no coincidence. In the Beta distribution, the Beta function which appears in the denominator is simply a normalizing constant that ensures that integrating the probability distribution function from 0 to 1 produces 1. The specifics of the Beta function and how it relates to the Gamma function might be a topic for a another post. For now, it suffices to show the general probability function as well as its building blocks, namely the Beta function itself. These will become relevant later when we derive the posterior with a binomial likelihood function to show conjugacy. To prove conjugacy, it suffices to show that multiplying a Beta prior with a binomial likelihood produces a Beta posterior. Roughly speaking, the big picture we will be using is essentially equation (1). For notation consistency, I decided to use  for conditional probability and  for function parametrization. For a rather pedantic discussion on this notational convention, I recommend that you take a quick look at this cross validated post. Let’s now plug in the Beta and binomial distributions into (5) to see what comes out of it. This is going to be a lot of computation, but the nice part of it is that a lot of terms cancel out each other. We can easily see that there are constant that exist both in the numerator and the denominator.",0,0,0,0,1,0,0,1
A Simple Autocomplete Model,"6: is a woman–what then? is there not ground 
for suspecting to and the world will had to a such that the basis of the incussions of the spirit as the does not because actian free spirits of intellect of the commstical purtious expression of men are so much he is not unnor experiences of self-conturity, and 
as anifegently religious in the man would not consciously, his action is not be actian at in accombs life for the such all procees of great and the heart of this conduct the spirity of the man can provate for in any 
once in any of the suriticular conduct that which own needs, when they are therefore, as 
such action and some difficulty that the strength, it, himself which has to its fine term of pricismans the exacte in its self-recuphing and every strength and man to wist the action something man as the worst, that the was of a longent that the whole not be all the very subjectical proves the stronger extent he is necessary to metaphysical figure of the faith in the bolity in the pure belief–as “the such a successes of the values–that is he ​ Generated text at temperature 0.",0,0,1,1,0,0,0,0
"Beta, Bayes, and Multi-armed Bandits","We can draw our own cumulative regret graph by first simulating what would have been the optimal result—in other words, we need to obtain the amount of reward the gambler would have earned had they simply pulled on the best bandit the entire time. Let’s quickly simulate that first. And it turns out that the maximum amount they would have earned, in this particular instance, is 74. I say in this particular instance, since the expected value of the maximum reward is simply 70, given that the highest success parameter is 0.7. This minor detail notwithstanding, we can now use the  quantity and the  list in order to recreate our own cumulative regret graph, as shown below.  It is obvious that the cumulative regret is highest when we start since the current reward is at 0. However, after some trial and error, the gambler starts to figure out which bandit is the best and starts pulling more of those, ultimately ending up at the point that is quite close to the maximum reward, though not quite due to the earlier opportunities that may have been lost due to exploration and sampling. In this post, we took a look at the multi-armed bandit problem and how it relates to Bayesian analysis with the Beta and Binomial distributions.",0,0,0,0,1,0,0,1
Demystifying Entropy (And More),"” While working at Bell Labs, Shannon was experimenting with methods to most efficiently encode and transmit data without loss of information. It is in this context that Shannon proposed the notion of entropy, which he roughly defined as the smallest possible size of lossless encoding of a message that can be achieved for transmission. Of course, there is a corresponding mathematical definition for entropy. But before we jump straight into entropy, let’s try to  develop some preliminary intuition on the concept of information, which is the building block of entropy. What is information? Warren Weaver, who popularized Shannon’s works and together developed the field of information theory, pointed out that information is not related to what is said, but what could be said. This element of uncertainty involved in one’s degree of freedom is what makes the notion of information inseparable from probability and randomness. As Ian Goodfellow put it in Deep Learning, The basic intuition behind information theory is that learning that an unlikely event has occurred is more informative than learning that a likely event has occurred. In other words, a low probability event expresses a lot of information, while a high probability event expresses low information as its occurrence provides little information of value to the informed. Put differently, rare events require more information to represent than common ones. Consider, for example, how we might represent the amount of information involved in a fair coin toss.",0,0,0,0,1,0,0,0
Bayesian Linear Regression,"We might also notice that the sampled regression lines seem to stay below the true regression line for smaller values of . This is because we have more samples beneath the true regression line that we have above it. Bayesian linear regression is able to account for such variations in data and uncertainty, which is a huge advantage over the simple MLE linear regression method. The true power of Bayesian linear regression might be summarized as follows: instead of returning just a single line using the MLE weight estimate of data, Bayesian linear regression models the entire data set to create a distribution of linear functions so to speak, allowing us to sample from that distribution to obtain sample linear regression lines. This is an approach that makes much more sense, since it allows us to take into account the uncertainty in our linear regression estimate. The reason why the normal equation method is unable to capture this uncertainty is that—as you might recall from the derivation of the formula for vanilla linear regression—the tools we used did not involve any probabilistic modeling. Recall that we used only linear algebra and matrix calculus to derive the model for vanilla linear regression. Bayesian linear regression is more complicated in that it involves computations with probability density functions, but the end result is of course more rewarding. That’s it for today! I hope you enjoyed reading this post. Catch you up in the next one.",0,1,0,0,0,0,0,0
Principal Component Analysis,"Principal component analysis is one of those techniques that I’ve always heard about somewhere, but didn’t have a chance to really dive into. PCA would come up in papers on GANs, tutorials on unsupervised machine learning, and of course, math textbooks, whether it be on statistics or linear algebra. I decided that it’s about time that I devote a post to this topic, especially since I promised one after writing about [singular value decomposition] on this blog some time ago. So here it goes. What do we need principal component analysis for? Or more importantly, what is a principal component to begin with? Well, to cut to the chase, PCA is a way of implementing dimensionality reduction, often referred to as lossy compression. This simply means that we want to transform some data living in high dimensional space into lower dimensions. Imagine having a data with hundreds of thousands of feature columns. It would take a lot of computing power to apply a machine learning model to fit the data and generate predictions. This is when PCA comes in: with PCA, we can figure out which dimensions are the most important and apply a transformation to compress that data into lower dimensions, making it a lot more tractable and easier to work with. And in case you’re still wondering, principal components refer to those new extracted dimensions used to newly represent data! Let’s derive PCA with some good old linear algebra tricks.",0,1,0,0,1,0,0,0
"Beta, Bayes, and Multi-armed Bandits","I personally enjoyed writing this post, not only because I hadn’t written in a long time, but also because it helped me revisit some statistics, which is something that I desperately needed to do—I’m spending way too much time dealing with Django and Selenium these days. Time and again, I realize that there is an element of intuitiveness to Bayesian statistics that, though not obvious at first, starts to make more sense as I explore more into that realm. Of course, frequentist statistics offers a quick and easy way of interpreting certain metrics, but the notion of expectation is something that I had thought was complicated and unnecessary at first, but have gradually come to understand, embrace, and even support. Perhaps writing this post has reaffirmed my Bayesian identity as a budding statistician. I hope you’ve enjoyed reading this post. Catch you up in the next one!.",0,0,0,0,1,0,0,1
"0.5!: Gamma Function, Distribution, and More","In a previous post, we looked at the Poisson distribution as a way of modeling the probability of some event’s occurrence within a specified time frame. Specifically, we took the example of phone calls and calculated how lucky I was on the day I got only five calls during my shift, as opposed to the typical twelve. While we clearly established the fact that the Poisson distribution was a more accurate representation of the situation than the binomial distribution, we ran into a problem at the end of the post: how can we derive or integrate the Poisson probability distribution, which is discontinuous? To recap, let’s reexamine the Poisson distribution function: As you can see, this function is discontinuous because of that one factorial term shamelessly flaunting itself in the denominator. The factorial, we might recall, is as an operation is only defined for integers. Therefore, although we can calculate expression such as , we have no idea what the expression  evaluates to. Or do we? Here is where the Gamma function kicks in. This is going to be the crux of today’s post. Let’s jump right into it by analyzing the Gamma function, specifically Euler’s integral of the second kind: At a glance, it is not immediately clear as to why this integral is an interpolation of the factorial function. However, if we try to evaluate this expression through integration by parts, the picture becomes clearer: Notice that the first term evaluates to 0.",0,0,0,0,1,0,0,1
Wonders of Monte Carlo,"Using this formula, let’s plot variance against the number of samples to see what effect increasing the sample size has on variance. The  function accepts a list as an argument and returns the variance seen in the given data set. Now that we have this function ready, let’s use it to plot variance against the number of samples used in crude Monte Carlo integration  Notice that variance quickly converges to near zero as the number of samples gets larger! This means that, even if we do not know the true value of the integral expression, we can now be confident that the output of the crude Monte Carlo will have converged to an approximation of the true value with sampling size as big as 1000, or even something like 400. This gives us more confidence in saying that the integral expression in (1) is approximates to 0.247. The crude Monte Carlo algorithm we employed here used simple random sampling to generate a series of random numbers to be used for our estimation. Crude Monte Carlo is powerful, but in a way it is inefficient because we have to sample large amounts to ensure that the resulting sample is representative, which is a condition that must be satisfied to produce a reliable estimate.",0,0,0,0,1,0,0,0
Building Neural Network From Scratch,"Visually, we can imagine the neuron being lit up when the value  is large.  This is similar to how the human brain works, except that biological neurons are binary in that they either fires on or off; artifical neurons in a network typically take a range of values. If we expand the vector operation in (5), it becomes quickly obvious that we can represent an entire layer of neurons as a product of two matrices. Our simple neural network model can thus be expressed as follows: The equations above represent our simple neural network model composed of two affine layers. The output of the first affine layer, , is modified by a ReLU unit. Then, the output is passed onto the second affine layer, , the output of which is passed onto a softmax unit. The output of the softmax function is the final output of our model. Note that ReLU and softmax are denoted as max and sigma, respectively. The code below is a function that intializes our network. Because our  data only has two classes, with each data point containing two entries corresponding to the  and  coordinates of that point, we set both  and  arguments to 2 by default. The number of neurons in the affine layers, denoted as , is arbitrarily set to 64. The  returns a dictionary that contains all the weights of the model. Note that we need to pay close attention to the dimensionality of our data to ensure that matrix multiplication is possible.",1,1,1,0,0,0,0,0
The Magic of Euler’s Identity,"Recall that a unit circle can be expressed by the following equation in the Cartesian coordinate system: On the complex plane mapped in polar coordinates, this expression takes on an alternate form: Notice that this contains the same exact information that Euler’s identity provides for us. It expresses: From this geometric interpretation, we can thus conclude that We now know the exact value that  represents in the complex number system! Urban legend goes that mathematician Benjamin Peirce famously said the following about Euler’s identity: Gentlemen, that is surely true, it is absolutely paradoxical; we cannot understand it, and we don’t know what it means. But we have proved it, and therefore we know it must be the truth. But contrary to his point of view, Euler’s identity is a lot more than just an interesting, coincidental jumble of imaginary and irrational numbers that somehow churn out a nice, simple integer. In fact, it can be used to better understand fundamental operations such as logarithms and powers. Consider, for example, the value of the following expression: Imaginary powers are difficult to comprehend by heart, and I no make no claims that I do. However, this mind-pulverizing expression starts to take more definite meaning once we consider the generalized form of Euler’s identity, . Let . Then we have Take both sides to the power of i: Interestingly enough, we see that  takes on a definitive, real value.",0,0,0,0,0,0,1,0
"PyTorch, From Data to Modeling","Defining the training loop may seem difficult at first, especially if you’re coming from a Keras background, but actually a lot of it is boiler plate, and things are not as difficult as they may seem. First, we define a list to hold the loss values per iteration. We will be using this list for visualization later. The exciting part comes next. For each epoch, we load the images in the . Note that the loader returns a tuple of images and labels, which we can unpack directly within the  loop itself. We then move the two objects to , which would be necessary if we were running this one a Cuda-enabled computer. Then, we calculate the loss by calling , the loss function, and append the loss to the  list. Note that we have to call  since  itself is a one-by-one PyTorch tensor. Then comes the important part where we perform backprop. The idea is that we would The three steps correspond to each of the lines in the code above, starting from . As you might be able to guess from the name of the function, we zero the gradients to make sure that we aren’t accumulating gradient values from one iteration to the next. Calling  corresponds to calculating the new gradient values, and  performs the backprop. The last block of code is simply a convenient print function I’ve written to see the progress of training at certain intervals.",0,0,1,0,0,0,0,0
The Math Behind GANs,"Generative Adversarial Networks refer to a family of generative models that seek to discover the underlying distribution behind a certain data generating process. This distribution is discovered through an adversarial competition between a generator and a discriminator. As we saw in an earlier introductory post on GANs, the two models are trained such that the discriminator strives to distinguish between generated and true examples, while the generator seeks to confuse the discriminator by producing data that are as realistic and compelling as possible. In this post, we’ll take a deep dive into the math behind GANs. My primary source of reference is Generative Adversarial Nets by Ian Goodfellow, et al. It is in this paper that Goodfellow first outlined the concept of a GAN, which is why it only makes sense that we commence from the analysis of this paper. Let’s begin! GAN can be seen as an interplay between two different models: the generator and the discriminator. Therefore, each model will have its own loss function. In this section, let’s try to motivate an intuitive understanding of the loss function for each. To minimize confusion, let’s define some notation that we will be using throughout this post. The goal of the discriminator is to correctly label generated images as false and empirical data points as true.",0,0,1,0,1,0,0,0
Moments in Statistics,"More specifically, we can calculate the th moment of a distribution simply by taking the th derivative of a moment generating function, then plugging in 0 for parameter . We will see what  is in a moment when we look at the default formula for MGF. This sounds good and all, but why do we want an MGF in the first place, one might ask. Well, given that moments convey defining properties of a distribution, a moment generating function is basically an all-in-one package that contains every bit of information about the distribution in question. Enough of the abstract, let’s get more specific by taking a look at the mathematical formula for an MGF. If  is a continuous random variable, we would take an integral instead. Now, you might be wondering how taking the th derivative of  gives us the th moment of the distribution for the random variable . To convince ourselves of this statement, we need to start by looking at the Taylor polynomial for the exponential. It’s not difficult to see the coherency of this expression by taking its derivative—the derivative of the polynomial is equal to itself, as we would expect for . From here, we can sufficiently deduce that The coherency of (3) can simply be seen by making the substitution . To continue, now that we have an expression for , we can now calculate , which we might recall is the definition of a moment generating function. where the second equality stands due to linearity of expectation.",0,0,0,0,1,0,0,1
"Newton-Raphson, Secant, and More","In the process, I got a little bit extra and also wrote a function that integrates a function in list index representation format. If we integrate , we end up with , where  is the integration constant. Excluding the integration constant, we get a result that is consistent with the  function. While it’s great that we can calculate derivatives and integrals, one very obvious drawback of this direct approach is that we cannot deal with non-polynomial functions, such as exponentials or logarithms. Moreover, the list index representation is unable to represent polynomials that include terms whose powers are not positive integers. For these reasons, we will need some other methods of calculating derivatives as well. Hence the motivation for approximation methods, outlined in the section below. If you probe the deepest depths of your memory, somewhere you will recall the following equation, which I’m sure all of us saw in some high school calculus class: This equation, commonly known as the definition of a derivative, is also known as the forward divided difference formula of calculating derivatives. There is another variant, known as the backward divided difference formula: (1) and (2) are almost nearly identical, but the difference lies in which term is subtracted from who. In (1), we go an infinitesimal step forward—hence the —and subtract the value at the point of approximation, . In (2), we go backwards, which is why we get . As  approaches 0, (1) and (2) asymptotically gives us identical results.",0,0,0,0,0,0,1,0
Understanding the  Leibniz Rule,"Before I begin, I must say that this video by Brian Storey at Olin College is the most intuitive explanation of the Leibniz rule I have seen so far. Granted, my greedy search over the internet space was by no means exhaustive, so I’ve probably missed some other hidden gems  here and there. Also, the video is intended as a visual explanation for beginners rather than a robust analytical proof of the Leibniz rule. This point notwithstanding, I highly recommend that you check out the video. This post is going to provide a short, condensed summary of the proof presented in the video, minus the fancy visualization that pen and paper can afford. The Leibniz rule, sometimes referred to as Feynman’s rule or differentiation-under-the-integral-sign-rule, is an interesting, highly useful way of computing complicated integrals. A simple version of the Leibniz rule might be stated as follows: As you can see, what this rule essentially tells us is that integrals and derivatives are interchangeable under mild conditions. We’ve used this rule many times in a previous post on Fisher’s information matrix when computing expected values that involved derivatives. Why is this the case? It turns out that the Leibniz rule can be proved by using the definition of derivatives and some Taylor expansion. Recall that the definition of a derivative can be written as This is something that we’d see straight out of a calculus textbook.",0,0,0,0,0,0,1,0
Scikit-learn Pipelines with Titanic,"All the steps prior to the model would involve wrangling the data; the last step would have the model use the data to make a prediction. Therefore, calling  should apply only to the last model after  is called on all the preprocessing steps. If the pipeline itself is just a bundle of preprocessors, on the other hand, we should only be able to call . Scikit-learn’s models are great, but in a sense they are too great. This is because there are a lot of hypterparameters to tune. Fortunately for us, we can somewhat resort to a quasi-brute force approach to deal with this: train models on a number of different combinations of hyperparameters and find the one that performs best! Well, this is what  does.  is not quite as bad in that it doesn’t create and test all possible models that distinct combinations of hyperparameters can yield: instead, it relies on a randomized algorithm to perform a search of the hyperparameter space. This is why  is a lot quicker than , with marginal sacrifices in model performance. Let’s see how we might be able to perform hyperparameter search given a pipeline like the one we have built above. The parameter space we are searching for here is by no means exhaustive, but it covers a fair amount of ground. Of course, we can go crazy with randomized search, basically shoving Scikit-learn with every possible configuration and even running a grid search instead. However, that would take an extreme amount of time and computing resources.",0,0,0,0,0,1,0,0
Gamma and Zeta,"This means that , using which we can establish the following: With some algebraic implications, we end up with Dividing both sides by , we get All the magic happens when we cast a summation on the entire expression: Notice that now we have the Riemann zeta function on the left hand side. All we have to do is to clean up what is on the right. As it stands, the integral is not particularly tractable; however, we can swap the integral and the summation expression to make progress. I still haven’t figured out the details of when this swapping is possible, which has to do with absolute divergence, but I will be blogging about it in the future once I have a solid grasp of it, as promised before. The expression in the parentheses is just a simple sum of geometric series, which we know how to calculate. Therefore, we obtain To make this integral look more nicer into a form known as the Bose integral, let’s multiply both the numerator and the denominator by . After some cosmetic simplifications, we end up with Putting everything together, now we have derived a nice expression that places both the Riemann zeta and the Gamma functions together: Or, alternatively, a definition of the Riemann zeta in terms of the Gamma: And indeed, with (13), we can evaluate the Riemann zeta function at non-integer points as well. This is also the definition of the Riemann zeta function introduced in Wikipedia.",0,0,0,0,0,0,1,0
A sneak peek at Bayesian Inference,"This is a highly intuitive restatement of the definition of conditional probability introduced above: given that event  has already occurred, conditional probability tells us the probability that event  occurs, which is then synonymous to that statement that  has occurred. By the same token, we can also define the reverse conditional probability of  given  through symmetry and substitution. Notice that the numerator stays unchanged since the operation of intersection is commutative. Now let’s develop an intuition for conditional probabilities by applying it to our example of clinical trials and the potentially affected patient. The purported accuracy of the clinical test is 90 percent, which we might express as follows, using the conditional probability notation: By the same token, we can also express the information on false positives as shown below. This conditional probability statement espouses that, given an individual who is not sick, the test returns a false positive 50 percent of the time. Conditional probability provides us with an interesting way to analyze given information. For instance, let  be the event that it rains tomorrow, and  be the event that it is cloudy at the present moment. Although we are no experts in climatology and weather forecast, common sense tells us that since with the additional piece of information that current weather conditions are cloudy, we are inclined to believe that it will likely rain tomorrow, or in the near future.",0,0,0,0,1,0,0,1
Principal Component Analysis,"I found this to be the more dominant interpretation of PCA, since indeed it is highly intuitive: the goal of PCA is to find the axes—or the principal components—that which maximize the variance seen in the data. setosa.io has some excellent visualizations on the notion of covariance and how it relates to PCA, so I highly recommend that you go check it out. If were to derive PCA from the gecko with the covariance approach, we would be using an iterative approach to find a single principal component at a time. Specifically, our goal would be to find  that which maximizes Hence the problem is now framed as a constrained optimization problem. We use Lagrangians to solve constrained optimization. The intuition for the Lagrangian method is that the gradient of the constraint and the argument should be parallel to each other at the point of optimization. We go about this by taking the gradient of the argument with respect to : Since 2 is just a constant, we can absorb it into  to form a more concise expression. Also, since the covariance matrix is by definition symmetric, we can simplify things further to end up with And once again, we have shown that the principal components are the eigenvectors of the covariance matrix. But the procedure outlined above can be used to find only one principal component, that is the eigenvector with the largest eigenvalue.",0,1,0,0,1,0,0,0
Gaussian Process Regression,"In this post, we will explore the Gaussian Process in the context of regression. This is a topic I meant to study for a long time, yet was never able to due to the seemingly intimidating mathematics involved. However, after consulting some extremely well-curated resources on this topic, such as Kilian’s lecture notes and UBC lecture videos by Nando de Freitas, I think I’m finally starting to understand what GP is. I highly recommend that you check out these resources, as they are both very beginner friendly and build up each concept from the basics. With that out of the way, let’s get started. Let’s begin by considering the classic setup of a regression problem. The goal of regression is to predict some values given a set of observations, otherwise referred to as a training set. There are of course many variants of the regression problem. For instance, in a previous post we took a look at Bayesian linear regression, where instead of a single point estimate, we tried to derive a distribution of the predicted data at a given test point. Gaussian Processes (GPs) are similar to Bayesian linear regression in that the final result is a distribution which we can sample from. The biggest point of difference between GP and Bayesian regression, however, is that GP is a fundamentally non-parametric approach, whereas the latter is a parametric one.",1,0,0,0,0,1,0,0
"0.5!: Gamma Function, Distribution, and More","Moreover, the integral term can be expressed in terms of the Gamma function since Applying all the simplifications leave us with Notice that this is a recursive representation of the factorial, since we can further unravel  using the same definition. In other words, So it is now clear that the Gamma function is indeed an interpolation of the factorial function. But the Gamma function deserves a bit more attention and analysis than the simple evaluation we have performed above. Specifically, I want to introduce a few more alternative forms of expressing and deriving the Gamma function. There are many ways to approach this subject, and it would be impossible to exhaust through the entire list of possible representations. For the purposes of this post, we look at two forms of the Gamma function I find intriguing. The first version, presented below, is Euler’s definition of the Gamma function as an infinite product. To see how this comes from, we backtrack this equality by dividing the right-hand side by . At this point, we can reduce the fraction by eliminating  from both the denominator and the numerator, which leaves us with the following expression: Therefore, we have This is another representation of the Gamma function that is distinct from the integral we saw earlier. The last form that we will see involves some tweaking of the harmonic series, or the simplest case of the Riemann zeta function where . We start from .",0,0,0,0,1,0,0,1
Building Neural Network From Scratch,"Forward propagation is great and all, but without appropriately trained weights, our model is obviously going to spit out meaningless predictions. The way to go about this is to use the gradient descent algorithm with back propagation. We will discuss more about back propagation in the next subsection, as it is a meaty topic that deserves space of its own. We deal primarily with the former in this section. This is not the first time that we have come across gradient descent on this blog. In fact, we used gradient descent to optimizse our logistic regression model in this post. Recall that the gradient descent algorithm can be summarized as where  represents the parameters, or weights,  represents the learning rate, and  represents the loss function. This is the vanilla gradient descent algorithm, which is also referred to as batch gradient descent. Minibatch gradient descent is similar to gradient descent. The only point of difference is that it calculates the gradient for each minibatch instead of doing so for the entire dataset as does batch gradient descent. The advantage of using a minibatch is that it is computationally lighter and less expensive. Minibatch gradient descent can be considered a happy point of compromise between stochastic and batch gradient descent, which lie on the polar opposite ends of the spectrum. Let’s first take a look at the  function, which divides the  and  into  and  given a .",1,1,1,0,0,0,0,0
Markov Chain and Chutes and Ladders,"The indexing is key here: for each column, th rows were assigned the probability of . Let’s say that a player is in the th cell. Assuming no chutes or ladders, a single roll of a dice will place him at one of the cells from  to ; hence the indexing as presented above. However, this algorithm has to be modified for  bigger or equal to 95. For example if , there are only three probabilities: , , and , each of values , , and  respectively. The  statements are additional corrective mechanisms to account for this irregularity. So now we’re done with the stochastic matrix! … or not quite. Things get a bit more complicated once we throw the chutes and ladders into the mix. To achieve this, we first build a dictionary containing information on the jump from one cell to another. In this dictionary, the keys correspond to the original position; the values, the index of the cell after the jump, either through a chute or a ladder. For example,  represents the first ladder on the game board, which moves the player from the first cell to the thirty eighth cell. To integrate this new piece of information into our code, we need to build a permutation matrix that essentially “shuffles up” the entries of the stochastic matrix  in such a way that the probabilities can be assigned to the appropriate entries.",0,1,0,0,0,0,0,0
Building Neural Network From Scratch,"For now, the simple observation that the performance seems to increase with more neurons, then fall at one point once overfitting starts to happen, will suffice to satisfy our curiosity. In this post, we built a neural network only using  and math. This was a lot more difficult than building other machine learning models from scratch particularly because of the heavy mathematics involved. However, it was definitely worth the challenge becasue completing and writing up this tutorial made me think a lot more about the clockwork of a neural network model. It is easy to think of neural networks as a black box, especially given the sheer ease of creating it. With just , one can build a simple neural network like this one in no time. Indeed, the main reason why I love the Keras functional API so much is that it is so easy to code and deploy a neural network model. However, when we write such models by depending on preexisting libraries, we sometimes grow oblivious to the intricacies the take place under the hood. It is my hope that reading and following along this post gave you a renewed sense of respect for the writers of such libraries, as well as the beauty of neural network models themselves. I hope you enjoyed reading this post. Catch you up in the next one!.",1,1,1,0,0,0,0,0
Fisher Score and Information,"Therefore, given some dataset, often times we use the empirical Fisher as a drop-in substitute for Fisher’s information. The empirical Fisher is defined quite simply as follows: In other words, it is simply an unweighted average of the covariance of the score function for each observed data point. Although this is a subtlety, it helps to clarify nonetheless. Something that may not be immediately apparent yet nonetheless true and very important about Fisher’s information is the fact that it is the negative expected value of the second derivative of the log likelihood. In our multivariate context where  is a vector, the second derivative is effectively the Hessian. In other words, You might be wondering how the information matrix can be defined in two says, the covariance and the Hessian. Indeed, this threw me off quite a bit as well, and I struggled to find and understand a good resource that explained why this was the case. Thankfully, Mark Reid’s blog and an MIT lecture contained some very helpful pointers that got me a long way. The derivation is not the easiest, but I’ll try to provide a concise version based on my admittedly limited understanding of this topic. Let’s start from some trivially obvious statements. First, from the definition of a PDF and the derivative operation, we know that Therefore, both the first and second derivative of this function are going to be zero. In multivariate speak, both the gradient and the Hessian are zero vectors and matrices, respectively.",0,0,0,0,1,0,0,0
Gaussian Mixture Models,"If we consider GMM to be a generative model, then we can imagine the generating process as follows: At this point, for clarity’s sake, let’s introduce some notations and concretize what has been elaborated above. First, we define a categorical distribution that will represent the mixing coefficients described above. Let  be an -dimensional vector that parametrizes this categorical distribution. In other words, This means that we assume the data to have  different clusters. Each  is then a mixing coefficient that establishes the convexness of the linear combinations of the underlying Gaussians. Now we can sample the cluster index, denoted as , from the categorical distribution as shown below. Note that we use  for the cluster index, since it is considered a latent variable—we don’t observe it directly, yet it is deeply involved in the data generation process. Quite simply, the probability that a data point belongs to the th cluster is represented by . The last step to data generation, as outlined in the bullet points above, is sampling a point from the corresponding Gaussian. where  and  are the mean and covariance matrices that parameterize the th Gaussian in the mixture model. Now that we have an idea of how GMMs can serve as a generative model that describes the underlying data generation process, let’s think about the marginal probability—that is, the probability that some point  in the sample space was generated by the GMM. After all, what we observe is the final output, not the latent variables.",0,0,0,0,1,1,0,0
Recommendation Algorithm with SVD,"In a previous post on Markov chains, we examined the clockwork behind eigendecomposition, a technique used to decompose non-degenerate square matrices. Singular value decomposition is similar to eigendecomposition in that it is a technique that can be used to factor matrices into distinct components. In fact, in deriving the SVD formula, we will later inevitably run into eigenvalues and eigenvectors, which should remind us of eigendecomposition. However, SVD is distinct from eigendecomposition in that it can be used to factor not only square matrices, but any matrices, whether square or rectangular, degenerate or non-singular. This wide applicability is what makes singular decomposition such a useful method of processing matrices. Now that we have a general idea of what SVD entails, let’s get down into the details. In this section, we take a look at the mathematical clockwork behind the SVD formula. In doing so, we might run into some concepts of linear algebra that requie us to understand some basic the properties of symmetric matrices. The first section is devoted to explaining the formula using these properties; the second section provides explanations and simple proofs for some of the properties that we reference duirng derivation. We might as well start by presenting the formula for singular value decomposition. Given some -by- matrix , singular value decomposition can be performed as follows: There are two important points to be made about formula (1). The first pertains to the dimensions of each factor: , , .",1,1,0,0,0,0,0,0
Wonders of Monte Carlo,"The returned result is not abysmal, but we clearly can do a lot better. The reason behind this spotty estimation can be checked by drawing the plot of the Monte Carlo simulation, as shown below.  As we can see, ten samples simply aren’t enough to really cover the entire area of the plane or the circle. Although we do get some points in the circle, it’s really hard to tell if the proportion of points in and out of the circle is going to be representative of the actual proportion of area between the circle and the square. Let’s push our MC algorithm to do a bit more by sampling more data points, this time with 100000 randomly generated points. As expected, with more data points, we get a better estimation of pi. Although the randomness created by the  call in our function means that this estimation will fluctuate with each execution, the value is reliably close to the actual value of , differing only by about 0.01 or less. If we draw the plot for our experiment, it is clear that our data points accurately capture the proportionality between the area of the square and the circle.  We can systematically verify that more samples tend to yield better results by graphing the magnitude of the error of our estimation plotted against the number of random samples generated.  The plot shows that, with larger sample sizes, the error quickly converges to around 0.",0,0,0,0,1,0,0,0
Dissecting LSTMs,"where, given a concatenation operator , Now we are done! The gradient for the rest of the parameters, such as  or  look almost exactly the same as  and  respectively, and not without reason: as we have noted above, what I conveniently called the filter-and-raw-material structure of LSTM gates remain consistent across the forget, input, and output gates. Therefore, we can apply the same chain rule to arrive at the same expressions. However, there is one more caveat that requires our last bit of attention, and that is the gradient for . Note that  had been concatenated to the input in the form of  throughout the forward pass. Because this was a variable that was used during computation, we need to calculate its gradient as well. This might appear rather confusing since we are currently looking at time , and it seems as if the gradient for  variables should be happening in the next iteration of backpropagation. While this is certainly true for the most part, due to the recurrent nature of LSTMs, we need to compute these gradients for  in this step as well. This is precisely what we were talking about earlier when discussing the recurrent nature of backprop; the  we compute here will be used in the next iteration of backpropagation, just like we added  in the current backprop to calculate . Becaue  was used in many different places during the forward pass, we need to collect the gradients.",0,0,1,0,0,0,0,0
The Magic of Euler’s Identity,"Notice that introducing this new parameter does not alter the fundamental shape or path of the vector ; it merely specifies the speed at which the particle is traversing the complex plane. You might recall from high school physics that the velocity vector is a derivative of the position vector with respect to time. In other words, Where  is a vector that denotes the position of an object at time . Now, let’s assume that  is such a position vector. Then, it follows from the principles of physics that its derivative will be a velocity vector. Therefore, we have What is so special about this velocity vector? For one, we can see that it is a scalar multiple of the original position vector, . Upon closer examination, we might also convince ourselves that this vector is in fact orthogonal to the position vector. This is because multiplying a point or vector by  in the complex plane effectively flips the object’s  and  components, which is precisely what a 90 degree rotation entails. What does it mean to have a trajectory whose instantaneous velocity is perpendicular to that of the position vector? Hint: think of planetary orbits. Yes, that’s right: this relationship is characteristic of circular motions, a type of movement in which an object rotates around a center of axis. The position vector of a circular motion points outward from the center of rotation, and the velocity vector is tangential to the circular trajectory.",0,0,0,0,0,0,1,0
Recommendation Algorithm with SVD,"In this optional section, we take a look at two mathematical propositions we referenced while motivating the SVD formula: first, that symmetric matrices have orthogonal eigenvectors; second, that  and  have identical non-zero eigenvalues. The proof for both of these statements are simple, but feel free to gloss over this section if you just want to see SVD at work instead of the mathematical details behind singular value decomposition. Let  be some symmetric matrix, i.e. . Also assume that  has two distinct eigenvectors,  and  with corresponding eigenvalues  and . With this setup, we start from the definition of eigenvectors and eigenvalues: If we apply transpose on both sides, We can legally multiply both sides by , which results in the following: However, since , Furthermore, we can use the fact that the eigenvalue corresponding to  is . Then, Since , the only way for (5) to make sense is if —and this is exactly what we have been trying to show. Since  and  are two distinct eigenvectors of the symmetric matrix , we have successfully shown that any two eigenvectors of  will be orthogonal, i.e. their dot product is going to be zero. Let’s start by assuming that  has some non-zero eigenvector  whose corresponding eigenvalue is . Then, we have If we left multiply both sides by , we get By the definition of an eigenvector, it is not difficult to see that  has an eigenvector  whose corresponding eigenvalue is .",1,1,0,0,0,0,0,0
The Gibbs Sampler,"Although we have dealt with -dimensional examples in the algorithm analysis above, for the sake of demonstration, let’s work on a simple example that we can also easily visualize and intuit. For this reason, the bivariate Gaussian distribution is a sensible choice. For this post, I’ll be using , which is a data visualization library built on top of . I’ll simply be using  to display a bivariate Gaussian. For reproducibility’s sake, we will also set a random seed. The code for the Gibbs sampler is simple, partially because the distribution we are dealing with is a bivariate Gaussian, not some high-dimensional intractable distribution. This point notwithstanding, the  function shows the gist of how Gibbs sampling works. Here, we pass in parameters for the conditional distribution, and start sampling given an initial  value corresponding to . As stated earlier, this random value can be chosen arbitrarily. Of course, if we start from a value that is way off, it will take much longer for the algorithm to converge, i.e. we will have to discard a large portion of initially sampled values. This is known as burn-in. In this case, however, we will apply a quick hack and start from a plausible value to begin with, reducing the need for burn-in. We then take turns sampling from the conditional probability distributions using the sampled values, and append to a list to accumulate the result. The more difficult part here is deriving the equation for the conditional probabiilty distributions of the bivariate Gaussian.",0,1,0,0,1,0,0,0
PyTorch Tensor Basics,"If we apply  to , we essentially add a new dimension to the 0-th position of ’s shape. As you can see, now there is an additional batch dimension, thus resulting in a tensor whose shape is  as opposed to the original . However, of course this operation is not performed in-place, meaning that  will still remain unchanged. There are in-place versions of both  and  though, and that is simply adding a  to the end of the function. For example, Equivalently, calling  will remove the th dimension of the tensor. By default,  is 0. Squeezing and unsqueezing can get handy when dealing with single images, or just single inputs in general. Concatenation and stacking are very commonly used in deep learning. Yet they are also operations that I often had trouble imagining in my head, largely because concatenation can happen along many axes or dimensions. In this section, let’s solidify our understanding of what concatenation really achieves with some dummy examples. With a basic example, we can quickly verify that each tensor is a three-dimensional tensor whose individual elements are two-dimensional tensors of shape . Now, let’s perform the first concatenation along the 0-th dimension, or the batch dimension. We can verify that the concatenation occurred along the 0-th dimension by checking the shape of the resulting tensor. Since we concatenated two tensors each of shape , we would expect the resulting tensor to have the shape of , which is indeed what we got.",0,0,1,0,0,0,0,0
Likelihood and Probability,"But first, let’s clarify the fact that  is probability density, not probability. Moreover, the interpretation of probability density in the context of likelihood is different from that which arises when we discuss probability; likelihood attempts to explain the fit of observed data by altering the distribution parameter. Probability, in contrast, primarily deals with the question of how probable the observed data is given some parameter . Likelihood and probability, therefore, seem to ask similar questions, but in fact they approach the same phenomenon from opposite angles, one with a focus on the parameter and the other on data. Let’s develop more intuition by analyzing the difference between likelihood and probability from a graphical standpoint. To get started, recall the that This is the good old definition of probability as defined for a continuous random varriable , given some probability density function  with parameter . Graphically speaking, we can consider probability as the area or volume under the probability density function, which may be a curve, plane, or a hyperplane depending on the dimensionality of our context. Unlike probability, likelihood is best understood as a point estimate on the PDF. Imagine having two disparate distributions with distinct parameters. Likelihood is an estimate we can use to see which of these two distributions better explain the data we have in our hands. Intuitively, the closer the mean of the distribution is to the observed data point, the more likely the parameters for the distribution would be. We can see this in action with a simple line of code.",0,0,0,0,1,0,0,0
PyTorch Tensor Basics,"Observe that the addition is not reflected in , indicating that no operations happened in-place. , however, achieves the result without copying and creating a new tensor into memory. is another common function that is used to resize tensors. It has been part of the PyTorch API for quite a long time before  was introduced. Without getting into too much technical detail, we can roughly understand view as being similar to  in that it is not an in-place operation. However, there are some notable differences. For example, this Stack Overflow post introduces an interesting example: On the other hand,  does not run into this error. The difference between the two functions is that, whereas  can only be used on contiguous tensors. This SO thread gives a nice explanation of what it means for tensors to be contiguous; the bottom line is that, some operations, such , do not create a completely new tensor, but returns a tensor that shares the data with the original tensor while having different index locations for each element. These tensors do not exist contiguously in memory. This is why calling  after a transpose operation raises an error. , on the other hand, does not have this contiguity requirement. This felt somewhat overly technical, and I doubt I will personally ever use  over , but I thought it is an interesting detail to take note of nonetheless. Another point of confusion for me was the fact that there appeared to be two different ways of initializing tensors:  and .",0,0,1,0,0,0,0,0
PyTorch Tensor Basics,"Not only do the two functions look similar, they also practically do the same thing. Upon more observation, however, I realized that there were some differences, the most notable of which was the .  seemed to be unable to infer the data type from the input given. On the other hand,  was sable to infer the data type from the given input, which was a list of integers. Sure enough,  is generally non-configurable, especially when it comes to data types. can accept  as a valid argument. The conclusion of this analysis is clear: use  instead of . Indeed, this SO post also confirms the fact that  should generally be used, as  is more of a super class from which other classes inherit. As it is an abstract super class, using it directly does not seem to make much sense. In PyTorch, there are two ways of checking the dimension of a tensor:  and . Note that the former is a function call, whereas the later is a property. Despite this difference, they essentially achieve the same functionality. To access one of the  elements, we need appropriate indexing. In the case of , it suffices to consider the size as a list, meaning that square bracket syntax can be used. In the case of , indices can directly be passed into as an argument to index individual elements in the size tensor. These past few days, I’ve spent a fair amount of time using PyTorch for basic modeling.",0,0,1,0,0,0,0,0
On Expectations and Integrals,"Expectation is a core concept in statistics, and it is no surprise that any student interested in probability and statistics may have seen some expression like this: In the continuous case, the expression is most commonly presented in textbooks as follows: However, this variant might throw you off, which happened to me when I first came across it a few weeks ago: I mean, my calculus is rusty, but it kind of makes sense: the probably density function is, after all, a derivative of the cumulative density function, and so notationally there is some degree of coherency here. But still, this definition of the expected value threw me off quite a bit. What does it mean to integrate over a distribution function instead of a variable? After some research, however, the math gurus at Stack Exchange provided me with an answer. So here is a brief summary of my findings. The integral that we all know of is called the Riemann integral. The confusing integral is in fact a generalization of the Riemann integral, known as the Riemann-Stieltjes integral (don’t ask me how to pronounce the name of the Dutch mathematician). There is an even more general interpretation of integrals called the Lebesgue integral, but we won’t get into that here. First, let’s take a look at the definition. The definition of the integral is actually a lot simpler than what one might imagine. Here,  is a value that falls within the interval . In short, we divide the interval of integration  into  infinitesimal pieces.",0,0,0,0,1,0,0,0
Convolutional Neural Network with Keras,"This visualization will help us see whether our model is actually learning with each epoch, and whether or not overfitting is occurring at any point in training. The last piece of the puzzle we need is the  function. This function is essentially wraps all the functions we have created previously, first by loading the data, training using that data, building a model, training a model, and calling on the  function to provide a visualization of the model’s learning curve. One minor tweak I used to spice up this function is the , which basically creates more images for the neural network to train on by slightly modifying existing images in the training set. These modifications involve shifting, zooming, and flipping. When we don’t have enough data to train our model on, using the  can be useful. Finally, let’s see how well our model performs!  The result shows that the model has learned decently well, with testing accuracy of approximately 80 percent. This is not the best result, but it is certainly not bad, especially given the fact that the images in the dataset, as we have seen above, are very pixelated and sometimes difficult for even humans to decipher and categorize. That’s all for today. It’s fascinating to see how CNNs are capable of perceiving images and categorizing them after appropriate training. But as we all know, the potential of neural networks far extends beyond image classificaiton.",0,0,1,1,0,0,0,0
A PyTorch Primer,"Another difference we see is , which, as the variable name makes apparent, is the optimizer that we use for backpropagation. In this specific instance, we use SGD. Each backpropagation step is then performed simply via . In this tutorial, we took a very brief look at the PyTorch model. This is by no means a comprehensive guide, and I could not even tell anyone that I “know” how to use PyTorch. Nonetheless, I’m glad that I was able to gain some exposure to the famed PyTorch module. Also, working with Django has somewhat helped me grasp the idea of classes more easily, which certainly helped me take in class-based concepts in PyTorch more easily. I distinctively remember people saying that PyTorch is more object-oriented compared to TensorFlow, and I might express agreement to that statement after having gone through the extreme basics of PyTorch. In the upcoming articles, I hope to use PyTorch to build more realistic models, preferrably in the domain of NLP, as that seems to be where PyTorch’s comparative advantage stands out the most compared to TensorFlow. Of course, this is not to say that I don’t like TensorFlow anymore, or that PyTorch is not an appropriate module to use in non-NLP contexts: I think each of them are powerful libraries of their own that provide a unique set of functionalities for the user. And being bilinguial—or even a polyglot, if you can use things like Caffe perhaps—in the DL module landscape will certainly not hurt at all.",0,0,1,0,0,0,0,0
My First GAN,"As this competition progresses, the generator becomes increasingly better at creating fake images; the discriminator also starts to excel at determining the veracity of a presented image. Enough of theoretical dwellings, let’s begin by defining the generator model. The  is a function that returns a generator model according to some set parameters. Let’s take a look at the structure of this network in more detail.  Notice that the output of the generator is a batch image of dimensions . This is exactly the same as the , , and  information we defined earlier, and that is no coincidence: in order to fool the discriminator, the generator has to generate images that are of the same dimensions as the training images from ImageNet. Now it’s time to complete the GAN by creating a corresponding discriminator, the discerning police officer. The discriminator is essentially a simple binary classier that ascertains whether a given image is true or fake. Therefore, it is no surprise that the final output layer will have one neuron with a sigmoid activation function. Let’s take a more detailed look at the  function as shown below. And again, a model summary for convenient reference:  Now we have both the discriminator and the generator, but the two are not really connected in the sense that they exist as discrete models lacking any connection between them. What we want to do, however, is to establish some relationship between the generator and the discriminator to complete a GAN, and hence train them in conjunction.",0,0,1,1,0,0,0,0
Principal Component Analysis,"PCA is a very useful technique used in many areas of machine learning. One of the most common applications is to apply PCA to a high-dimensional dataset before applying a clustering algorithm. This makes it easier for the ML model to cluster data, since the data is now aligned in such a way that it shows the most variance. Upon some more research, I also found an interesting paper that shows that there is a solid mathematical relationship between K-means clustering and PCA. I haven’t read the paper from top to bottom, but instead glossed over a summary of the paper on this thread on stack overflow. It’s certainly a lot of information to take in, and I have no intent of covering this topic in this already rather lengthy post on PCA. So perhaps this discussion will be tabled for a later time, as interesting as it seems. I hope you enjoyed reading this post. Amidst the chaos of the COVID19 pandemic, let’s try to stay strong and find peace ruminating over some matrices and formulas. Trust me, it works better than you might think.",0,1,0,0,1,0,0,0
A sneak peek at Bayesian Inference,"Notice that this line of code directly corresponds to the formula for the updated Beta posterior distribution we found earlier, which is  refers to ,  corresponds to , and both  and  are set to  in order to take into account the initial prior which tends to a uniform distribution. An interesting observation we can make about this result is that the variance of the Beta posterior decreases with more trials, i.e. the narrower the distribution gets. This is directly reflective of the fact that we grow increasingly confident about our estimate of the parameter with more tosses of the coin. At the end of the 500th trial, we can conclude that the coin is fair indeed, which is expected given that we simulated the coin flip using the command . If we were to alter the argument for this method, say , then we would expect the final result of the update to reflect the coin’s bias. Bayes’ theorem is a powerful tool that is the basis of Bayesian statistical analysis. Although our example was just a simple coin toss, the sample principle and mechanism can be extended to countless other situations, which is why Baye’s theorem remains highly relevant to this day, especially in the field of machine learning and statistical analysis. Bayesian statistics presents us with an interesting way of understanding probability. The classical way of understanding probability is the frequentist approach, which purports that a probability for an event is the limit of its frequency in infinite trials.",0,0,0,0,1,0,0,1
Fisher Score and Information,"Although the derivation is by no means mathematically robust, it nonetheless vindicates a notion that is not necessary apparently obvious, yet makes a lot of intuitive sense in hindsight. I personally found this video by Ben Lambert to be particularly helpful in understanding the connection between likelihood and information. The gist of it is simple: if we consider the Hessian or the second derivative to be indicative of the curvature of the likelihood function, the variance of our estimate of the optimal parameter  would be larger if the curvature was smaller, and vice versa. In a sense, the larger the value of the information matrix, the more certain we are about the estimate, and thus the more information we know about the parameter. I hope you enjoyed reading this post. Catch you up on another post, most likely on the Leibniz rule, then natural gradient descent!.",0,0,0,0,1,0,0,0
Logistic Regression Model from Scratch,"The main takeaway here is the the gradient descent method allows us to find the local minimum of any convex function, no matter how multidimensional or complex. This is an incredibly powerful statement, and it is one that lies at the core of many machine learning algorithms. To implement gradient descent with code, we have to figure out what the gradient descent equation is in the case of logistic regression. To do this, we need a bit of calculus work using the chain rule. Recall that our goal is to compute since we want to calculate the slope of the cross entropy function with respect to the weights vector. For notational convenience, let’s denote the gradient as a derivative: The gradient in (7) can be broken down into distinct components via the chain rule: where So the task of calculating the gradient now boils down to finding the derivative for each of the terms shown in (8). Let’s start with the easiet one, the last term, which is the derivative of  with respect to . From (9), we can conclude that The next in line is the derivative of the sigmoid function, which goes as follows: Now we are almost there. The last piece of the puzzle is computing the first term in (8), the derivative of the cross entropy function. Putting this all together into (8), we get: Voila! We have derived an expression for the gradient of the cross entropy loss function.",1,0,0,0,0,1,0,0
Traveling Salesman Problem with Genetic Algorithms,"I therefore decided to create a much more contrived example, but with many coordinates, so that we can easily verify whether the path decided on by the algorithm is indeed the optimal path. Namely, we will be arranging city coordinates to lie on a semi-circle, using the very familiar equation Let’s create 100 such fake cities and run the genetic algorithm to optimize the path. If the algorithm does successfully find an optimal path, it will be a single curve from one end of the semi-circle fully connected all the way up to its other end.  The algorithm seems to have converged, but the returned  does not seem to be the optimal path, as it is not a sorted array from 0 to 99 as we expect. Plotting this result, the fact that the algorithm hasn’t quite found the most optimal solution becomes clearer. This point notwithstanding, it is still worth noting that the algorithm has found what might be referred to as optimal segments: notice that there are some segments of the path that contain consecutive numbers, which is what we would expect to see in the optimal path.  An optimal path would look as follows.  Comparing the two, we see that the optimal path returned by the genetic algorithm does contain some wasted traveling routes, namely the the chords between certain non-adjacent cities. Nonetheless, a lot of the adjacent cities are connected (hence the use of the aforementioned term, optimal segments).",1,0,0,0,0,0,0,0
A sneak peek at Bayesian Inference,"Let’s start by coming up with a model representation of the likelihood function, which we might recall is the probability of having a parameter value of  given some data . It is not difficult to see that the best distribution for the likelihood function given the setup of the problem is the binary distribution since each coin flip is a Bernoulli trial. Let  denote a random variable that represents the number of tails in  coin flips. For convenience purposes, we define 1 to be heads and 0 to be tails. Then, the conditional probability of obtaining  heads given a fairness parameter  can be expressed as We can perform a quick sanity check on this formula by observing that, when , the probability of observing  heads diminishes to 0, unless , in which case the probability becomes 1. This behavior is expected since  represents a perfectly biased coin that always shows tails. By symmetry, the same logic applies to a hypothetical coin that always shows heads, and represents a fairness parameter of 1. Now that we have derived a likelihood function, we move onto the next component necessary for Bayesian analysis: the prior. Determining a probability distribution for the prior is a bit more challenging than coming up with the likelihood function, but we do have certain clues as to what characteristics our prior should look possess. First, the domain of the prior probability distribution should be contained within . This is because the range of the fairness parameter  is also defined within this range.",0,0,0,0,1,0,0,1
Gamma and Zeta,"The article also notes, however, that this definition only applies in a limited number of cases. This is because we’ve assumed, in using the summation of the geometric series formula, the fact that . Today’s post was a short yet very interesting piece on the relationship between the Gamma and the Riemann zeta. One thing I think could have been executed better is the depth of the article—for instance, what is the Bose integral and when is it used? I’ve read a few comments on the original YouTube video by blackpenredpen, where people were saying that the Bose integral is used in statistical mechanics and the study of black matter, but discussing that would require so much domain knowledge to cover. Regardless, I think the theoretical aspect of this derivation is interesting nonetheless. One thing I must do is writing a post on divergence and when the interchange of summation and integrals can be performed. I was originally planning to write a much longer article dividing deep into the Gamma and the Beta function as well as their distributions. However, I realized that what I need at this point in time is producing output and reorienting myself back to self-studying blogger mode, perhaps taking a brief hiatus from the grinding intern spending endless hours in Sublime text with Django (of course, I’m doing that because I enjoy and love the dev work).",0,0,0,0,0,0,1,0
How lucky was I on my shift?,"Simply put, a binomial distribution simulates multiple Bernoulli trials, which are experiments with only two discrete results, such as heads and tails, or more generally, successes and failures. A binomial random variable  can be defined as the number of success in  repeated trials with probability of success . For example, if we perform ten tosses of a fair coin, the random variable would be the number of heads;  would be , and  would be . Mathematically, the probability distribution function of a binomial distribution can be written as follows: We can derive this equation by running a simple thought experiment. Let’s say we are tossing a coin ten times. How can we obtain the probability of getting one head and nine tails? To begin with, here is the list of all possible arrangements: Notice that all we had to do was to choose one number  that specifies the index of the trial in which a coin toss produced a head. Because there are ten ways of choosing a number from integers  to , we got ten different arrangements of the situation satisfying the condition . You might recall that this combinatoric condition can be expressed as , which is the coefficient of the binomial distribution equation. Now that we know that there are ten different cases, we have to evaluate the probability that each of these cases occur, since the total probability , where . Calculating this probability is simple: take the first case,  as an example.",0,0,0,0,1,0,0,1
A PyTorch Primer,"To build our simple model, let’s first write out some variables to use, starting with the configuration of our model and its dimensions. We will also need some input and output tensors to be fed into the model for trainining and optimization. Next, here are the weight matrices we will use. For now, we assume a simple two layered dense feed forward network. Last but not least, let’s define a simple squared error loss function to use during the training step. With this entire setup, we can now hash out what the entire training iteration is going to look like. Wrapped in a loop, we perform one forward pass, then perform backpropagation to adjust the weights. Great! We see that the loss drops as more epochs elapse. While there is no problem with this approach, things can get a lot more unwieldy once we start building out more complicated models. In these cases, we will want to use the auto differentiation functionality we reviewed earlier. Let’s see this in action. Also, let’s make this more PyTorch-y by making use of classes. We will revisit why class-based implementations are important in the next section. Notice we didn’t have to explicitly specify the backpropagation formula with matrix derivatives: by simply calling  properties for each of the weights matrices, we were able to perform gradient descent.",0,0,1,0,0,0,0,0
"Linear Regression, in Two Ways","We can further specify this equation by using the fact that  can be expressed as a linear combination of the columns of . In other words, where  is the solution to the system of equations represented by . Let’s further unpackage (1) using matrix multiplication. Therefore, We finally have a formula for : Let’s remind ourselves of what  is and where we were trying to get at with projection in the context of regression. We started off by plotting three data points, which we observed did not form a straight line. Therefore, we set out to identify the line of best fit by expressing the system of equations in matrix form, , where . But because this system does not have a solution, we ended up modifying the problem to , since this is as close as we can get to solving an otherwise unsolvable system. So that’s where we are with equation (2): a formula for , which contains the parameters that define our line of best fit. Linear regression is now complete. It’s time to put our equation to the test by applying it to our toy data set. Let’s apply (2) in the context of our toy example with three data points to perform a quick sanity check. Calculating the inverse of  is going to be a slight challenge, but this process is going to be a simple plug-and-play for the most part.",0,1,0,0,0,0,0,0
"0.5!: Gamma Function, Distribution, and More","We derive both sides by  to obtain the following: Notice the harmonic series embedded in the expression above. To further simplify this expression, we derive an interpolation of the harmonic series. Let the interpolation be denoted as : We derive both sides by  to obtain the following: The expression above is the sum of a geometric series with radius . We integrate both sides by  to obtain . We are almost done! Now that we have the expression for the harmonic series, we can plug it back into the original equation on  to finish off this derivation. Integrate both sides by  to obtain the following: Exponentiate both sides by  to remove the logarithm, and we finally get the alternative representation of the Gamma function: So we see that there are many other alternate modes of expressing the same function, . But the truth that remains unchanged is that the Gamma function is essentially a more expansive definition of the factorial that allows for operations on any real numbers. There are many concepts and theories surrounding the Gamma function, such as the Euler-Mascheroni constant, Mellin transformation, and countless many more, but these might be tabled for another discussion as they each deserve a separate post. The Gamma distribution is, just like the binomial and Poisson distribution we saw earlier, ways of modeling the distribution of some random variable . Deriving the probability density function of the Gamma distribution is fairly simple. We start with two parameters,  and , using which we can construct a Gamma function.",0,0,0,0,1,0,0,1
A Simple Autocomplete Model,"As always, we will be using the  functional API to build our neural network. We will be training our neural network to speak like the great German philosopher Friedrich Nietzsche (or his English translations, to be more exact). First, let’s build a function that retrieves the necessary  text file document from the web to return a Python string. Let’s take a look at the text data by examining its length. Just to make sure that the data has been loaded successfully, let’s take a look at the first 100 characters of the string. ## Preprocessing It’s time to preprocess the text data to make it feedable to our neural network. As introduced in this previous post on recurrent neural networks, the smart way to deal with text preprocessing is typically to use an embedding layer that translates words into vectors. However, text embedding is insuitable for this task since our goal is to build a character-level text generation model. In other words, our model is not going to generate word predictions; instead, it will spit out a character each prediction cycle. Therefore, we will use an alternative technique, namely mapping each character to an integer value. This isn’t as elegant as text embedding or even one-hot encoding but for a character-level analysis, it should work fine. The  function takes a string text data as input and returns a list of training data, each of length , sampled every  characters. It also returns the training labels and a hash table mapping characters to their respective integer encodings.",0,0,1,1,0,0,0,0
BLEU from scratch,"I decided to use anonymous functions for the sake of simplicity and code readability. Next, let’s write a function that creates n-grams from a given sentence. This involves tokenizing the given sentence using , then looping through the tokens to create a bag of words. And here is a quick sanity check of what we’ve done so far. The BLEU score is based on a familar concept in machine learning: precision. Formally, precision is defined as where  and  stand for true and false positives, respectively. In the context of machine translations, we can consider positives as roughly corresponding to the notion of hits or matches. In other words, the positives are the bag of word n-grams we can construct from a given candidate translation. True positives are n-grams that appear in both the candidate and some reference translation; false positives are those that only appear in the candidate translation. Let’s use this intuition to build a simple precision-based metric. First, we need to create some n-grams from the candidate translation. Then, we iterate through the n-grams to see if they exist in any of the n-grams generated from reference translations. We count the total number of such hits, or true positives, and divide that quantity by the total number of n-grams produced from the candidate translation. Below are some candidate sentences and reference translations that we will be using as an example throughout this tutorial. Comparing  with , it is pretty clear that the former is the better translation.",1,0,1,0,0,0,0,0
A Simple Autocomplete Model,"We start to see more words that aren’t really words (the one I personally like is “farmeduition”—it sounds like it could be either some hard, obscure word that no one knows, or a failed jumble of “farm,” “education,” and “intuition”). At temperature 1.2, the model is basically going crazy with randomness, adding white spaces where there shouldn’t be and sounding more and more like a speaker of Old English or German, something that one might expect to see in English scripts written in pre-Shakesperean times. At any rate, it is simply fascinating to see how a neural network can be trained to immitate some style of writing. Hopefully this tutorial gave you some intuition of how autocomplete works, although I presume business-grade autocomplete functions on our phones are based on much more complicated algorithms. Thanks for reading this post. In the next post, we might look at another example of a generative model known as generative adversarial networks, or GAN for short. This is a burgeoning field in deep learning with a lot of prospect and attention, so I’m already excited to put out that post once it’s done. See you in the next post. Peace!.",0,0,1,1,0,0,0,0
A Simple Autocomplete Model,"However, we want to add some element of randomness of noise in the prediction. Why might we want to do this? Well, an intuitive pitfall we might expect is that the model might end up generating a repetition of some likely sequence of characters. For example, let’s say the model’s estimated distribution deems the sequence “God is dead” to be likely. Then, the output of our model might end up being something like this: …(some input text) God is dead God is dead God is dead… (repetition elided) We don’t want this to happen. Instead, we want to introduce some noise so that the model faces subtle obstructions, thereby making it get more “creative” with its output instead of getting trapped in an infinite loop of some likely sequence. Below is a sample implementation of adding noise to the output using log and exponential transformations to the output vector of our model. The transformation might be expressed as follows: where   denotes a transformation,  denotes a prediction as a vector,  denotes temperature as a measure of randomness, and  is a normalizing constant. Although this might appear complicated, all it’s doing is that it is adding some perturbation or disturbance to the output data so that it is possible for less likely characters to be chosen as the final prediction. Below is a sample implementation of this process in code. Note that due to the algebraic quality of the vector transformation above, randomness is increased for large values of .",0,0,1,1,0,0,0,0
A PyTorch Primer,"Let’s remind ourselves of Kera’s basic sequential model API: Now let’s compare this method with PyTorch’s way of declaring sequential models: This model declaration is in fact exactly identical to the simple model we have declared above. You can easily see how similar this code snippet is to the Keras example. The only difference is that the activation function is declared independently of the layer itself in PyTorch, whereas Keras combines them into one via  argument. Of course, you don’t have to specify this argument, and we can import the ReLU function from TensorFlow to make it explicit like the PyTorch example. The point, however, is that the sequential model API for both libraries are pretty similar. Another way to build models is by subclassing . The  submodule in PyTorch is the one that deals with neural networks; hence the . This subclassing might look as follows: This model is no different from the  we defined earlier. The only notable difference is that we didn’t define a separate  type function. For the most part, the overall idea boils down to Now let’s take a look at what the training code looks like. Although things might look a bit different, there’s not much going on in this process, other than the fact that some of the functions and logic we wrote before are now abstracted away by PyTorch. For example, we see , which is effectively the mean squared error loss, similar to how we defined  above.",0,0,1,0,0,0,0,0
Dissecting LSTMs,"Notice that we use a  activation instead of a sigmoid, since the aim of (3) is not to produce a filter with sparse entries, but rather to generate substance, or potential information to be stored in memory. This is more in line with the classic vanilla neural network architecture we are familiar with. Now, we can finally glue the pieces together to understand (4): we enforce forgetfulness, then supply the cell state with new information. This is now the updated cell state, which gets passed onto the next sequence as new inputs are fed into the LSTM. So far, we have only looked at the recurrent features of LSTM; in other words, how it uses information from the past to update its knowledge in the present at time . However, we haven’t yet discussed the most important part of any neural network: generating output. Obviously, all that hassle of forgetting and updating the cell state would be utterly meaningless if the cell state is not used to generate output. The whole purpose of maintaining a cell state, therefore, is to imitate long and short-term memory of the brain to generate some output. Thus, it is no surprise that the following two equations are structured the way they are: First, we see the familiar forward pass, a familiar structure we have seen earlier. Borrowing the analogy we established in the previous post,  is a filter that decides which information to use and drop.",0,0,1,0,0,0,0,0
Understanding PageRank,"Google is the most popular search engine in the world. It is so popular that the word “Google” has been [added to the Oxford English Dictionary] as a proper verb, denoting the act of searching on Google. While Google’s success as an Internet search engine might be attributed to a plethora of factors, the company’s famous PageRank algorithm is undoubtedly a contributing factor behind the stage. [The PageRank algorithm] is a method by which Google ranks different pages on the world wide web, displaying the most relevant and important pages on the top of the search result when a user inputs an entry. Simply put, PageRank determines which websites are most likely to contain the information the user is looking for and returns the most optimal search result. While the nuts and bolts of this algorithm may appear complicated—and indeed they are—the underlying concept is surprisingly intuitive: the relevance or importance of a page is determined by the number of hyperlinks going to and from the website. Let’s hash out this proposition by creating a miniature version of the Internet. In our microcosm, there are only five websites, represented as nodes on a network graph. Below is a simple representation created using Python and the [Networkx package]. Running this block results in the following graph:.",0,1,0,0,0,0,0,0
First Neural Network with Keras,"But because cross entropy is often not easy to intuitively wrap our minds around, let’s pass the  metric to the  function, as shown below. It’s time to train the neural network with the training data,  and , over a specified number of epochs. As promised, we will use the  to stop graident descent from making unnecessary computations down the road. We also specify that  and  are components of the validation set. Keras shows us how much our neural network improves over each epoch. This is convenient, but can we do better? The answer is a sure yes. Let’s quickly plot a graph to see how model accuracy improves over time, while cross entropy loss decreases with more epochs.  As the last step, we might want to save our trained model. This can be achieved with a single line of code. We can load pre-saved models as well. That’s it for today! Obviously there are a lot more we can do with , such as building deeper neural networks or non-sequential models such as CNN or GAN, but these are topics we might look at a later date when I grow more proficient with the Keras API and deep learning in general. For now, consider this to be a gentle introduction to neural networks with Keras. Thanks for reading! Catch you up in the next one.",0,0,1,1,0,1,0,0
Dissecting the Gaussian Distribution,"We can combine the two integrals to form an iterated integral of the following form: The term  rings a bell, and that bell sounds like circles and therefore polar coordinates. Let’s implement a quick change of variables to move to polar coordinates. Now we have something that we can finally integrate. Using the chain rule in reverse, we get We can consider there to be 1 in the integrand and continue our calculation. The result: From (4), we can express  in terms of : After applying the substitution, now our probability density function looks as follows: To figure out what  is, let’s try to find the variance of , since we already know that the variance should be equal to . In other words, from the definition of variance, we know that Using (5), we get We can use integration by parts to evaluate this integral. This integral seems complicated, but if we take a closer look, we can see that there is a lot of room for simplification. First, because the rate of decay of an exponential function is faster than the rate of increase of a first-order polynomial, the first term converges to zero. Therefore, we have But since Therefore, Great! Now we know what the constant  is: Plugging this expression back into (5), we finally have the equation for the probability distribution function of the univariate Gaussian. And now we’re done! Let’s perform a quick sanity check on (7) by identifying its critical points.",0,0,0,0,1,0,0,1
Word2vec from Scratch,"For backpropagation, we will need all the intermediate variables, so we hold them in a dictionary called . However, if we simply want the final prediction vectors only, not the cache, we set  to . This is just a little auxiliary feature to make things slightly easier later. We also have to implement the  function we used above. Note that this function receives a matrix as input, not a vector, so we will need to slightly tune things up a bit using a simple loop. At this point, we are done with implementing the forward pass. However, before we move on, it’s always a good idea to check the dimensionality of the matrices, as this will provide us with some useful intuition while coding backward propagation later on. The dimensionality of the matrix after passing the first layer, or the embedding layer, is as follows: This is expected, since we want all the 330 tokens in the text to be converted into ten-dimensional vectors. Next, let’s check the dimensionality after passing through the second layer. This time, it is a 330-by-60 matrix. This also makes sense, since we want the output to be sixty dimensional, back to the original dimensions following one-hot encoding. This result can then be passed onto the softmax layer, the result of which will be a bunch probability vectors. Implementing backward propagation is slightly more difficult than forward propagation.",1,0,1,0,0,0,0,0
"PyTorch, From Data to Modeling","As you can see, the loss seems to be decreasing for the most part, although it is jumpy at times. Indeed, plotting  makes it clear that the loss has been decreasing, though not entirely in a steady, monotonous fashion.  In retrospect, we could have probably added a batch normalization layer to stabilize and expedite training. However, since this post is largely meant as an introduction to PyTorch modeling, not model optimization or design, the example suffices. Now we have finally reached the last step of the development cycle: testing and evaluating the model. This last step will also require us to write a custom loop as we receive batches of data from the  object we’ve created above. The good news, however, is that the testing loop is not going to look too much different from the training loop; the only difference will be that we will not be backpropagating per each iteration. We will also be using  to make sure that the model is in the evaluation mode, not its default training mode. This ensures that things like batch normalization and dropout work correctly. Let’s talk briefly about the details of this loop. Here, the metric we’re collecting is accuracy. First, we generally see how many correct predictions the model generates. Then, we also see per-class accuracy; that is, whether our model is good at predicting any particular class. This ensures that the model’s performance is balanced throughout all labels.",0,0,1,0,0,0,0,0
Naive Bayes Model From Scratch,"One way to implement this process is represented below in the  function. Let’s see if the function works properly by passing  as into its argument. Great! As expected,  is a dictionary whose keys represent the class and values contain entries corresponding to that class. Now that we have successfully separated out the data by class, its’ time to write a function that will find the mean and standard deviation of each class data. This process is legitimate only because we assumed the data to be normally distributed—hence the name “Gaussian naive Bayes.” Let’s quickly see this in code. The  function receives a data set as input and returns a nested list that contains the mean and standard deviation of each column of the data set. For example, if we pass the toy data set  into , the returned list will contain two lists: the first list element corresponding to the mean and standard deviation of , and the second list element, . We can combine both  and  functions to create a new wrapper function  that returns the mean and standard deviation of each column for each class. This is a crucial step that will allow us to perform a MAP approximation for the distribution of variables for each class. Testing out the function on  created earlier yields the desired result. Notice that the returned dictionary contains information for each class, where the key corresponds to the label and the value contains the parameters calculated from .",1,0,0,0,0,1,0,0
Logistic Regression Model from Scratch,"The idea is that we want to get a dot product of the weight vector and the data vector, then plug the resulting value into the sigmoid function to get some value between 0 and 1. The  function shown below exactly performs this task, with the added caveat that it returns a label prediction when the boolean argument  is set to ; a raw sigmoid output when the same is set to . Let’s perform a quick sanity check by using some dummy weight vector. Using the coefficients in the  list, we can generate predictions for each observation in the . The actual class information is stored in the  list. The dummy coefficients are poorly optimized, which is why the predicted class labels do not align well with the actual class labels. This tells us that more tuning is required to update the coefficients and build a robust logistic regression model. But how exactly can we tune our model? Simply eyeballing the actual and predicted labels of our data is probably not going to help us much. To optimize the coefficients to best fit our data, we need to construct some loss function—that is, a function that describes how badly our model is performing. Then, we can optimize the weights of our model by minimizing that loss function, which would mean that our model gradually makes better predictions with each round of optimization. If you recall the previous post on entropy, you will remember that we discussed a concept called cross entropy.",1,0,0,0,0,1,0,0
Word2vec from Scratch,"An obvious sanity check we can perform is to see which token our model predicts given the word “learning.” If the model was trained properly, the most likely word should understandably be “machine.” And indeed, when that is the result we get: notice that “machine” is at the top of the list of tokens, sorted by degree of affinity with “learning.” Building and training was fun and all, but our end goal was not to build a neural network; we wanted to get word embeddings. As stated earlier in this post, the key behind word embeddings is that the rows of the first weight matrix is effectively a dense representation of one-hot encoded vectors each corresponding to various tokens in the text dataset. In our example, therefore, the embedding can simply be obtained by But of course, this is not a user-friendly way of displaying the embeddings. In particular, what we want is to be able to input a word through a function and receive as output the embedding vector for that given word. Below is a function that implements this feature. When we test out the word “machine,” we get a dense ten-dimensional vector as expected. And of course, this vector is not a collection of some randomly initialized numbers, but a result of training with context data generated through the sliding window algorithm described above. In other words, these vectors encode meaningful semantic information that tells us which words tend to go along with each other.",1,0,1,0,0,0,0,0
Dissecting the Gaussian Distribution,"If there is one thing that the field of statistics wouldn’t be complete without, it’s probably normal distributions, otherwise referred to as “the bell curve.” The normal distribution was discovered and studied extensively by Carl Friedrich Gauss, which is why it is sometimes referred to as the Gaussian distribution. We have seen Gaussian distributions before in this blog, specifically on this post on likelihood and probability. However, normal distribution was introduced merely as an example back then. Today, we will put the Gaussian distribution on stage under undivided spotlight. Of course, it is impossible to cover everything about this topic, but it is my goal to use the mathematics we know to derive and understand this distribution in greater detail. Also, it’s just helpful to brush up on some multivariable calculus in a while. Let’s start with the simplest case, the univariate Gaussian distribution. The “univariate” part is just a fancier way of saying that we will dealing be dealing with one-dimensional random variables, i.e. the distribution is going to be plotted on a two-dimensional  plane. We make this seemingly trivial distinction to distinguish it from the multivariate Gaussian, which can be plotted on three-dimensional space or beyond. We’ll take a look at the multivariate normal distribution in a later section. For now, let’s derive the univariate case. One of the defining properties of data that are said to be normally distributed when the rate at which the frequencies decrement is proportional to its distance from the mean and the frequencies themselves.",0,0,0,0,1,0,0,1
An Introduction to Markov Chain Monte Carlo,"This is due to the Markov chain part of MCMC: one of the most interesting properties of Markov chains is that, no matter where we start, we end up in the same [stationary distribution]. Together, these properties makes MCMC models like Metropolis-Hastings incredible useful for solving intractable problems. is a library made specifically for Bayesian analysis. Of course, it includes functions that implement Markov Chain Monte Carlo models. Although building the Metropolis-Hastings algorithm from scratch was a worthy challenge, we can’t build models from scratch every time we want to conduct from Bayesian analysis involving an intractable posterior, which is why packages like  always come in handy. With just a few lines of code, we can perform the exact same operation we performed above. In fact, let’s compare our Metropolis-Hastings sampler with the built-in function in the  library.  Pretty similar, wouldn’t you say? Markov Chain Monte Carlo is a powerful method with which we can estimate intractable posterior distributions. It is undoubtedly one of the most important tools that a Bayesian statistician should have under their belt. And even if you are frequentist, I still think MCMC models are worth looking at because it’s cool to see just how easily we can estimate a distribution with little to no knowledge about the mathematics involved in calculating the posterior. It’s also fascinating to see how the marriage of two seemingly unrelated concepts that arose out of different contexts–Monte Carlo methods and Markov chains—can produce such a powerful algorithm.",1,0,0,0,0,0,0,0
Gaussian Process Regression,"The distance function of the squared exponential kernel looks as follows: We can apply distortions to the RBF function by adding things like coefficients, but for simplicity sake we omit them here. The key takeaway is that the RBF kernel function functions as a distance metric between two points. As an extreme example, let’s consider the case when , the diagonal entries of the covariance matrix, which is effectively the variance along those components. Then, Conversely, when  and  are extremely different points, We can thus deduce that the distance function returns a value between 0 and 1 that indicates the similarity or closeness between two points. This is exactly the sort of behavior we want for the covariance matrix. In short, the multivariate Gaussian that we will be using for GP regression can simply be summarized as where covariance  denotes the kernel matrix. In the RBF kernel function above, we were assuming a function without any noise, namely that . However, once we add in Gaussian noise as we saw above with  where , then we need to make adjustments to the kerne to account for added variations. With some thinking, we can persuade ourselves that the only modification that is needed pertains to the diagonal entries of the covariance matrix. This is because  only affects variance that exists within the univariate Gaussian for each point on the -axis without affecting the non-diagonal entries, which otherwise pertain to covariance between two points.",1,0,0,0,0,1,0,0
Demystifying Entropy (And More),"If you think about it for a second, this is a very intuitive definition of randomness: the more random and infrequent an event is, the more information would be required to represent it. With this in mind, now we move onto the bigger picture: entropy in the context of random variables. In the previous section, we looked at how random events can be represented as information in bits. What’s important here was that we were dealing with isolated random events instead of random variables. For example, in the fair coin toss example, we dealt with information involved with  and , not the binomial random variable  itself. This is an important distinction to make, because entropy is essentially a probabilistically weighted average of all the random events that a random variable can take. In other words, entropy is defined as the weighted average of information given by each random event: For the continuous case, we would use an integral instead. Say  denotes the random variable of interest in a fair coin toss. Then, we are most interested in how much bits, on average, we would need to encode information generated from the distribution of this random variable. Using (3), we can easily answer this question by calculating the follows: This tells us that the entropy involved in a fair coin toss is 1 bit, i.e, on average, we only need a single digit of binary number to encode information given by a fair coin toss.",0,0,0,0,1,0,0,0
"Beta, Bayes, and Multi-armed Bandits","We can pull these constants out of the integral to simplify the expression. These constants include the binomial and the reciprocal Beta normalizing constants. One useful observation to make here is the fact that the numerator itself looks a lot like something we have seen before: the Beta distribution. In fact, you might also realize that the denominator is nothing but just a normalizing constant that ensures that our posterior distribution, when integrated from 0 to 1, integrates up to 1 as the axiom of probability states. We can also see the denominator as the definition of the Beta function. In other words, Therefore, we end up with Notice that offers an extremely nice interpretation: the number of success  and failures , which are determined by , yield insight into what the true parameter is via the Beta distribution. This is why the Beta distribution is often referred to as a “probability distribution of probabilities.” I highly recommend that you read this post on cross validated for many intuitive explanations of what the Beta distribution is and how it can be useful, such as in this Bayesian context. Now we know that there is a closed-form solution for Bayesian problems involving conjugate priors and likelihood functions, such as a Beta prior coupled with the binomial likelihood. But we want to be able to interpret the posterior distribution. We might start from rather simple metrics like the mean to get a better idea of what the posterior tells us.",0,0,0,0,1,0,0,1
Introduction to tf-idf,"This is because the way we built ordinal indexing in corpus is probably different from how scikit-learn implements it internally. This point notwithstanding, it’s clear that the values of each vectors are identical, disregarding the fact that the result produced by our algorithm has more decimal points due to floating point arithmetic. This was a short introductory post on tf-idf vectors. When I first heard about tf-idf vectors from a friend studying computational linguistics, I was intimidated. However, now that I have a project I want to complete, namely an auto-tagging and classification NLP model, I’ve mustered more courage and motivation to continue my study the basics of NLP. I hope you’ve enjoyed reading this post. Catch you up in the next one! (Yes, this is a trite ending comment I use in almost every post, so the idf scores for the words in these two sentences are going to be very low.).",1,0,0,0,0,0,0,0
The Magic of Euler’s Identity,"The implication of this observation is that the trajectory expressed by the vector  is essentially that of a circle, with respect to time . More specifically, we see that at , , or , which means that the circle necessarily passes through the point  on the complex plane expressed as an Argand graph. From this analysis, we can learn that the trajectory is not just any circle, but a unit circle centered around the origin. But there’s even more! Recall that the velocity vector of the trajectory is a 90-degree rotation of the position vector, i.e. , . Earlier, we concluded that the trajectory expressed by the vector  is a unit circle, which necessarily means that  for all values of . Then, syllogism tells us that  is also one, i.e. the particle on the trajectory moves at unit speed along the unit circle! Now we finally have a full visualization of the position vector. The blue arrow represents the position vector at ; green, the velocity vector also at . Why is speed important? Unit speed implies that the particle moves by  distance units after  time units. Let’s say that  time units have passed. Where would the particle be on the trajectory now? After some thinking, we can convince ourselves that it would lie on the point , since the unit circle has a total circumference of . And so we have proved that , Euler’s identity. But we can also go a step further to derive the generalized version of Euler’s identity.",0,0,0,0,0,0,1,0
Likelihood and Probability,"And that concludes today’s article on (maximum) likelihood. This post was motivated from a rather simple thought that came to my mind while overhearing a conversation that happened at the PMO office. Despite the conceptual difference between probability and likelihood, people will continue to use employ these terms interchangeably in daily conversations. From a mathematician’s point of view, this might be unwelcome, but the vernacular rarely strictly aligns with academic lingua. In fact, it’s most often the reverse; when jargon or scholarly terms get diffused with everyday language, they often transform in meaning and usage. I presume words such as “likelihood” or “likely” fall into this criteria. All of this notwithstanding, I hope this post provided you with a better understanding of what likelihood is, and how it relates to other useful statistical concepts such as maximum likelihood estimation. The topic for our next post is going to be Monte Carlo simulations and methods. If “Monte Carlo” just sounds cool to you, as it did to me when I first came across it, tune in again next week. Catch you up in the next one.",0,0,0,0,1,0,0,0
Building Neural Network From Scratch,"This is why deep learning is such a powerful tool: it can be trained to detect nonlinear, complex patterns in data that a human might otherwise be unable to identify. Our vanilla neural network will make use of two activation functions: softmax and ReLU. If you have read my previous post on the Keras functional API, you might recall that we used softmax and ReLU for certain dense layers. Back then, we considered them to be a blackbox without necessarily taking a look at what they do. Let’s explore the details and get our hands dirty today. Mathematically speaking, the softmax function is a function that takes a vector as input and outputs a vector of equal length. Concretely, where Although the formula may appear complex, the softmax function is a lot simpler than it seems. First, note that all  entries of the returned vector  add up to 1. From here, it is possible to see that the softmax function is useful for ascribing the probability that a sample belongs to one of  classes: the -th element of  would indicate the probability of the sample belonging to the -th class. Put another way, the index of the largest entry in  is the class label number that is most probable. Implementing the softmax function is extremely easy thanks to the vectorized computation made possible through . Presented below is one possible implementation of the softmax function in Python. This particular implementation, however, poses two problems. First, it is susceptible to arithematic overflow.",1,1,1,0,0,0,0,0
Principal Component Analysis,"It is not difficult to see that the trace of , which is a scalar in the one-dimensional case, is maximized when  is an eigenvector of  with the largest eigenvalue. Generalizing this result back to , we see that  is a matrix whose columns correspond to the eigenvectors of  in descending order. If you had prior exposure to PCA, you might know that the standard way of obtaining principal components is by calculating the covariance matrix of the data and finding its eigenvectors. Here, I attempt to present an explanation of how and why the procedure outlined in the preceding section is essentially achieving the same tasks, albeit through a different frame of thought. The unbiased sample covariance matrix is given by Of course, this is operating under the assumption that  has already been standardized such that the mean of the data is zero. You might be thinking that the formulation in (14) looks different from the one introduced previously on this post on SVD. In that particular post, I stated that covariance could be calculated as (14) and (15) certainly look different. However, under the hood, they express the same quantity. So in a nutshell, the conclusion we arrived at in the preceding section with the minimization of residual sums ultimately amounts to finding the covariance matrix and its eigenvectors.",0,1,0,0,1,0,0,0
An Introduction to Markov Chain Monte Carlo,"The trace plot below shows that, although the MCMC model does manage to sample many values, it likes to stay too much in its current state, thus making taking much longer for the sampler to properly estimate the posterior by sampling a wide range of values. The bottom line is that setting the right proposal distribution is important, and that trace plots are a good place to start to check if the proposal distribution is set up properly.  Now, it’s time to look at the answer key and see if our sampler has done well. Let’s plot  sampled by our Metropolis-Hastings sampler with the analytic posterior to see if they roughly match.  Fantastic! Although the estimated posterior is not exactly equal to the analytic posterior, the two are quite similar to each other. We could quantify how similar or different they are by using metrics such as [KL divergence], but for simplicity’s sake, let’s contain the post within the realm of Bayes as we have done so far. This goes to show just how useful and powerful Markov Chain Monte Carlo can be: even if a complicated likelihood function in high dimensional space, we would be able to use a similar sampling sequence to estimate the posterior. What’s even more fascinating about Markov Chain Monte Carlo is that, regardless of the value we start off with in the proposal distribution, we will eventually be able to approximate the posterior.",1,0,0,0,0,0,0,0
"Beta, Bayes, and Multi-armed Bandits","Recently, I fortuitously came across an interesting blog post on the multi-armed bandit problem, or MAB for short. I say fortuitous because the contents of this blog nicely coincided with a post I had meant to write for a very long time: revisiting the Beta distribution, conjugate priors, and all that good stuff. I decided that the MAB would be a refreshing way to discuss this topic. “Bayesian” is a buzz word that statisticians and ML people love anyway, me shamelessly included. In this post, we will start off with a brief introduction into what the MAB problem is, why it is relevant, and how we can use some basic Bayesian analysis with Beta and Bernoulli distributions to derive a nice sampling algorithm, known as Thompson sampling. Let’s dive right into it. The multi-armed bandit problem is a classical gambling setup in which a gambler has the choice of pulling the lever of any one of  slot machines, or bandits. The probability of winning for each slot machine is fixed, but of course the gambler has no idea what these probabilities are. To ascertain out the values of these parameters, the gambler must learn through some trial and error. Given this setup, what is the optimal way of going about the problem? One obvious way is to start randomly pulling on some slot machines until they get a rough idea of what the success probabilities are.",0,0,0,0,1,0,0,1
Markov Chain and Chutes and Ladders,"For example,  does not reflect the fact that getting a 1 on a roll of the dice will move the player up to the thirty eighth cell; it supposes that the player would stay on the first cell. The new permutation matrix  would adjust for this error by reordering . For an informative read on the mechanics of permutation, refer to this explanation from Wolfram Alpha. Let’s perform a quick sanity check to verify that  contains the right information on the first ladder, namely the entry  in the  dictionary. Notice the  in the th entry hidden among a haystack of 100 s! This result tells us that  is indeed a permutation matrix whose multiplication with  will produce the final stochastic vector that correctly enumerates the probabilities encoded into the Chutes and Ladders game board. Here is our final product: We can visualize the stochastic matrix  using the  package. This produces a visualization of our stochastic matrix. So there is our stochastic matrix! Now that we have a concrete matrix to work with, let’s start by identifying its eigenvectors. This step is key to understanding Markov processes since the eigenvector of the stochastic matrix whose eigenvalue is 1 is the stationary distribution vector, which describes the Markov chain in a state of equilibrium. For an intuitive explanation of this concept, refer to this previous post. Let’s begin by using the  package to identify the eigenvalues and eigenvectors of the stochastic matrix.",0,1,0,0,0,0,0,0
"Linear Regression, in Two Ways","But don’t worry: the formula in (3) works for vectors as well, since vectors can be considered as matrices with only a single column. With that in mind, let’s define our function  as follows: Great! We see that the  is a scalar function that returns some value constructed using the entries of . Equation (3) tells us that the gradient of , then, is simply a matrix of partial derivatives whose dimension equals that of . Concretely, In other words, Notice that this is the single variable calculus equivalent of saying that . This analogue can be extended to other statements in matrix calculus. For instance, where  is a symmetric matrix. We can easily verify this statement by performing the calculation ourselves. For simplicity’s sake, let’s say that  is a two-by-two matrix, although it could theoretically be any -by- matrix where  is some positive integer. Note that we are dealing with square matrices since we casted a condition on  that it be symmetrical. Let’s first define  and  as follows: Then, We can now compute the gradient of this function according to (3): We have not provided an inductive proof as to how the same would apply to -by- matrices, but it should now be fairly clear that , which is the single-variable calculus analogue of saying that . In short, 
 With these propositions in mind, we are now ready to jump back into the linear regression problem.",0,1,0,0,0,0,0,0
Recommendation Algorithm with SVD,"The takeaway is that dimensionality reduction is a meaningful way to extract important information from our data. Now that we have performed SVD on the ratings matrix, let’s move onto the last step: crafting a model for our recommendation algorithm. My personal pet theory is that using any word in conjunction with “algorithm” makes the concept sound more complex than it actually is. This is exactly what we are doing here, because in reality, our so-called algoithm for movie recommendations is going to be very simple. The intuition behind the recommendation system is distance calculation. Simply put, if users have similar movie preferences, the points representing the two users will appear to be close when plotted on a graph. Let’s see what this means by plotting  using . This can be achieved with the following code. We can pass  as an argument for the  function to see a three-dimensional plot of users’ movie preferences, as shown below.  Note that the points corresponding to User 6 and User 8 exactly overlap, which is why the points look darker despite being positioned near the corner of the plot. This is also why we can only count seven points in total despite having plotted eight data points. In short, this visualization shows how we might be able to use distance calculation to give movie recommendations to a new user. Assume, for instance, that we get a new suscriber to our movie application.",1,1,0,0,0,0,0,0
Building Neural Network From Scratch,"Let’s create a function to plot the performance of a neural network and the number of its neurons. Below is a  function that achieves this task. The function receives , , and  as arguments. The first two arguments specify the range for the number of neurons that we are interested in. For example, if we set them to 3 and 40, respectively, that means we want to see the accuracy of models with number of neurons ranging from 3 to 40 in a single layer. The  argument specifies the number of experiments we want to conduct. This way, we can calculate the mean accuracy, just as we did previously. Let’s call the function to create a plot.  The result shows that the performance of the neural network generally increases as the number of neurons increase. We don’t see signs of overfitting, but we know it happens: recall that our neural network model with 99 and 64 hidden neurons hit an accuracy of about 95 percent, whereas the model with only 30 to 40 neurons seem to be outperforming this metric by an accuracy hovering around 98 percent. After having realized this, I considered re-running the  function with a different range, but eventuially decided to stop the experiment  because running the  function took a lot more time than I had expected, even on Google Colab. Creating and training the model takes a long time, especially if we are repeating this process  times.",1,1,1,0,0,0,0,0
A Step Up with  Variational Autoencoders,"Using (11), we can proceed in a different direction from the definition of KL divergence. Once again, we have shown that KL divergence is positive! Proving this isn’t really necessary in the grand scheme of exploring the mathematics behind VAEs, yet I thought it would help to have this adjunctive section to better understand KL divergence and familiarize ourselves with some standard algebraic manipulations that are frequently invoked in many derivations. Let’s jump back into variational inference and defining the cost function with ELBO. Recall from the setup of our Variational Autoencoder model that we have defined the latent vector as living in two-dimensional space following a multivariate Gaussian distribution. It’s time to apply the ELBO equation to this specific context and derive a closed-form expression of our loss function. Let’s recall the formula for ELBO: After some rearranging, we can decompose ELBO into two terms, one of which is a KL divergence: Now, it’s finally time for us to dive deep into math: let’s unpack the closed form expression in (13). Note that the ELBO expression applies to just about any distribution, but since we chose a multivariate Gaussian to be the base distribution, we will see how it unfolds specifically in this context. Let’s begin by assuming the distribution of our models to be Gaussian.",0,0,1,1,0,0,0,0
"Newton-Raphson, Secant, and More","Recently, I ran into an interesting video on YouTube on numerical methods (at this pont, I can’t help but wonder if YouTube can read my mind, but now I digress). It was a channel called numericalmethodsguy, run by a professor of mechanical engineering at the University of Florida. While the videos themselves were recorded a while back in 2009 at just 240p, I found the contents of the video to be very intriguing and easily digestable. His videos did not seem to assume much mathematical knowledge beyond basic high school calculus. After watching a few of his videos, I decided to implement some numerical methods algorithms in Python. Specifically, this post will deal with mainly two methods of solving non-linear equations: the Newton-Raphson method and the secant method. Let’s dive right into it. Before we move on, it’s first necessary to come up with a way of representing equations in Python. For the sake of simplicity, let’s first just consider polynomials. The most obvious, simplest way of representing polynomials in Python is to simply use functions. For example, we can express  as However, a downside of this approach is the fact that it’s difficult to directly derive this equation despite the fact that it is nothing more than just a simple polynomial. So instead, we will use a list index-based representation. Namely, the  th element of a list represents the coefficient of the th power in a polynomial equation. In other words,  would translate into .",0,0,0,0,0,0,1,0
A Simple Autocomplete Model,"3: is a woman–what then? is there not ground
 for suspecting that the experience and present strange of the soul is also as the stand of the most profound that the present the art and possible to the present spore as a man and the morality and present self instinct, and the subject that the presence of the surcessize, and also it is an action which the philosophers and the spirit has the consider the action to the philosopher and possess and the spirit is not be who can something the predicess of the constinate the same and self-interpatence, the disconsises what is not to be more profound, as if it is a man as a distance of the same art and ther strict to the presing to the result the problem of the present the spirit what is the consequences and the development of the same art of philosophers and security and spirit and for the subjective in the disturce, as in the contrary and present stronger and present could not be an inclination and desires of the same and distinguished that is the discoverty in such a person itself influence and ethers as Generated text at temperature 0.",0,0,1,1,0,0,0,0
Demystifying Entropy (And More),"Although I’m no science major, one of the few things that I recall from high school chemistry class is the Gibbs free energy equation for calculating the spontaneity of reactions, which went as follows: where the term for entropy, denoted as  satisfies the condition that We won’t get into the details of these equations, but an intuition that we can glean from this equation is that the randomness of a particle is determined by the number of potential states that are possible for that given particle. In other words, a gas particle that freely moves across space at ATP is going to be more random than a near-static water particle composing an ice cub. We might take a step further and say that the gas particle carries a larger amount of information than the particle in a solid since more information is required to express its randomness. Entropy in science, denoted above as , provides us with a valuable intuition on the topic of randomness and information. In fact, it is no coincidence that the notion of randomness in information theory, a subfield of math that we are going to be dipping our toes in, borrowed the term “entropy” to express randomness exhibited in data. Just like entropy was used to quantify randomness in the scientific phenomena, the notion of entropy is used in information theory to denote randomness in data. The origin of information entropy can be traced back to Claude Shannon’s paper published in 1948, titled “A Mathematical Theory of Communication.",0,0,0,0,1,0,0,0
Maximum A Posteriori Estimation,"In a previous post on likelihood, we explored the concept of maximum likelihood estimation, a technique used to optimize parameters of a distribution. In today’s post, we will take a look at another technique, known as maximum a posteriori estimation, or MAP for short. MLE and MAP are distinct methods, but they are more similar than different. We will explore the similar mathematical underpinnings behind the methods to gain a better understanding of how distributions can be tweaked to best fit some given data. Let’s begin! Before we jump right into comparing MAP and MLE, let’s refresh our memory on how maximum likelihood estimation worked. Recall that likelihood is defined as In other words, the likelihood of some model parameter  given data observations  is equal to the probability of seeing  given . Thus, likelihood and probability are inevitably related concepts that describe the same landscape, only from different angles. The objective of maximum likelihood estimation, then, is to determine the values for a distribution’s parameters such that the likelihood of observing some given data is maximized under that distribution. In the example in the previous post on likelihoods, we showed that MLE for a normal distribution is equivalent to setting  as the sample mean; , sample variance. But this convenient case was specific only to the Gaussian distribution.",0,0,0,0,1,0,0,0
The Exponential Family,"Recall that Therefore, Finally, we have arrived at our destination: We finally know how to calculate the parameter under which the likelihood of observing given data is maximized. The beauty of this approach is that it applies to all probability distributions that belong to the exponential family because our analysis does not depend on which distribution is in question; we started from the canonical form of the exponential family to derive a set of generic equations. This is the convenience of dealing with the exponential family: because they are all defined by the same underlying structure, the MLE equations hold general applicability. In this post, we explored the exponential family of distributions, which I flippantly ascribed the title “The Medici of Probability Distributions.” This is obviously my poor attempt at an intellectual joke, to which many of you might cringe, but I personally think it somewhat captures the idea that many probability distributions that we see on the textbook are, in fact, surprisingly more related than we might think. At least to me, it wasn’t obvious from the beginning that the exponential and the Bernoulli distributions shared the same structure, not to mention the wealth of other distributions that belong to the exponential family.  Also, the convenient factorization is what allowed us to perform an MLE estimation, which is an important concept in statistics with wide ranging applications.",0,0,0,0,1,0,0,1
The Gibbs Sampler,"In order to use Gibbs sampling, we need to have access to information regarding the conditional probabilities of the distribution we seek to sample from. In other words, say we want to sample from some joint probability distribution  number of random variables. Let’s denote this distribution as follows: Turns out that the Gibbs sampler is a more specific version of the Metropolis-Hastings algorithm. We can only use the Gibbs sampler in a restricted context: namely, that we have access to conditional probability distributions. You quickly see why the Gibbs sampler can only be used in limited contexts. Nonetheless, when these set of information are available, it is a powerful algorithm with which we can sample from intractable distributions. Let’s see how this works. The gist of the Gibbs sampler is simple: sample from known conditional distributions, and use that resulting value to sample the next random variable from the following conditional probability distribution, ad infinitum. But this is just a lot of words and some needless Latin for fun and flair, so let’s hash out what the sentence really means. Continuing on from our generic example, let’s say we sampled a value from the first conditional probability distribution. We will use a superscript and subscript notation to each denote the iteration and the sequence of random variable. Assume that we start from some random -dimensional vector to start with. Following our notation, this vector would be The superscripts are all 0 since this is the first “sample” we will start off with.",0,1,0,0,1,0,0,0
BLEU from scratch,"This is where BLEU comes to the rescue. The way BLEU works is simple. Given some candidate translation of a sentence and a group of reference sentences, we use a bag-of-word approach to see how many occurences of BOWs co-occur in both the translation and reference sentences. BOW is a simple yet highly effective way of ensuring that the machine translation contains key phrases or words that reference translations also contain. In other words, BLEU compares candidate translations with human-produced, annotated reference translations and compares how many hits there are in the candidate sentence. The more BOW hits there are, the better the translation. Of course, there are many more details that go beyond this. For instance, BLEU is able to account for situations in which meaningless words are repeated throughout the machine translation to simply increase BOW hits. It can also penalize translations that are too short. By combining this BOW precision-based approach with some penalization terms, BLEU provides a robust means of evaluating machine translations. With this high-level overview in mind, let’s start implementing BLEU from scratch. First, let’s begin by defining some simple preprocessing and helper functions that we will be using throughout this tutorial. The first on the list is , which converts a given sentence into lowercase and splits it into tokens, which are, in this case, English words. We could make this more robust using regular expressions to remove punctuations, but for the purposes of this demonstration, let’s make this simpler.",1,0,1,0,0,0,0,0
A Brief Introduction to Recurrent Neural Networks,"Why dense vectors, then? Can’t we simply use one-hot encoding? That is a valid point, since one-hot encoding is how we mostly deal with categorical variables in a dataset. However, one downside of this approach is that we end up with many sparse vectors. In other words, a lot of resources are wasted because the model now has to process vectors of thousands or millions of dimensions, depending on the vocabulary size. Instead of using sparse vectors to represent each word, we can simply use a denser vector of smaller dimensions to encode our data. Another advantage of this approach is that dense vectors can be used to encode semantic information. You might have heard of the famous example that “king minus male equals queen minus female.” If we were to represent the words king, queen, male, and female as vectors, we can add and subtract vectors to represent and distill meaningful information. This vector-based computation is the key to natural language processing with deep neural networks: by back propagating and adjusting the weights of our embedding layer, our model can eventually be trained to “understand” the meaning of words and their relationship with other words in the form of dense vectors. Enough talking, let’s use the embedding layer to build our neural networks, starting with the simple feed-forward model. The feed-forward neural network model will first have an embedding layer that processes input.",0,0,1,1,0,0,0,0
Natural Gradient and Fisher,"Conceptually, we can think of  as the previous point of the parameter and  as the newly updated parameter. In this context, the KL divergence would tell us the effect of one iteration of natural gradient descent. This time, instead of using integral, let’s try to simplify a bit by expressing quantities as expectations. We see the familiar log likelihood term. Given the fact that the Fisher matrix is the negative expected Hessian of the log likelihood, we should be itching to derive this expression twice to get a Hessian out of it. Let’s first obtain the gradient, then get its Jacobian to derive a Hessian. This derivation process was heavily referenced from Agustinus Kristiadi’s blog. Let’s do this one more time to get the Hessian. This conclusion tells us that the curvature of KL divergence is defined by Fisher’s matrix. In hindsight, this is not such a surprising result given that the KL divergence literally had a term for expected log likelihood. Applying the Leibniz rule twice to move the derivative into the integral, we quickly end up with Fisher’s matrix. At this point, you might be wondering about the implications of this conclusion. It’s great that KL divergence and the Fisher matrix are closely related via the Hessian, but what implication does it have for the gradient descent algorithm in distribution space? To answer this question, we first need to perform a quick multivariate second order Taylor expansion on KL divergence.",0,0,0,0,1,1,0,0
Dissecting LSTMs,"In this post, we will revisit the topic of recurrent neural networks, or RNNs. Although we have used RNNs before in a previous post on character-based text prediction, we glossed over LSTM and assumed it as a black box that just worked. Today, we will take a detailed look at how LSTMs work by dissecting its components. Note that this post was inspired by this article by Kristiadi. I also heavily referenced this post by Christopher Olah. If you find any part of this article intriguing and intellectually captivating, you will surely enjoy reading their blogs as well. With this in mind, let’s jump right into it. Long Short-Term Memory networks, or LSTMs for short, are one of the most widely used building blocks of Recurrent Neural Networks, or RNNs. This is because LSTMs overcame many of the limitations of basic vanilla RNNs: while simple RNN gates are bad at retaining long-term information and only remember input information that were fed into it relatively recently, LSTMs do a great job of retaining important information, even if they were fed into the cell long time ago. In other words, they are able to somewhat mimic the function of the brain, which involves both long and short-term memory. The structure of an LSTM cell might be summarized as follows: Note that  represents the Hadamard Product, which is nothing more than just the element-wise multiplication of matrices. This long list of equations surely looks like a lot, but each of them has a specific purpose. Let’s take a look.",0,0,1,0,0,0,0,0
Demystifying Entropy (And More),"But how might this number change for a biased coin? We would not expect the entropy of the random variable given by the result of a biased coin to be 1. For example, consider a coin that always lands on heads. The entropy of the random variable in this case would be exactly 0 bits, since we don’t need any information to express an event that is certain. Let’s try to figure out this dynamic between success probability of  in a coin toss and entropy by creating a plot.  The first observation to make is that the graph is symmetrical. This is no surprise, since we would expect the entropy of a random variable involving a coin that lands tails with probability  to be equal to that which lands on heads with equal probability , i.e. whether the bias concerns heads or tails should not affect the calculation of entropy. Moreover, we see that the graph peaks when , meaning that a fair coin toss involves the most randomness. In other words, this translates to saying that a skewed distribution is less random and thus more predictable than a symmetric one. This makes sense, since the result of a biased coin is more predictable and less surprising than that of a fair one, with the extreme case being the coin that always lands on one side. Seen in this light, entropy is just the total amount of information content expressed by the distribution of a random variable.",0,0,0,0,1,0,0,0
A sneak peek at Bayesian Inference,"For example, a simple random sampling of the population might reveal that 15 percent of the sample population is affected with the flu, but this would most likely produce a normal distribution with mean centered around 0.15 instead of a point probability. From a Bayesian standpoint, we would then replace the point probability in our example above with an equation for the distribution, from which we can proceed with the Bayesian analysis of updating our prior with the posterior through repeated testing and computation. Bayes’ theorem, specifically in the context of statistical inference, can be expressed as where  stands for observed or measured data,  stands for parameters, and  stands for some probability distribution. In the language of Bayesian inference,  is the posterior distribution for the parameter ,  is the likelihood function that expresses the likelihood of having parameter  given some observed data ,  is the prior distribution for the parameter , and  is evidence, the marginal probability of seeing the data, which is determined by summing or integrating across all possible values of the parameter, weighted by how strongly we believe in those particular values of . Concretely, Notice that this is not so different from the expansion of the denominator we saw with Bayes’ theorem, specifically equation (5). The only difference here is that the integral takes continuous probability density functions into account, as opposed to discrete point probabilities we dealt with earlier.",0,0,0,0,1,0,0,1
A sneak peek at Bayesian Inference,"This constraint immediately tells us that where  is represents the probability density function that represents the prior. Recall that some of the other functions we have looked at, namely binomial, Poisson, Gamma, or exponential are all defined within the unclosed interval , making it unsuitable for our purposes. The Beta distribution nicely satisfies this criterion. The Beta distribution is somewhat similar to the Gamma distribution we analyzed earlier in that it is defined by two shape parameters,  and . Concretely, the probability density function of the Beta distribution goes as follows: The coefficient, expressed in terms of a fraction of Gamma functions, provides a definition for the Beta function. The derivation of the Beta distribution and its apparent relationship with the Gamma function deserves an entirely separate post devoted specifically to the said topic. For the purpose of this post, an intuitive understanding of this distribution and function will suffice. A salient feature of the Beta distribution that is domain is contained within . This means that, application-wise, the Beta distribution is most often used to model a distribution of probabilities, say the batting average of a baseball player as shown in this post. It is also worth noting that the Beta function, which serves as a coefficient in the equation for the Beta PDF, serves as a normalization constant to ensure that integrating the function over the domain  would yield 1 as per the definition of a PDF. To see this, one needs to prove This is left as an exercise for the keen reader.",0,0,0,0,1,0,0,1
The Gibbs Sampler,"Theoretically, it doesn’t matter what these random numbers are—asymptotically speaking, we should still be able to approximate the final distribution, especially if given the fact that we take burn-in into account. On the first iteration, we will begin by sampling from the first probability distribution. Note that we simply used the initial random values for  through  to sample the first value from a conditional probability distribution. Now, we do the same to sample . Only this time, we can use the result from earlier, namely . We can see how this might help us yield a slightly more convincing result than simply using the random data. We still have to use random values for  through  since we haven’t sampled from their relevant conditional distributions just yet. However, as we go through all the random variables in order, it becomes obvious that we will no longer be using randomly initialized values at one point. Specifically, on the th iteration, we would expect something like this to happen:  can be any number between 1 and , since it is used to represent the th random variable. As we repeat more iterations of sampling, we will eventually end up with a plausible representation of -dimensional vectors, which is what we sought to sample from the intractable distribution! In this section, we will take a look at a very simple example, namely sampling from a bivariate Gaussian distribution.",0,1,0,0,1,0,0,0
Fisher Score and Information,"Using the Leibniz rule we saw earlier, we can interchange the derivative and come up with the following expressions. Granted, these expressions somewhat muffle the shape of the quantity we are dealing with, namely vectors and matrices, but it is concise and intuitive enough for our purposes. With these statements in mind, let’s now begin the derivation by first taking a look at the Hessian of the score function. From the chain rule, we know that This does not look good at all. However, let’s not fall into despair, since our goal is not to calculate the second derivative or the Hessian itself, but rather its negative expected value. In calculating the expected value, we will be using integrals, which is where the seemingly trivial statements we established earlier come in handy. By linearity of expectation, we can split this expectation up into two pieces. Let’s use integrals to express the first expectation. The good news is that now we see terms canceling out each other. Moreover, from the Leibniz rule and the interchanging of the integral and the derivative, we have shown that the integral in fact evaluates to zero. This ultimately leaves us with Therefore we have established that And we’re done! In this post, we took a look at Fisher’s score and the information matrix. There are a lot of concepts that we can build on from here, such as Cramer Rao’s Lower Bound or natural gradient descent, both of which are interesting concepts at the intersection of machine learning and statistics.",0,0,0,0,1,0,0,0
Gaussian Mixture Models,"Before we get into the details of what the EM algorithm is, it’s perhaps best to provide a very brief overview of how the EM algorithm works. A very simple way to understand EM is to think of the Gibbs sampler. Simply put, Gibbs sampling is a way of approximating some joint distribution given conditional distributions. The underlying idea was to sample from one distribution and use that sampled result to in turn generate another sample from the next conditional distribution. One might visualize this as a chain of circular dependence: if we obtain a sample from past samples, the new sample can then be used to generate the next sample. Repeat this process until convergence, and we are done. Turns out that the Gibbs sampler can be considered a specific flavor of the EM method. Although I am still far away from fully understanding the inner-workings of the EM algorithm, the underlying idea is clear: given some sort of dependence relationship, much like we saw in the case of Gibbs sampling above, we can generate some sample in one iteration and use that sample in the next. As we will see in this section, such a relationship can clearly be established, which is why EM is so commonly used in the context of Gaussian mixture models. Let’s begin by defining some quantities, the first being the posterior distribution.",0,0,0,0,1,1,0,0
Maximum A Posteriori Estimation,"The implication of this decision is that the prior collapses to a constant. Given the nature of the derived MAP formula in (5), constants can safely be ignored as it will not contribute to argument maximization in any way. Concretely, Therefore, in the case of a uniform prior, we see that MAP essentially boils down to MLE! This is an informative result that tells us that, at their core, MLE and MAP seek to perform the same operation. However, MAP, being a Bayesian approach, takes a specified prior into account, whereas the frequenting MLE simply seeks to dabble in data only, as probabilities are considered objective results of repeated infinite trials instead of subjective beliefs as a Bayesian statistician would purport. I hope you enjoyed reading this post. See you in the next one!.",0,0,0,0,1,0,0,0
k-Nearest Neighbors Algorithm from Scratch,"These days, machine learning and deep neural networks are exploding in importance. These fields are so popular that, unless you’re a cave man, you have probably heard it at least once. The exaggeration not withstanding, there is perhaps no necessity to justify the topic for today’s blog post: exploring a machine learning algorithm by building it from scratch. Apparently, “from scratch” is now a trendy pedagogical methodology employed in many websites and resources that claim to educate their readers about machine learning. To this, I agree: by constructing algorithms from the ground up, one can glean meaningful insights on how machine learning actually works, as opposed to viewing ML as some dark magic that suddenly makes computers intelligible beings. Enough of the prologue, let’s jump right in. As the name implies, the k-nearest neighbors algorithm works by findinng the nearest neighbors of some give data. Then, it looks at the labels of  neighboring points to produce a classification prediction. Here,  is a parameter that we can tweak to build the KNN model. For instance, let’s say we have a binary classification problem. If we set  to 10, the KNN modell will look for 10 nearest points to the data presented. If among the 10 neighbors observed, 8 of them have the label 0 and 2 of them are labeled 1, the KNN algorithm will conclude that the label of the provided data is most likely also going to be 0.",1,0,0,0,0,1,0,0
Fourier Series,"For example, The same applies to cosines and sines: where  and  can be any integer. In other words, cosine functions of different frequencies are orthogonal to each other, as are cosines are with sines! Now, why is orthogonality relevant at all for understanding the Fourier series? It’s time to sit back and let the magic unfold when we multiply  to (1) and integrate the entire expression. If we divide both sides of (5) by , you will realize that we have derived an expression for the constant corresponding to the  expansion term: The key takeaway here is this: by exploiting orthogonality, we can knock out every term but one, the very term that we multiplied to the expansion. By the same token, therefore, we can  deduce that we can do the same for the sine terms: The only small caveat is that the case is a bit more specific for . When ,  reduces to a constant of one, which is why we end up with  instead of . In other words, Hence, we end up with This exceptional term has a very intuitive interpretation: it is the average of the function  over the domain of integration. Indeed, if we were to perform some expansion, it makes intuitive sense that we start from an average. One observation to make about Fourier expansion is the fact that it is a combination of sines and cosines—and we have seen those before with, lo and behold, Euler’s formula.",0,0,0,0,1,0,1,0
"Newton-Raphson, Secant, and More","Then, much like the Newton-Raphson method, we find the -intercept of that secant line, find a new point on the graph whose -coordinate corresponds to that intercept, and use the point from the previous iteration to find a new secant line. This process is very intuitively outlined in this video by numericalmethodsguy. The update rule for the secant method can be expressed as We can derive (7) simply by slightly modifying the update rule we saw for Newton-Raphson. Recall that the Newton-Raphson update rule was written as The only modification we need to make to this update rule is to replace  with an approximation using the backward divided difference formula. Here, we make a slight modification to (2), specifically by using values from previous iterations. If we plug (8) back into (4), with some algebraic simplifications, we land on (7), the update rule for the secant method. This is left as an exercise for the reader. Now let’s take a look at how we might be able to implement this numerical method in code. Presented below is the  method, which follows the same general structure as the  function we looked at earlier. The only part that differs is the part where we use backward divided difference, which requires that we look up not only the immediately previous root approximation, but the value prior to that as well. In other words, we need both  and  to calculate  via an iterative update. And here is an obligatory sanity check using our previous example. 2.",0,0,0,0,0,0,1,0
Building Neural Network From Scratch,"Because computing the softmax function require exponentiation, it is likely for the computer to end up with very large numerical quantities, making calculations unstable. One way to solve this problem is by subtracting values from the exponent. As the calculation shows, adding or subtracting the same value from the exponent of both the numerator and the denominator creates no difference for the output of the softmax function. Therefore, we can prevent numbers from getting too large by subtracting some value from the exponent, thus yielding accurate results from stable computation. We can further improve the softmax function for the purposes of this tutorial by supporting batch computation. By batch, I simply mean multiple inputs in the form of arrays. The function shown above is only able to account for a single vector, presumably given as a list or a one-dimensional numpy array. The implementation below uses a loop to calculate the softmax output of each instance in a matrix input, then returns the result. Note that it also prevents arithematic overflow by subtracting the  value of the input array. Let’s test the improved softmax function with a two-dimensional array containing two instances. As expected, the softmax function returns the softmax output applied to each individual instance in the list. Note that the elements of each output instance add up to one, as expected. Another crucial activation function is ReLU, or the rectified linear unit.",1,1,1,0,0,0,0,0
Scikit-learn Pipelines with Titanic,"Checking data types is necessary both for imputation and general data preprocessing. Specifically, we need to pay attention as to whether a given column encodes categorical or numerical variables. For example, we can’t use the mean to impute categorical variables; instead, something like the mode would make much more sense. The best way to determine whether a variable is categorical or not is simply to use domain knowledge and actually observe the data. Of course, one might use hacky methods like the one below: Although you might think that this is a working hack, this approach is in fact highly dangerous, even in this toy example. For example, consider , which is supposedly a numerical variable of type . However, earlier with , we saw that  is in fact a ordinal variable taking discrete values, one of 1.0, 2.0, and 3.0. So hacky methods must not be used in isolation; at the very least, they need to be complemented with some form of human input. Let’s try to use a simple pipeline to deal with missing values in some categorical variables. This is going to be our first sneak peak at how pipelines are declared and used. Here, we have declared a three-step pipeline: an imputer, one-hot encoder, and principal component analysis. How this works is fairly simple: the imputer looks for missing values and fills them according to the strategy specified. There are many strategies to choose from, such as most constant or most frequent.",0,0,0,0,0,1,0,0
k-Nearest Neighbors Algorithm from Scratch,"We can achieve this by building a function as shown below. Passing 100 to the  argument results in a list of accuracy scores. We can go through this list and try to see for which value of  accuracy is maximized. But this is a rather tedious job, and things would get quickly out of control if we were to deal with much larger data sets where the value of  can be set to much larger numbers. Instead, let’s create a visualization to see how accuracy changes with respect to .  The plot shows that accuracy is maximized for many values of , not just 1. Also, we can learn that accuracy does not go beyond the 97 percent we saw earlier, which is a bit of sad news. An interesting insight we can glean, however, is that accuracy seems to drop past some certain thresholds, most notably around 80. One reasonable explanation might be that the model is looking at too many neighbors that it cannot produce a reliable estimate. At any rate, this visualization shows that hyperparameter tuning is an important job of a machine learning engineer—even if the model is great, if the wrong  value is used, the model will only demonstrate lackluster performance. This was perhaps the first post where we dealt with a machine learning algorithm. ML is sometimes treated as a black box, where some magic beneath the hood produces desirable results.",1,0,0,0,0,1,0,0
A Simple Autocomplete Model,"the charm surpose again, in 
swret feathryst, form of kinne of the world bejud–age–implaasoun ever? but that the is any 
appearance has clenge: the? a plexable gen preducl=s than condugebleines and aligh to advirenta-nasure; 
findiminal it as, not take. the ideved towards upavanizing, would be 
thenion, in all pespres: it is of 
a concidenary, which, well founly con-utbacte udwerlly upon mansing–frauble of “arrey been can the pritarnated from their 
christian often–think prestation of mocives.” legt, lenge:–this deps 
telows, plenhance of decessaticrances). hyrk an interlusally” tone–under good haggy,” 
is have we leamness of conschous should it, of 
sicking ummenfeckinal zerturm erienweron of noble of 
himself-clonizing there is conctumendable prefersy 
exaitunia states,” whether 
they deve oves any of hispyssesss. int The results are fascinating. Granted, our model is still bad at immitating Nietzsche’s style of writing, but I think the performance is impressive given that this was a character-based text generation model. Think about it for a second: to write even a single word, say “present,” the model has to correctly predict “p”, “r”, “e”, “s”, “e”, “n”,  and “t,” all in tandem. Imagine doing this for extended cycles, long enough to generate text that is comfortably a paragraph long. It’s amazing how the text it generates even makes some sense at all. Then, as temperature rises, we see more randomness and “creativity” at work.",0,0,1,1,0,0,0,0
On Expectations and Integrals,"In fact, it is possible to calculate the expectation using the Riemann-Stieltjes integral quite easily, despite the discontinuity! The integral we wish to calculate is the following: Therefore, we should immediately start visualizing splitting up the domain of integration, the real number line, into infinitesimal pieces. Each box will be of height  and width . In the context of the contrived example, this definition makes the calculation extremely easy, since   equals zero in all locations but the jumps where the discontinuities occur. In other words, We can easily extend this idea to calculating things like variance or other higher moments. A more realistic example might be the Dirac delta function. Consider a constant random variable (I know it sounds oxymoronic, but the idea is that the random variable takes only one value and that value only). In this case, we can imagine the probability density function as a literal spike in the sense that the PDF will peak at  and be zero otherwise. The cumulative density function will thus exhibit a discontinuous jump from zero to 1 at . And by the same line of logic, it is easy to see that the expected value of this random variable is , as expected. Although this is a rather boring example in that the expectation of a constant is of course the constant itself, it nonetheless demonstrates the potential applications of Riemann-Stieltjes. I hope you enjoyed reading this post. Lately, I have been busy working on some interesting projects.",0,0,0,0,1,0,0,0
Building Neural Network From Scratch,"I was almost about to stop here, but then decided that I wanted to express the neural network model as a Python class. After all, that is how actual machine learning and deep learning libraries are implemented. I also decided that it can’t hurt for me to practice object-oriented thinking. So presented in the next section is a nicer, cleaner implementation of a neural network model based off of the functions we designed above. A simple neural network model in just 56 lines of code, ready to be initialized, trained, deployed, and tested! You will see that much of the code is literally just copy and pasted from the original functions we designed above. But just to make sure that everything works fine, let’s try creating a neural network object and use the  function to see how well our model performs. I chose 99 as the number of neurons in the affine layers for no reason. In this instance, the accuracy of this model is 95 percent, similar to what we had above. At this point, one question that popped up in my mind was the relationship between the number of neurons and the performance of the neural network model. Intuitively, the more neurons there are, the higher the memory capacity of that model, and thus better the performance. Of course, the larger the number of neurons, the larger the risk of overfitting our model, which can also negatively impact the performance of the neural network. This is conventional wisdom in the land of deep learning.",1,1,1,0,0,0,0,0
A sneak peek at Bayesian Inference,"Given that  and  are discrete events, we can break down  as a union of intersections between  and , where  represents subsets within event . In concrete form, we can rewrite this as Additionally, we can rewrite the conditional probability  in terms of  and  according to the definition of conditional probability we observed earlier. Applying these alterations to (4) to rewrite  produces equation (5): This is the equation of Bayes’ theorem. In simple language, Bayes’ theorem tells us that the conditional probability of some subset  given  is equal to its relevant fraction within a weighted summation of the conditional probabilities  given . Although this equation may seem complicated at a glance, we can develop an intuition for this formula by reminding ourselves of the definition of conditional probabilities, as well as the fact that independent events can be expressed as a union of intersections. At the end of the day, Bayes’ theorem provides a powerful tool through which we can calculate a conditional probability in terms of its reverse, i.e. calculate  by utilizing . Why is this important at all? Let’s return back to our example of the potential patient. Recall that the conditional probability of our interest was while the pieces of information we were provided were This is where Bayes’ theorem comes in handy. Notice that we have expressed  in terms of  and .",0,0,0,0,1,0,0,1
Scikit-learn Pipelines with Titanic,"We opt to drop it instead. Correlation (or somewhat equivalently, covariance) is a metric that we always care about, since ultimately the goal of ML engineering is to use a set of input features to generate a prediction. Given this context, we don’t want to feed our model useless information that lacks value; instead, we only want to feed into the model highly correlated, relevant, and informative features. If certain features in the raw data are deemed useless, we need to either drop it or engage in some sort of feature engineering to produce a new set of more correlated features.  From this preliminary analysis, it seems like there are some very weekly correlated features, namely  and . The week correlation suggests that perhaps we need to engage in some feature engineering to extract more meaningful information out of the dataset. Let’s use the findings from the previous section to engineer some more informative features. One popular approach is to make use of names to derive a  feature. Intuitively, this makes sense: Mr. and Mrs, Cpt. and Dr. might be of interest for our model. Another popular approach is to combine the less important features— and —into something like . Implementing these should fairly be simple, so let’s try it here. Note that in an actual setting, there will be no answer to reference; we will have to rely on our own domain knowledge and more extensive EDA to figure out which features matter, and what new features we will need.",0,0,0,0,0,1,0,0
Demystifying Entropy (And More),"where  denotes cross entropy; ,entropy, and the last term, KL divergence. Now, let’s try to understand what each of them means. KL divergence has many interpretations. One possible definition of KL divergence is that it measures the average number of extra information content required to represent a message with distribution  instead of . In Machine Learning: A Probabilistic Perspective, Kevin P. Murphy describes KL divergence as follows: … the KL divergence is the average number of extra bits needed to encode the data, due to the fact that we used distribution  to encode the data instead of the true distribution . Put differently, KL divergence is the amount of information that is lost when  is used to approximate . Therefore, if  and  are close, KL divergence would be low, whereas the converse would be true when the two distributions are different. We can also extend this notion a bit farther to apply it in the context of Bayesian inference. Recall that Bayesian inference is the process by which we start from some prior distribution and update our beliefs about the distribution with more data input to derive a posterior. In this context, KL divergence can be viewed as the amount of information gained as we move from the prior  to the posterior . Let’s derive the mathematical definition of KL divergence using likelihoods. The derivation process to be introduced is based on this source.",0,0,0,0,1,0,0,0
Word2vec from Scratch,"However, the good news is that we have already derived the equation for backpropagation given a softmax layer with cross entropy loss in this post, where we built a neural network from scratch. The conclusion of the lengthy derivation was ultimately that given our model Since we know the error, we can now backpropagate it throughout the entire network, recalling basic principles of matrix calculus. If backprop is still confusing to you due to all the tranposes going on, one pro-tip is to think in terms of dimensions. After all, the dimension of the gradient must equal to the dimension of the original matrix. With that in mind, let’s implement the backpropagation function. To keep a log of the value of the error throughout the backpropagation process, I decided to make the final return value of  to be the cross entropy loss between the prediction and the target labels. The cross entropy loss function can easily be implemented as follows. Now we’re ready to train and test the model! As we only have a small number of training data—coupled with the fact that the backpropagation algorithm is simple batch gradient descent—let’s just iterate for 50 epochs. While training, we will be caching the value of the cross entropy error function in a  list. We can then plot this result to get a better sense of whether the training worked properly.  And indeed it seems like we did well! We can thus say with some degree of confidence that the embedding layer has been trained as well.",1,0,1,0,0,0,0,0
Recommendation Algorithm with SVD,"In today’s post, we dealt primarily with singular value decomposition and its application in the context of recommendation systems. Although the system we built in this post is extremely simple, especially in comparison to the complex models that companies use in real-life situations, nonetheless our exploration of SVD is valuable in that we started from the bare basics to build our own model. What is even more fascinating is that many recommendation systems involve singular value decomposition in one way or another, meaning that our exploration is not detached from the context of reality. Hopefully this post has given you some intuition behind how recommendation systems work and what math is involved in those algorithms. On a tangential note, recently, I have begun to realize that linear algebra as a university subject is very different from linear algebra as a field of applied math. Although I found interest in linear algebra last year when I took the course as a first-year, studying math on my own has endowed me with a more holistic understanding of how the concepts and formulas we learned in linear algebra class can be used in real-life contexts. While I am no expert in pedagogy or teaching methodology, this makes me believe that perhaps linear algebra could be taught better if students were exposed to applications with appropriate data to toy around with. Just a passing thought. Anyhow, that’s enough blogging for today. Catch you up in the next one.",1,1,0,0,0,0,0,0
An Introduction to Markov Chain Monte Carlo,"The objective of Bayesian statistical analysis is to update our beliefs about some probability, known as the posterior, given a preestablished belief, called the prior, and a series of data observations, which might be decomposed into likelihood and evidence. Concretely, This statement is equivalent to where  denotes the likelihood function. In plain language, Bayesian statistics operates on the assumption that all probabilities are reflections of subjective beliefs about the distribution of some random variable. A prior expectation or belief we might have about this distribution is referred to as the prior. Then, we can update our prior belief based on sample observations, resulting in a posterior distribution. Roughly speaking, the posterior can be considered as the “average” between the prior and the observed data. This process, which we went over in detail in this post, is at the heart of Bayesian inference, a powerful tool through which data and distributions can be understood. Theoretically, everything should work fine: given some prior and some sample observation data, we should be able to derive a posterior distribution for the random variable of interest. No big deal. Or so it seems. If we take a look again at equation (3), we will realize that there is an evidence term that we have to calculate sitting in the denominator. The formula for evidence can be expressed as follows: Computing this quantity is not as easy as it may appear.",1,0,0,0,0,0,0,0
Scikit-learn Pipelines with Titanic,"Then, we one-hot encode the categorical variables since most machine learning models cannot accept non-numerical values as input. The last PCA step might seem extraneous. However, as discussed in this Stack Overflow thread, the judicious combination of one-hot plus PCA can seldom be beat by other encoding schemes. PCA finds the linear overlap, so will naturally tend to group similar features into the same feature. I don’t have enough experience to attest to the veracity of this claim, but mathematically or statistically speaking, this proposition seems valid. The idea is that one-hot encoding all categorical variables may very well lead to an unmanageable number of columns, thus causing one to flounder in the curse of dimensionality. A quick fix, then, is to apply PCA or some other dimensionality reduction technique onto the results of one-hot encoding. Back to the implementation, note that we can look inside the individual components of  by simply treating it as an iterable, much like a list or tuple. For example, Next, we need to do something similar for numerical variables. Only this time, we wouldn’t be one-hot encoding the data; instead, what we want to do is to apply some scaling, such as normalization or standardization. Recently in one of Andreas Mueller’s lectures on YouTube, I learned about the , which uses median and IQR instead of mean and standard deviation as does the . This makes the  a superior choice in the presence of outliers. Let’s try using it here.",0,0,0,0,0,1,0,0
An Introduction to Markov Chain Monte Carlo,"Of course, this code is limited in that is only applicable to a very specific situation, namely the task of deriving the posterior given a normal prior and a normal likelihood with known variance. Nevertheless, we can glean so much insight from this fascinating function. Let’s quickly test the  function by making it sample five estimations of the mean parameter. As expected, the sampler starts from the 0, which is the default argument  and took a jump at the second sample. After that jump, the sampler rejects the next three values sampled from the proposal distribution, as it stayed dormant at the value 0.17414333. However, with more iterations, we would expect the function to make more jumps, gradually painting a picture of what the posterior should look like. In fact, we can create what is called the trace plot to see which values were sampled by the Metropolis-Hastings algorithm. Trace plots are important because they tell us whether or not our model is well-calibrated, i.e. a sufficient amount of state changes occur.  The trace plot contains the trace of 15000 accepted values sampled from the proposal distribution. We see that there are some fluctuations, indicating that state transitions occurred, but also that there seems to be values that the sampler preferred over others. Eyeballing the trace plot, the “comfort zone” seems to be slightly above 0, as we expect. To illustrate the importance of trace plots, let’s see an example involving a bad setup involving a proposal distribution with too small a variance.",1,0,0,0,0,0,0,0
A sneak peek at Bayesian Inference,"If we temporarily disregard the constants that show up in (6), we can conveniently trim down the equation for Bayesian inference as follows: This idea is not totally alien to us—indeed, this is precisely the insight we gleaned from the example of the potential patient. This statement is also highly intuitive as well. The posterior probability would be some mix of our initial belief, expressed as a prior, and the data newly presented, the likelihood. Bayesian inference, then, can be understood as a procedure for incorporating prior beliefs with evidence in order to derive an updated posterior. What makes Bayesian inference such a powerful technique is that the derived posterior can themselves be used as a prior for subsequent inference conducted with new data. To see Bayesian inference in action, let’s dive into the most classic, beaten-to-death yet nonetheless useful example in probability and statistics: the coin flip. This example was borrowed from the following post. Assume that we have a coin whose fairness is unknown. To be fair, most coins are approximately fair (no pun intended) given the physics of metallurgy and center of mass, but for now let’s assume that we are ignorant of coin’s fairness, or the lack thereof. By employing Bayesian inference, we can update our beliefs on the fairness of the coin as we accumulate more data through repeated coin flips. For the purposes of this post, we will assume that each coin flip is independent of others, i.e. the coin flips are independent and identically distributed.",0,0,0,0,1,0,0,1
"PyTorch, From Data to Modeling","And here is the result! An overall accuracy of 70 percent is definitely not impressive, and we certainly could have done better by building a deeper model, or by using more complex architectures. However, this isn’t the worst performance considering the fact that we only had three convolutional layers. The more important takeaway from this tutorial is how to prepare data, build models, and train and evaluate them through a custom loop. From the tone and style of my writing, it is perhaps immediately clear to you that I am not officially a PyTorch fanboy. Yes, I will admit that I loved Keras for its simplicity, but after having spent more time learning python and DL, I now much prefer the freedom provided by PyTorch’s reasonably abstract API. I hope this notebook provided you with a nice, simple introduction to PyTorch. In the coming notebooks, we will take a deeper dive into implementing models with PyTorch, starting from RNNs all the way up to classic SOTA vision models like InceptionNet, ResNet, and seq2seq models. I can definitely tell you that these are coming, because, as funny as this sounds, I already have all the notetbooks and code ready; I just have to annotate them. I hope you’ve enjoyed reading this post. Catch you up in the next one!.",0,0,1,0,0,0,0,0
Markov Chain and Chutes and Ladders,"Although we won’t go into the formal proofs here, having a full span of independent eigenvectors implies full rank, which is why we must check if the stochastic matrix is singular before jumping into eigendecomposition. Unfortunately, the stochastic matrix is singular because , the number of columns or rows. This implies that our matrix is degenerate, and that the best alternative to eigendecomposition is the singular value decomposition. But for the sake of simplicity, let’s resort to the brute force calculation method instead and jump straight into some statistical analysis. We first write a simple function that simulates the Chutes and Ladders game given a starting position vector . Because a game starts at the th cell by default, the function includes a default argument on  as shown below: Calling this function will give us , which is a 101-by-1 vector whose th entry represents the probability of the player being on the th cell after a single turn. Now, we can plot the probability distribution of the random variable , which represents the number of turns necessary for a player to end the game. This analysis can be performed by looking at the values of  since the last entry of this vector encodes the probability of the player being at the th cell, i.e. successfully completing the game after  rounds.",0,1,0,0,0,0,0,0
Revisiting Basel with Fourier,"Turns out that under certain conditions, we can exchange the summation and the integral (or, more strictly speaking, the limit and the integral), using things like the dominating convergence theorem of Fubini’s theorem. However, these are topics for another post. For now, we will assume that this trick is legal and continue on. Now we have Now that we have a summation representation of , let’s move onto (11). We use the same trick we used earlier to interchange the summation and the integral. This gives us Since we have to terms with negative ones with the same exponent, we can safely remove both of them: And notice that we now have the Basel problem! If you plug in  and increment  from there, it is immediately apparent that this is the case. So there we have it, the integral representation of the Basel problem! Let’s look at another example, this time using a double integral representation. The motivation behind this approach is simple. This is a useful result, since it means that we can express the Basel problem as an integral of two different variables. Now, all we need is a summation expression before the integration. And now we are basically back to the Basel problem. Note that we can also use the interchange of integral and summation technique again to reexpress (19) as shown below.",0,0,0,0,0,0,1,0
How lucky was I on my shift?,"Nonetheless, we can approximate the distribution of this random variable by considering each ten-minute blocks as a unit for a single trial, i.e. if a call is received by the PMO between 22:00 and 22:10, then the trial is a success; if not, a failure. Blocking eight hours by ten minutes gives us a total of 48 trials. Because we assumed the average number of phone calls on a single shift to be 12, the probability of success . Let’s simulate this experiment  times. We can model this binomial distribution as follows: This code block produces the following output: Under this assumption, we can also calculate how lucky I was yesterday when I only received five calls by plugging in the appropriate values into the binomial PMF function: From a frequentist’s point of view, I would have lazy days like these only 7 times for every thousand days, which is nearly three years! Given that my military service will last only 1.5 years from now, I won’t every have such a lucky day again, at least according to the binomial distribution. But a few glaring problem exists with this mode of analysis. For one, we operated under a rather shaky definition of a trial by arbitrarily segmenting eight hours into ten-minute blocks. If we modify this definition, say, by saying that a single minute comprises an experiment, hence a total of 480 trials, we get a different values for  and , which would clearly impact our calculation of .",0,0,0,0,1,0,0,1
MLE and KL Divergence,"We will revisit JSD in the future when we discuss the mathematics behind GANs. But for now, it suffices to know what KL divergence is and what it measures. Now that we have reviewed the essential concepts that we need, let’s get down to the proof. Let’s start with the statement of the parameter  that minimizes the KL divergence between the two distribution  and the approximate distribution : Not a lot has happened in this step, except for substituting the  expression with its definition as per (2). Observe that in the last derived expression in (4), the term  does not affect the argument of the minima, which is why it can safely be omitted to yield the following simplified expression: We can change the argument of the minima operator to the maxima given the negative sign in the expression for the expected value. To proceed further, it is necessary to resort to the Law of Large Numbers, or LLN for short. The law states that the average of samples obtained from a large number of repeated trials should be close to the expected value of that random variable. In other words, the average will approximate the expected value as more trials are performed. More formally, LLN might be stated in the following fashion. Suppose we perform an experiment involving the random variable  and repeat it  times. Then, we would obtain a set of indecent and identically distributed (i.i.",0,0,0,0,1,0,0,0
Wonders of Monte Carlo,"Notice that there is a 100-step cap, meaning if the drunkard was not able to find the restroom after a hundred steps, the trial was assumed a failure. We can verify the functionality of our design by calling the function. Cool! The Monte Carlo algorithm thus tells us that the probability of success is about 10 percent, which is a lot smaller thant I had personally anticipated. Think about how complicated it would have been to calculate this probability by hand. By simulating this game multiple times and counting the instances of successes, we can derive an estimation of the success rate of our particular random walk model. Let’s see what happens when we simulate the drunkard’s walk thirty times. In the particular instance that I have below, we see that the drunkard successfully reached the rest room four out of thirty attempts, which roughly equals the success probability of ten percent we saw earlier.  By now, hopefully you have been convinced that Monte Carlo is a wonderful method of solving problems. Although the examples we looked at were mostly simple, these algorithms can easily be applied to solve much harder ones. Simply put, Monte Carlo uses a brute force approach to simulate a particular instance of a model multiple times. Through such repeated sampling, we are able to gain a better understanding of the parameters underlying the issue at hand, no matter how complex. This is a pattern that we saw with all three tasks we dealt with in today’s post.",0,0,0,0,1,0,0,0
Riemann Zeta and Prime Numbers,"The other day, I came across an interesting article by Chris Henson on the relationship between the Riemann Zeta function and prime numbers. After encountering a similar post on the math Stack Exchange, I thought I’d write an article on the same topic as well, perhaps as sort of a prologue to a previous article posted on this blog, Basel, Zeta, and some more Euler. The code introduced in this blog are adaptations of those written by Chris Henson, so all credits go to the original author. With that said, let’s dive right into it. The Riemann Zeta function is perhaps one of the most deeply studied functions in all of modern mathematics. It is sometimes also referred to as the Euler-Riemann Zeta function, but I will not adhere to this convention not only because it is needlessly long and cumbersome, but also because Euler already has so many constants and functions and theorems bearing his name. Anyhow, the Riemann Zeta function looks as follows: While there are so many layers to explore with this function, one relatively simple and interesting route is to factorize this function. We performed this factorization in the previous post while introducing Euler’s infinite product representation of the Zeta function. Let’s go through this step again, as it is pivotal for our segue into the topic of prime numbers and probability.",0,0,0,0,0,0,1,0
Understanding the  Leibniz Rule,"As simple as it seems, we can in fact analyze Leibniz’s rule by applying this definition, as shown below: Thus we have shown that, if the limits of integration are constants, we can switch the order of integration and differentiation. But because our quench for knowledge is insatiable, let’s consider the more general case as well: when the limits are not bounded by constant, but rather functions. Specifically, the case we will consider looks as follows. In this case, we see that  and  are each functions of variable . With some thinking, it is not difficult to convince ourselves that this will indeed introduce some complications that require modifications to our original analysis. Now, not only are we slightly moving the graph of  in the  axis, we are also shifting the limits of integration such that there is a horizontal shift of the area box in the  axis. But fear not, let’s apply the same approach to answer this question. This may appear to be a lot of computation, but all we’ve done is just separating out the integrals while paying attention to the domains of integration. Let’s continue by doing the same for the remaining terms. The first two terms in the limit go away since  goes to zero. While the same applies to the fractional terms, one difference is that they are also divided by , which is why they remain. We have simplified quite a bit, but we still have two terms in the limit expression that we’d like to remove.",0,0,0,0,0,0,1,0
An Introduction to Markov Chain Monte Carlo,"We covered the topic of Markov chains on two posts, one on PageRank and the other on the game of chutes and ladders. Nonetheless, some recap would be of help. [Wikepedia] defines Markov chains as follows: A Markov chain is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. In other words, a Markov chain is a method of generating a sequence of random variables where the current value of that random variable probabilistically dpends on its prior value. By recursion, this means that the next value of that random variable only depends on its current state. To put this into context, we used Markovian analysis to assess the probability that a user on the internet would move to one site to another in the context of analyzing Google’s PageRank algorithm. Markov chains also popped up when we dealt with chutes and ladders, since the next position of the player in game only depends on their current position on the game board. These examples all demonstrate the Markov property, also known as memorylessness. Later on, we will see how Markov chains come in handy when we decide to “jump” from one number to the next when sampling from the posterior distribution to derive an approximation of the parameter of interest. We also explored Monte Carlo in some detail here on this blog.",1,0,0,0,0,0,0,0
VGG PyTorch Implementation,"In today’s post, we will be taking a quick look at the VGG model and how to implement one using PyTorch. This is going to be a short post since the VGG architecture itself isn’t too complicated: it’s just a heavily stacked CNN. Nonetheless, I thought it would be an interesting challenge. Full disclosure that I wrote the code after having gone through Aladdin Persson’s wonderful tutorial video. He also has a host of other PyTorch-related vidoes that I found really helpful and informative. Having said that, let’s jump right in. We first import the necessary  modules. Let’s first take a look at what the VGG architecture looks like. Shown below is a table from the VGG paper.  We see that there are a number of different configurations. These configurations typically go by the name of VGG 11, VGG 13, VGG 16, and VGG 19, where the suffix numbers come from the number of layers. Each value of the dictionary below encodes the architecture information for each model. The integer elements represents the out channel of each layer.  represents a max pool layer. You will quickly see that the dictionary is just a simple representation of the tabular information above. Now it’s time to build the class that, given some architecture encoding as shown above, can produce a PyTorch model. The basic idea behind this is that we can make use of iteration to loop through each element of the model architecture in list encoding and stack convolutional layers to form a sub-unit of the network.",0,0,1,0,0,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"Considering the fact that there are a total of  possibilities, the fact that the algorithm was able to narrow it down to a plausible route that beats the baseline is still very interesting. Genetic algorithms belong to a larger group of algorithms known as randomized algorithms. Prior to learning about genetic algorithms, the word “randomized algorithms” seemed more like a mysterious black box. After all, how can an algorithm find an answer to a problem using pseudo-random number generators, for instance? This post was a great opportunity to think more about this naive question through a concrete example. Moreover, it was also interesting to think about the traveling salesman problem, which is a problem that appears so simple and easy, belying the true level of difficulty under the surface. There are many other ways to approach TSP, and genetic algorithms are just one of the many approaches we can take. It is also not the most effective way, as iterating over generations and generations can often take a lot of time. The contrived semi-circle example, for instance, took somewhere around five to ten minutes to fully run on my 13-inch MacBook Pro. Nonetheless, I think it is an interesting way well worth the time and effort spent on implementation. I hope you’ve enjoyed reading this post. Catch you up in the next one!.",1,0,0,0,0,0,0,0
Logistic Regression Model from Scratch,"We see that accuracy spikes up on the first 20- epochs or so and quite quickly converges to about 90 percent. Past a certain threshold, the model seems to hover consistently at around the high 90s range, but accuracy still continues to increase ever so slightly with each epoch, though not as quickly as before. If we set the learning rate  to a smaller number, we would expect the model to take a lot longer to tune, and indeed this seems to be true:  With a much smaller learning rate, the model seems to struggle to achieve high accuracy. However, although there are a lot of uneven spikes, the model still manages to reach a pretty high accuracy score by 200 epochs. This tells us that the success of model training depends a lot on how we set the learning rate; setting an excessively high value for the learning rate might result in overshooting, while a low learning rate might prevent the model from quickly learning from the data and making meaningful progress. Accuracy helps us intuitively understand how well our model is doing, but recall that the main objective of gradient descent is not to maximize accuracy, but to minimize the cross entropy loss function. Therefore, perhaps it makes more sense to evaluate the performance of our logistic regression model by plotting cross entropy. Presented below is a simple function that plots epoch versus cross entropy given a list of learning rates, . Let’s plot cross entropy loss for three different values of : 0.",1,0,0,0,0,1,0,0
A sneak peek at Bayesian Inference,"We can see this in practice by reapplying Bayes’ theorem with updated information, as shown below: We see that the value of the conditional probability has indeed increased, lending credence to the idea that the man is sick. Like this, Like this, Bayes’ theorem is a powerful tool that can be used to calculate conditional probabilities and to update them continuously through repeated trials. From a Bayesian perspective, we begin with some expectation, or prior probability, that an event will occur. We then update this prior probability by computing conditional probabilities with new information obtained for each trial, the result of which yields a posterior probability. This posterior probability can then be used as a new prior probability for subsequent analysis. In this light, Bayesian statistics offers a new way to compute new information and update our beliefs about an event in probabilistic terms. Bayesian inference is nothing more than an extension of Bayes’ theorem. The biggest difference between the two is that Bayesian inference mainly deals with probability distributions instead of point probabilities. The case of the potential patient we analyzed above was a simple yet illuminating example, but it was limiting in that we assumed all parameters to be simple constants, such as  for test accuracy and  for false positive frequency. In reality, most statistical estimates exist as probability distributions since there are limitations to our ability to measure and survey data from the population.",0,0,0,0,1,0,0,1
Convex Combinations and MAP,"Recall the formula for the univariate Gaussian that describes our data: Then, from (1), we know that the likelihood function is simply going to be a product of the univariate Gaussian distribution. More specifically, the log likelihood is going to be the sum of the logs of the Gaussian probability distribution function. There is the log likelihood function! All we need now is the log prior. Recall that the prior is a normal distribution centered around mean  with standard deviation of 1. In PDF terms, this translates to The log prior can simply be derived by casting the logarithmic function to the probability distribution function. Now we are ready to enter the maximization step of the sequence. To calculate the maximum of the posterior distribution, we need to derive the posterior and set the gradient equal to zero. For a more robust analysis, it would be required to show that the second derivative is smaller than 0, which is indeed true in this case. However, for the sake of simplicity of demonstration, we skip that process and move directly to calculating the gradient. Let’s rearrange the final equality in (7). From (8), we can finally derive an expression for . This value of the parameter is one that which maximizes the posterior distribution.",0,0,0,0,1,0,0,0
k-Nearest Neighbors Algorithm from Scratch,"First, we enumerate thorugh the data set to calculate all the distances between the given test instance and the data points in the data set. Next, we sort the list. The returned result is a list that contains the indices of the  nearest neighbors the algorithm found in the data set. Note that we use the  function we wrote above. Let’s see if the code works by testing it on our toy data. The task is to find 5 data points that are closest to the first row of . As expected, the returned list contains the indices of the data points in  that are closest to . We can confirm this by looking at the results of the distance calculation we obtained when testing the  function. Note that the indices are in order; that is, indice 0 corresponds to the closet neighbor—it is in fact that data point itself—and index 2 refers to the farthest neighbor among the  selections. Say we have successfully obtained the list of  nearest neighbors. Now what? Well, it’s time to look up the labels of these neighboring data points to see which class is the most prevalent. The KNN model will then conclude that the most prevalent class label is the one that which the data point belongs to.",1,0,0,0,0,1,0,0
MLE and KL Divergence,"d, which is the assumption that we make to build models such as naïve Bayes, and so on. For now, it suffices to clarify that the goal of maximum likelihood estimation is to find the optimal parameter of a distribution that best captures some given data. KL divergence is a concept that arises from the field of information theory that is also heavily applied in statistics and machine learning. KL divergence is particularly useful because it can be used to measure the dissimilarity between to probability distributions. The familiar equation for KL divergence goes as follows: In Bayesian terms, KL divergence might be used to compare the prior and the posterior distribution, where  represents the posterior and , the prior. In machine learning,  is often the true distribution which we seek to model, and  is the approximation of that true distribution, which is also the prediction generated by the model. Note that KL divergence is not a true measure of distance, since it is asymmetric. In other words, The focus of this post is obviously not on distance metrics, and I plan on writing a separate post devoted to this topic. But as a preview of what is to come, here is an appetizer to get you interested. An alternative to KL divergence that satisfies the condition of symmetry is the Jensen-Shannon Divergence, which is defined as follows: where One can intuit JSD as being a measurement that somewhat averages the two asymmetric quantities of KL divergence.",0,0,0,0,1,0,0,0
A sneak peek at Bayesian Inference,"a head-biased coin; a larger , a tail-oriented one. When  and  take the same value, the local extrema of the Beta distribution is established at , when the coin is perfectly fair. Now that we have established the usability of the Beta function as a conjugate prior to the binomial likelihood function, let’s finally see Bayesian inference at work. Recall the simplified version of Bayes’ theorem for inference, given as follows: For the prior and the likelihood, we can now plug in the equations corresponding to each distribution to generate a new posterior. Notice that , which stands for data, is now given in the form  where  denotes the number of heads; , the total number of coin flips. Notice also that constants, such as the combinatorial expression or the reciprocal of the Beta function, can be dropped since we are only establishing a proportional relationship between the left and right hand sides. Further simplifications can be applied: But notice that this expression for the posterior can be encapsulated as a Beta distribution since Therefore, we started from a prior of  to end up with a posterior of . This is an incredibly powerful mechanism of updating our beliefs based on presented data. This process also proves that, as purported earlier, the Beta distribution is indeed a conjugate prior of a binomial likelihood function. Now, it’s time to put our theory to the test with concrete numbers. Suppose we start our experiment with completely no expectation as to the fairness of the coin.",0,0,0,0,1,0,0,1
Likelihood and Probability,"This code block creates two distributions of different parameters,  and . Then, we assume that a sample of value 1 is observed. Then, we can compare the likelihood of the two parameters given this data by comparing the probability density of the data for each of the two distributions. In this case,  seems more likely, i.e. it better explains the data  since , which is larger than . To sum up, likelihood is something that we can say about a distribution, specifically the parameter of the distribution. On the other hand, probabilities are quantities that we ascribe to individual data. Although these two concepts are easy to conflate, and indeed there exists an important relationship between them explained by Bayes’ theorem, yet they should not be conflated in the world of mathematics. At the end of the day, both of them provide interesting ways to analyze the organic relationship between data and distributions. Maximum likelihood estimation, or MLE in short, is an important technique used in many subfields of statistics, most notably Bayesian statistics. As the name suggests, the goal of maximum likelihood estimation is to find the parameters of a distribution that maximizes the probability of observing some given data . In other words, we want to find the optimal way to fit a distribution to the data. As our intuition suggests, MLE quickly reduces into an optimization problem, the solution of which can be obtained through various means, such as Newton’s method or gradient descent.",0,0,0,0,1,0,0,0
Revisiting Basel with Fourier,"In the last post, we revisited the Riemann Zeta function, which we had briefly introduced in another previous post on Euler’s take on the famous Basel problem. It seems like math is my jam nowadays, so I decided to write another post on this topic—but this time, with some slightly different takes. In this post, we will explore an alternative way of solving the Basel problem using Fourier series expansion, and also discuss a alternative representations of the Basel problem in integral form. For the integral representations, I’m directly referencing Flammable Maths, a YouTube channel that I found both entertaining and informative. Let’s get started. First, let’s recall what the Basel problem is. The problem is quite simple: the goal is to obtain the value of an infinite series, namely This seems like an innocuous, straightforward problem. One can easily prove, for instance, the fact that this series converges using integral approximation. However, to obtain the value of this series is a lot more difficult than it appears—it is no coincidence that this problem remained unsolved for years until Euler came along. While there are many ways to solve this problem—Euler’s method, in particular, is one of the countless examples through which one can witness his amazing intuition and heuristic—but we will be using Fourier expansion to solve this problem, as it also provides a nice segue into the Dirichlet Eta function. We explored the topic of Fourier expansion in this previous post.",0,0,0,0,0,0,1,0
Building Neural Network From Scratch,"We don’t have to worry about the dimensionality of the bias since  supports broadcasting by default. Presented below is a visualization of our neural network, created using NN-SVG. Instead of cluttering the diagram by attempting to visualize all 64 neurons, I decided to simplify the picture by assuming that we have 16 neurons in each of the affine layers. But with the power of imagination, I’m sure it’s not so much difficult to see how the picture would change with 64 neurons.  Hopefully the visualization gave you a better understanding of what our model looks like. Now that we have a function that creates our model, we are ready to run the model! At this point, our neural network model is only a dictionary that contains matrices of specified sizes, each containing randomly genereated numbers. You might be wondering how a dictionary can be considered a model—after all, a dictionary is merely a data structure, and so is incapable of performing any operations. To make our model to work, therefore, we need a function that performs matrix multiplications and applies activation functions based on the dictionary. The  function is precisely such a function that uses the weights stored in our model to return both the intermediary and final outputs, denoted as  and  respectively.  Note that we apply activation functions, such as  and  when appropriate. This process of deriving an output from an input using a neural network is known as forward propagation.",1,1,1,0,0,0,0,0
Introduction to tf-idf,"In this process, we will also convert all documents to lower case as well. Note that  works on each documents, not the entire collection. Let’s try calling the function with the first document in our dummy example. Finally, as part of the preprocessing step, let’s build the corpus. The corpus simply refers to the entire set of words in the dataset. Specifically for our purposes, the corpus will be a dictionary whose keys are the words and values are an ordinal index. Another way to think about the corpus in this context is to consider it as a word-to-index mapping. We will be using the indices to represent each word in the tf, idf, and tf-idf vectors later on in the tutorial. Because we have a very simple example, our corpus only contains 9 words. This also means that our tf-idf vectors for each document will also be a list of length 9. Thus it isn’t difficult to see how tf-idf vectorization can result in extremely high-dimensional matrices, which is why we often apply techniques such as lemmatization or PCA on the final result. Also note that published modules use sparse representations to minimize computational load, as we will later see with scikit-learn. Now it’s time to implement the first step: calculating term frequency. In Python, this simply amounts to looping through each document, creating a tf vector per iteration, and making sure that they are normalized as frequencies at the very end.",1,0,0,0,0,0,0,0
MLE and KL Divergence,"These days, I’ve been spending some time trying to read published research papers on neural networks to gain a more solid understanding of the math behind deep learning. This is a rewarding yet also a very challenging endeavor, mostly because I have not studied enough math to really understand all of what is going on. While reading the groundbreaking research paper Wasserstein GAN by Martin Arjovsky, I came across this phrase: … asymptotically, maximum likelihood estimation amounts to minimizing the Kullback-Leibler divergence… I was particularly interested in the last portion of this sentence, that MLE amounts to minimizing KL divergence. We discussed MLE multiple time on this blog, including this introductory post and a related post on MAP. Neither is KL divergence an entirely unfamiliar topic. However, I had not thought about these two concepts together in one setting. In this post, let’s try to hash out what the quote from the paper means. Let’s start with a very quick review of what MLE and KL divergence each are. After all, it’s been a while since I’ve written the linked posts, and for a fruitful, substantive discussion on this topic, it’s necessary to make sure that we have a solid grasp of what MLE and KL divergence are. MLE is a technique used to find the optimal parameter of a distribution that best describes a set of data. To cut to the chase, this statement can be expressed as follows: From here, we can start making assumptions, such as that observations in  are i.i.",0,0,0,0,1,0,0,0
PyTorch RNN from Scratch,"For easier training and learning, I decided to use  to initialize these hidden states. We can now build our model and start training it. I realized that training this model is very unstable, and as you can see the loss jumps up and down quite a bit. Nonetheless, I didn’t want to cook my 13-inch MacBook Pro so I decided to stop at two epochs. Now we can test our model. We could look at other metrics, but accuracy is by far the simplest, so let’s go with that. The model records a 72 percent accuracy rate. This is very bad, but given how simple the models is and the fact that we only trained the model for two epochs, we can lay back and indulge in momentary happiness knowing that the simple RNN model was at least able to learn something. Let’s see how well our model does with some concrete examples. Below is a function that accepts a string as input and outputs a decoded prediction. I don’t know if any of these names were actually in the training or testing set; these are just some random names I came up with that I thought would be pretty reasonable. And voila, the results are promising. The model seems to have classified all the names into correct categories! This is cool and all, and I could probably stop here, but I wanted to see how this custom model fares in comparison to, say, a model using PyTorch layers.",1,0,1,0,0,0,0,0
BLEU from scratch,"Recently, I joined the Language, Information, and Learning at Yale lab, led by Professor Dragomir Radev. Although I’m still in what I would consider to be the incipient stages of ML/DL/NLP studies—meaning it will take time for me to be able to actively participate in an contribute to research and publications—I think it will be a great learning experience from which I can glean valuable insight into what research at Yale looks like. One of the first projects I was introduced to at the lab is domain-independent table summarization. As the name implies, the goal is to train a model such that it can extract some meaningful insight from the table and produce a human-readable summary. Members are the lab seem to be making great progress in this project, and I’m excited to see where it will go. In the meantime, I decided to write a short post on BLEU, a metric that I came across while reading some of the survey papers related to this topic. Let’s dive into it. Before going into code and equations, a high-level overview of what BLEU is might be helpful here. BLEU, which stands for Bilingual Evaluation Understudy, is an metric that was introduced to quantitatively evaluate the quality of machine translations. The motivation is clear: as humans, we are able to get an intuitive sense of whether or not a given translation is accurate and of high quality; however, it is difficult to translate this arbitrary linguistic intuition to train NLP models to produce better translations.",1,0,1,0,0,0,0,0
Convex Combinations and MAP,"In a previous post, we briefly explored the notion of maximum a posteriori and how it relates to maximum likelihood estimation. Specifically, we derived a generic formula for MAP and explored how it compares to that for MLE. Today’s post is going to be an interesting sequel to that story: by performing MAP on the univariate Gaussian, we will show how MAP can be interpreted as a convex combination, thus motivating a more intuitive understanding of what MAP actually entails under the hood. Let’s jump right into it. The univariate Gaussian is a good example to work with because it is simple and intuitive yet also complex enough for meaningful analysis. After all, it is one of the most widely used probability distributions and also one that models many natural phenomena. With that justification firmly in mind, let’s take a look at the setup of the MAP of the  mean for the univariate Gaussian. As always, we begin with some dataset of  independent observations. In this case, because we are dealing with the univariate Gaussian, each observations will simply be a scalar instead of a vector. In other words, Let’s assume that the random variable is normally distributed according to some parameter . We will assume that the standard deviation of the random variable is given as . We could have considered standard deviation to be a parameter, but since the goal of this demonstration is to conduct MAP estimation on the mean of the univariate Gaussian, we assume that the standard deviation is known.",0,0,0,0,1,0,0,0
Gaussian Mixture Models,"Therefore, it would be convenient to be able to come up with some expression for the marginal distribution. We can come up with a simple expression using the law of total probability and marginalization. where  can take values between 1 and . Notice that we can thus simplify , as this is simply the categorical distribution for the mixing coefficients. In other words, We can also simplify the condition probability expression, since we already know that it follows a normal distribution. Therefore, we end up with And there we have it, the density function of the Gaussian mixture model! We have a convex combination of  different Gaussian PDFs that compose the Gaussian mixture model. In the context of machine learning, the goal is to find the parameters of the model that best describe some given set of data. In the case of GMMs, this is no different. The parameters that we have to estimate are Of course,  and  are not single vectors or matrices, but  collection of such objects. But for notational simplicity, I opted to write them as such as shown above. Given a collection of  data points, denoted as , we can now come up with the following expression:  denotes the likelihood function, and  is a collection of all parameters that define the mixture model.",0,0,0,0,1,1,0,0
"Beta, Bayes, and Multi-armed Bandits","Simply put, regret refers to the amount that we have comparatively lost by making a sub-optimal choice from the get go. Here is a visual diagram I came across on Analytics Vidhya.  The maximum reward would obviously be achieved if we pull on the slot machine with the highest success parameter from trial 1. However, this does not happen since the gambler dives into the game without this prior knowledge. Hence, they have to learn what the optimal choice is through exploration and exploitation. It is of course in this learning process that the greedy algorithm or Bayesian analysis with Thompson sampling comes into play. The amount that we have theoretically lost—or, in other words, the extent to which we are far away from the maximum amount we could have earned—is denoted as regret. Thus, to maximize reward is to minimize regret, and vice versa. Now let’s simulate a hundred pulls on the lever using Bayesian analysis using the Beta-Binomial model and Thompson sampling. Nothing much fancy here, all we’re doing is Thompson sampling from the Beta distribution via , then obtaining the index of the bandit with the highest parameter, then pulling the machine that corresponds to that index. We will also keep cumulative track of our results to reproduce the regret diagram shown above. And we’re done with the hundred round of simulations! Hopefully our simulator gambler has made some good choices by following Bayesian update principles, with the Beta-Binomial model and Thompson sampling under their belt.",0,0,0,0,1,0,0,1
A Simple Autocomplete Model,"To put this into perspective, let’s compare the objectives of a generative model with that of a discriminative model. Simply put, the goal of a discriminative model is to model and calculate where  is a label and  is some input vector. As you can see, discriminative models arise most commonly from the context of supervised machine learning, such as regression or classification. In contrast, the goal of a generative model is to approximate the distribution which we might construe to be the probability of observing evidence or data. By modeling this distribution, the goal is that we might be able to generate samples that appear to have been sampled from this distribution. In other words, we want our model to generate likely data points based on an approximation of the true distribution from which these observations came from. In the context of this tutorial, our neural network  should be able to somewhat immitate the speech of the famous German philosopher based on the training it went through with text data, although we would not expect the content generated by our neural network to have the same level of depth and profoundity as those of his original writings. As mentioned above, the objective of a generative model is to model the distribution of the latent space from which observed data points came from. At this point, our trained model should be able to model this distribution, and thus generate predictions given some input vector.",0,0,1,1,0,0,0,0
Convolutional Neural Network with Keras,"The  function loads the CIFAR10 data set from  module, then applies some basic preprocessing to make it more usable for deep learning purposes. The CIFAR10 data set contains 50000 training images, each labeled with 1 of 10 classes, ranging from cats, horses, and trucks to airplanes. This is a classic classification task. The preprocessing occurs on two levels: first, the images are normalized so that its pixels takes values between 0 and 1. The training labels are transformed from an integer class label to a one-hot encoded vector. Let’s load the data to proceed with our analysis. Let’s see what the dimensions of the data are. Because the CIFAR10 data set include color images for its training set, we would expect three channels, each corresponding to red, green, and blue (hence RGB). As expected, it appears that the training data is a tensor of four dimensions, while the target labels are 10 dimensional vectors. To get a better idea of what the CIFAR10 data looks like, here is a basic function that will display the images in the data set for us using . We can see that, although the images are very pixelated, it is somewhat possible to make out what each image is showing. Of course, this task is going to be a lot more difficult for our neural network.  Now is finally the time to buid the neural network.",0,0,1,1,0,0,0,0
The Exponential Family,"Therefore, starting again from (19), we can continue our calculation of the gradient and set the quantity equal to zero to calculate the MLE estimate of the parameter. It then follows that How do we interpret the final result in equation (25)? It looks nice, simple, and concise, but what does it mean to say that the expected value of the sufficient statistic is the average of the sufficient statistic for each observed individual data points? To remove  abstractness, let’s employ a simple example, the exponential distribution, and attempt to derive a clearer understanding of the final picture. Recall that the probability density function of the exponential distribution takes the following form according to the factorizations outlined below: Computing the derivative of the log of the normalizing term  as we did in (22), Because we know that the resulting quantity is the expected value of the sufficient statistic, we know that And indeed, this is true: the expected value of the random variable characterized by an exponential distribution is simply the inverse of the parameter defining that distribution. Note that the parameter for the exponential distribution is most often denoted as , in which case the expected value of the distribution would simply be written as . This is all great, but there is still an unanswered question lingering in the air: what is the MLE estimate of the parameter  ? This moment is precisely when equation (25) comes in handy.",0,0,0,0,1,0,0,1
An Introduction to Markov Chain Monte Carlo,"For those of you who haven’t already, I highly recommend reading the post, as we developed a good intuition of when Monte Carlo simulations can come in handy to deal with tasks of varying difficulty. To cut to the chase, Monte Carlo methods are used to solve intractable problems, or problems that require expensive computing. Instead of systematically deriving a closed-forrm solution, we can alternatively opt for a scheme of random sampling and hope that, with a sufficient sample size, we would eventually be able to derive an approximation of the parameter. Although this seems stupid at first, it is an incredibly powerful approach to solving many problems, including the one presented here involving posterior calculation in Bayesian inference. The [Metropolis-Hastings algorithm] is one of the first Markov Chain Monte Carlo model that was developed in the late 20th century to simulate particle movement. More advanced MCMC models have been introduced since; however, the Metrapolis-Hastings algorithm still deserves our attention as it demonstrates the basis of how many Markov Chain Monte Carlo models operate. Let’s get into the details of the model. At the heart of Metrapolis-Hastings is the proposal distribution, which we use to simulate the Markov chain random walk part of the model. Setting the parameters for this proposal distribution can be done arbitrarily, i.e. we can set it to be any random numbers. Theoretically, regardless of the parameters of the proposal distribution, the MCMC model would give us the same result after infinite iterations of sampling.",1,0,0,0,0,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"The traveling salesman problem (TSP) is a famous problem in computer science. The problem might be summarized as follows: imagine you are a salesperson who needs to visit some number of cities. Because you want to minimize costs spent on traveling (or maybe you’re just lazy like I am), you want to find out the most efficient route, one that will require the least amount of traveling. You are given a coordinate of the cities to visit on a map. How can you find the optimal route? The most obvious solution would be the brute force method, where you consider all the different possibilities, calculate the estimated distance for each, and choose the one that is the shortest path. While this is a definite way to solve TSP, the issue with this approach is that it requires a lot of compute—the runtime of this brute force algorithm would be , which is just utterly terrible. In this post, we will consider a more interesting way to approach TSP: genetic algorithms. As the name implies, genetic algorithms somewhat simulate an evolutionary process, in which the principle of the survival of the fittest ensures that only the best genes will have survived after some iteration of evolutionary cycles across a number of generations. Genetic algorithms can be considered as a sort of randomized algorithm where we use random sampling to ensure that we probe the entire search space while trying to find the optimal solution.",1,0,0,0,0,0,0,0
Wonders of Monte Carlo,"For each walk, function will generate a random number to determine the direrction of his movement. The magnitude of each walk is 1 by default. Beforer a walk is performed, we will invoke another function to check if his movements are legal, i.e. whether he stepped out of the boundary of the pub. If his moves are legal, we continue with the movement; if not, we stop and assume that the trial has yielded a failure. The goal of this random walk is to end up in the top-right portion of the pub, a square defined by coordinates , and . Now that we have established the basics of this game, let’s start coding away. Our little random walk simulator is now ready to go! Let’s perform a quick sanity check to see if the code works as expected. We see that the returned tuple contains the flag boolean value as well as a list containing the coordinates of the first ten steps the drunkard took in this experiment, which is exactly what we expected. Now it is time to put this Monte Carlo application to the test by simulating the walk many times and counting the instances of successes verses failures. The  function calls the  function as many times specified by . The function compiles all the results to return two pieces of information: the percentage of success, represented in decimals, and the average number of steps it took for the drunkard to reach the restroom.",0,0,0,0,1,0,0,0
Riemann Zeta and Prime Numbers,"Also, for easier plotting, we will return the  domain range object alongside the result of our simulation. The function is just a two-liner—we were able to reduce the number of lines thanks to list comprehension. Now, let’s see if this code works as expected. Here, our experiment consisted of sampling two numbers, starting from range , all the way up to range , with 1000 simulations for each range. Let’s plot the results to get a better idea of what was going on.  First, notice that when , the probability that two sampled numbers are coprime is 1. This is unsurprising, since sampling from range  simply means that both the sampled numbers were 2—and of course, 2 and 2 are coprimes. However, as the range expands all the way up to 200, we see that the probability of two numbers being coprime drops precipitously, roughly converging to the value of  as we expect. Indeed, the dots seem to cluster around the gold line, which represents the value of the Zeta function evaluated at 2. But does this result generalize to cases where we sample more than just two numbers? In other words, if we sample  numbers, would the probability that the numbers be coprime approach ? Let’s find out. Given a range of  values, the  function returns a plot for each , which is effectively  in our mathematical notation. We see that, for the three values of  that were tested—2, 3, and 4—the Zeta function seems to approximate the probability of relative primeness pretty well.",0,0,0,0,0,0,1,0
A Step Up with  Variational Autoencoders,"Normally, defining a loss function is very easy: in most cases, we  use pre-made loss functions that are available through the TensorFlow API, such as cross entropy or mean squared error. In the case of variational autoencoders, however, this is not such an easy task: how do we judge the robustness or the effectiveness of the decoder, which is essentially a generative algorithm? Of course, we could stop training once the figures it generates becomes reasonable, i.e. the mock MNIST digits it creates looks compelling to the human eye. However, this is a subjective metric at best, and we can’t expect there to be a ML engineer peering at the screen, looking at the outputs of the decoder per each epoch. To tackle this challenge, we need to dive into some math. Let’s take a look. First, let’s carefully review what our goal is for this task. The motivating idea behind variational autoencoders is that we want to model a specific distribution, namely the distribution of the latent space given some input. As you recall, this latent space is a two dimensional vector modeled as a multivariate diagonal Gaussian. Using Bayes’ theorem, we can express this distribution as follows: By now, it is pretty clear what the problem its: the evidence sitting in the denominator is intractable. Therefore, we cannot directly calculate or derive  in its closed form; hence the need for variational inference. The best we can do is to find a distribution  that best approximates .",0,0,1,1,0,0,0,0
Bayesian Linear Regression,"In today’s post, we will take a look at Bayesian linear regression. Both Bayes and linear regression should be familiar names, as we have dealt with these two topics on this blog before. The Bayesian linear regression method is a type of linear regression approach that borrows heavily from Bayesian principles. The biggest difference between what we might call the vanilla linear regression method and the Bayesian approach is that the latter provides a probability distribution instead of a point estimate. In other words, it allows us to reflect uncertainty in our estimate, which is an additional dimension of information that can be useful in many situations. By now, hopefully you are fully convinced that Bayesian linear regression is worthy of our intellectual exploration. Let’s take a deep dive into Bayesian linear regression, then see how it works out in code using the  library. In this section, we will derive the formula for Bayesian linear regression step-by-step. If you are feeling rusty on linear algebra or Bayesian analysis, I recommend that you go take a quick review of these concepts before proceeding. Note that I borrowed heavily from this video for reference. For any regression problem, we first need a data set. Let  denote this pre-provided data set, containing  entries where each entry contains an -dimensional vector and a corresponding scalar. Concretely, where The goal of Bayesian linear regression is to find the predictive posterior distribution for . This is where the difference between Bayesian linear regression and the normal equation method becomes most apparent.",0,1,0,0,0,0,0,0
Building Neural Network From Scratch,"In that context, a class label of 2 is not at all related to adding two data points belonging to class 1, or any arithmatic operation of that kind. To prevent our model from making such arbitrary, unhelpful connections, we convert class labels to one-hot encoded vectors. We could use external libraries such as  to invoke the  function, but instead let’s just build a function ourselves since this is a relatively simple task. Let’s test the  function on the training data. We don’t need the entire data to see that it works, so let’s slice the  array to see its first five elements. When we apply  to the data, we see that the returned result is a two-dimensional array containing one-hot encoded vectors, as intended. That’s all the data and the preprocessing we will need for now. Activation functions are important aspects of neural networks. In fact, it is what allows neural networks to model nonlinearities in data. As we will see in the next section, a neural network is essentially composed of layers and weights that can be expressed as matrix multiplications. No matter how complex a matrix may be, matrix multiplication is a linear operation, which means that is impossible to model nonlinearities. This is where activation functions kick in: by applying nonlinear transformation to layer outputs, we can make neural networks capable of modeling nonlinearities.",1,1,1,0,0,0,0,0
"Linear Regression, in Two Ways","If there is one thing I recall most succinctly from my high school chemistry class, it is how to use Excel to draw basic plots. In the eyes of a naive freshman, visualizations seemed to add an air of professionalism. So I would always include a graph of some sort in my lab report, even when I knew they were superfluous. The final icing on the cake? A fancy regression with some r-squared. In today’s post, I want to revisit what used to be my favorite tinkering toy in Excel: regression. More specifically, we’ll take a look at linear regression, which deals with straight lines and planes instead of curved surfaces. Although it sounds simple, the linear regression model is still widely used because it not only provides a clearer picture of obtained data, but can also be used to make predictions based on previous observations. Linear regression is also incredibly simple to implement using existing libraries in programming languages such as Python, as we will later see in today’s post. That was a long prologue—–let’s jump right in. In this section, we will attempt to frame regression in linear algebra terms and use basic matrix operations to derive an equation for the line of best fit. In this section, we will use linear algebra to understand regression. An important theme in linear algebra is orthogonality. How do we determine if two vectors—or more generally, two subspaces—are orthogonal to each other? How do we make two non-orthogonal vectors orthogonal? (Hence Gram-Schmidt.",0,1,0,0,0,0,0,0
Maximum A Posteriori Estimation,"More generally, maximum likelihood estimation can be expressed as: It is not difficult to see why trying to compute this quantity may not be as easy as it seems: because we are dealing with probabilities, which are by definition smaller than 1, their product will quickly diverge to 0, which might cause arithmetic underflow. Therefore, we typically use log likelihoods instead. Maximizing the log likelihood amounts to maximizing the likelihood function since log is a monotonically increasing function. Finding the maximum could be achieved multiple ways, such as through derivation or gradient descent. As the name suggests, maximum a posteriori is an optimization method that seeks to maximize the posterior distribution in a Bayesian context, which we dealt with in this post. Recall the Bayesian analysis commences from a number of components, namely the prior, likelihood, evidence, and posterior. Concretely, The objective of Bayesian inference is to estimate the posterior distribution, whose probability distribution is often intractable, by computing the product of likelihood and the prior. This process could be repeated multiple times as more data flows in, which is how posterior update can be performed. We saw this mechanism in action with the example of a coin flip, given a binomial likelihood function and a beta prior, which are conjugate distribution pairs. Then what does maximizing the posterior mean in the context of MAP? With some thinking, we can convince ourselves that maximizing the posterior distribution amounts to finding the optimal parameters of a distribution that best describe the given data set.",0,0,0,0,1,0,0,0
A Step Up with  Variational Autoencoders,"Namely, Because  is an approximation of , we naturally assume the same model for the approximate distribution: Now we can derive an expression for the negative KL divergence sitting in the ELBO expression: This may seem like a lot, but it’s really just plugging in the distributions into the definition of KL divergence as an expectation and using some convenient properties of logarithms to perform simple algebraic simplifications. To proceed further, observe that the first term is a constant that can escape out of the expectation: From the definition of variance and expectation, we know that Therefore, we can simplify (17) as follows: Let’s zoom in on the expected value term in (19). Our goal is to use (18) again so that we can flesh out another one half from that term. This can be achieved through some clever algebraic manipulation: But since the the expected value of  is constant and that of  is zero, We can now plug this simplified expression back into the calculation of KL divergence, in (19): Since we will standardize our input such that  and , we can plug these quantities into (22) and show that We are almost done with deriving the expression for ELBO.",0,0,1,1,0,0,0,0
Gaussian Mixture Models,"In other words, All this is doing is that we are using the marginal distribution expression we derived earlier and applying that to a situation in which we have  data points instead of just one, which is the context we have been operating in so far. We multiply the probabilities given the assumption of independence. From the perspective of maximum likelihood estimation, the goal then would be to maximize this likelihood to find the optimal parameters for  and . Before we attempt MLE with the likelihood function, let’s first try to calculate the log likelihood, as this often makes MLE much easier by decoupling products as summations. Let . And now we see a problem: the log is not applied to the inside of the function due to the summation. This is bad news since deriving this expression by  will become very tedious. The result is for sure not going to look pretty, let’s try deriving the log likelihood by  and set it equal to zero. At least one good news is that, for now, we can safely ignore the outer summation given the linearity of derivatives. We ultimately end up with the expression below: This is not pretty at all, and it seems extremely difficult, if not impossible, to solve analytically for . This is why we can’t approach MLE the way we usually do, by directly calculating derivatives and setting them equal to zero. This is where Expectation Maximization, or EM algorithm comes in.",0,0,0,0,1,1,0,0
Recommendation Algorithm with SVD,"I’ve been using a music streaming service for the past few weeks, and it’s been a great experience so far. I usually listen to some smoothing new age piano or jazz while I’m working, while I prefer K-pop on my daily commutes and bass-heavy house music during my workouts. Having processed these information through repeated user input on my part, the streaming application now regularly generates playlists each reflective of the three different genres of music that I enjoy most. This got me wondering: what is the underlying algorithm beind content selection and recommendation? How do prominent streaming services such as Netflix and Spotify provide recommendations to their users that seem to reflect their personal preferences and tastes? From a business perspective, these questions carry extreme significance since the accuracy of a recommendation algorithm may directly impact sales revenue. In this post, we will dive into this question by developing an elementary recommendation engine. The mechanism we will use to achieve this objective is a technique in linear algebra known as singular value decomposition or SVD for short. SVD is an incredibly powerful way of processing data, and also ties in with other important techniques in applied statistics such as principal component analysis, which we might also take a look at in a future post. Enough with the preface, let’s dive right into developing our model. Before we start coding away, let’s first try to understand what singular value decomposition is.",1,1,0,0,0,0,0,0
Riemann Zeta and Prime Numbers,"The idea is that, much like we multiply the ratio to a geometric sequence to calculate its sum, we can multiply terms to the Zeta function to factor out their multiples. For instance, let’s consider the case when we multiply  to the Zeta function. Since the Zeta function itself is an infinite series, we can subtract this result from the original Zeta function. This effectively filters or sieves out all terms whose denominator is a multiple of 2, effectively leaving only the odd terms. Concretely, If we repeat this process for all prime numbers, we will eventually be left with the following: where  denotes the set of all prime numbers. From this, we can come up with the following alternative representation of the Riemann Zeta function: which can also be expressed as Other than the fact that the factorization of the Riemann Zeta function is satisfying in and of itself, the result in (5) also provides us with an interesting probabilistic interpretation on coprimeness. The intuition is pretty simple: given some random natural number , the probability that a prime  will divide  is simply . For example, if we come up with some random number, the probability that 2 will divide that number (that the number is even) is 0.5; the probability that the number will be a multiple of 3 is one-thirds.",0,0,0,0,0,0,1,0
k-Nearest Neighbors Algorithm from Scratch,"In other words, it contains 4 feature columns—the width and length of sepals and petals, as mentioned earlier—and 30 observation of iris plants. We can now use the KNN model we have built to make predictions about these thirty samples. The choice of parameter  as 10 was arbitrary. That was very simple. The returned numpy array contains the class labels for each of the thirty observations in the  matrix. In other words, the first test data was predicted to belong to class 1; second data, class 0, third data, class 1, and so on. Let’s compare this predicted result with the actual labels. For the most part, it seems like our predicted result is quite similar to the actual labels. But there are some samples that our KNN algorithm missed, such as the 27th data point: although its actual label is 2, our model predicted it to be 1. We can mathematically calculate the accuracy of our model by using the following function. The job of this function is quite simple: it goes through the two lists, element by element, and checks if the two values are identical. See the implementation below. The accuracy of our prediction turns out to be about 97 percent. But can we do better? Recall that we arbitrarily chose  to be 10 when we initialized the KNN algorithm. Would accuracy increase if we set the parameter to another number? Let’s try to answer this question by generating a list of accuracy scores for each value of  ranging from 1 to 100.",1,0,0,0,0,1,0,0
"0.5!: Gamma Function, Distribution, and More","The link between the Poisson and Gamma distribution, then, is conveniently established by the fact that the time of the th arrival is lesser than  if more than  events happen within the time interval . This proposition can be expressed as an identity in the following form. Notice that the left-hand side is a cumulative distribution function of the Gamma distribution expressed in terms of . Given the derivative relationship between the CDF and PDF, we can obtain the probability distribution function of Gamma by deriving the right-hand side sigma expression with respect to . After some thinking, we can convince ourselves that unraveling the sigma results in a chain reaction wherein adjacent terms nicely cancel one another, ultimately collapsing into a single term, which also happens to be the first term of the expression: Recalling that , we can rewrite the expression as follows: Notice the structural identity between the form we have derived and the equation of the Gamma distribution function introduced above, with parameters , , and . In the language of Poisson, these variables translate to , , and , respectively. To develop and intuition of the Gamma distribution, let’s quickly plot the function. If we determine the values for the parameters  and , the term  reduces to some constant, say , allowing us to reduce the PDF into the following form: This simplified expression reveals the underlying structure behind the Gamma distribution: a fight for dominance between two terms, one that grows polynomially and the other that decays exponentially.",0,0,0,0,1,0,0,1
Fisher Score and Information,"We square that quantity to prevent negative values from canceling out positive ones. Covariance is just an extension of this concept applied to a comparison of two random variables instead of one. Here, we consider how two variables move in tandem. And the variance-covariance matrix is simply a matrix that contains information on the covariance of multiple random variables in a neat, compact matrix form. A closed-form expression for the covariance matrix  given a random vector , which follows immediately from aforementioned definitions and some linear algebra, looks as follows: Enough of the prologue and review, now we’re ready to start talking about Fisher. The information matrix is defined as the covariance matrix of the score function as a random vector. Concretely, Note that the 0’s follow straight from the earlier observation that . Intuitively, Fisher’s information gives us an estimate of how certain we are about the estimate of the parameter . This can be seen by recognizing the apparent similarity between the definition of the covariance matrix we have defined above and the definition of Fisher’s information. In fact, the variance of the parameter  is explained by the inverse of Fisher’s information matrix, and this concept is known as the Cramer-Rao Lower Bound. For the purposes of this post, I won’t get deep into what CRLB is, but there are interesting connections we can make between Fisher’s information, CRLB, and the likelihood, which we will get into later. Because Fisher’s information requires computing the expectation given some probability distribution, it is often intractable.",0,0,0,0,1,0,0,0
Logistic Regression Model from Scratch,"There is one more tiny little step we have to make to concretize this equation, and that is to consider the average of the total gradient, since (13) as it stands applies to only one data observation. Granted, this derivation is not meant to be a rigorous demonstration of mathematical proof, because we glossed over some details concerning matrix transpose, dot products, and dimensionality. Still, it provides a solid basis for the construction of the gradient descent algorithm in code, as shown below. To avoid compensating code readability, I made a stylistic choice of using  and  to denote the vector of coefficients instead of using  for notational consistency. Other than adding some switch optional parameters such as  or , the code simply follows the gradient descent algorithm outlined above. Note that equation (6) is expressed via ; equation (14) is expressed by the line . Let’s quickly check that the  function works as expected using the dummy data we created earlier. Great! We see that the average cross entropy decreases with more iterations. The returned  array contains the coefficients of the logistic regression model, which we can use to now make predictions. We can stop here, but just like we did in the post on k-nearest neighbors, let’s wrap all the functions we have created so far into a single function that represents the logistic regression model. Our model is ready. Time for testing with some real-world data. Let’s import some data from the web.",1,0,0,0,0,1,0,0
Word2vec from Scratch,"This aligns with the behavior we want, since we want the predicted probability to be as close to 1 as possible. So let’s summarize the entire process a little bit. First, embeddings are simply the rows of the first weight matrix, denoted as . Through training and backpropgation, we adjust the weights of , along with the weight matrix in the second layer, denoted as , using cross entropy loss. Overall, our model takes on the following structure: where  is the matrix contains the prediction probability vectors. With this in mind, let’s actual start building and train our model. Let’s start implement this model in code. The implementation we took here is extremely similar to the approach we took in this post. For an in-depth review of backpropagation derivation with matrix calculus, I highly recommend that you check out the linked post. The representation we will use for the model is a Python dictionary, whose values are the weight matrices and keys, the name with which we will refer to the weight matrices. In accordance with the nomenclature established earlier, we stick with  and  to refer to these weights. Let’s specify our model to create ten-dimensional embeddings. In other words, each token will be represented as vectors living in ten-dimensional space. Note that actual models tend to use much higher dimensions, most commonly 300, but for our purposes this is not necessary. Let’s begin with forward propagation. Coding the forward propagation process simply amounts to transcribing the three matrix multiplication equations in (6) into NumPy code.",1,0,1,0,0,0,0,0
"0.5!: Gamma Function, Distribution, and More","Plotting the Gamma distribution for different values of  and  gives us a better idea of what this relationship entails. Executing this code block produces the following figure. Notice that, as  increases, the Gamma distribution starts to look more like a normal distribution. At , the  collapses to 1, resulting in an exponential distribution. A short tangential digression: the exponential distribution is a special case of a Gamma distribution that models the waiting time until the first event in a Poisson process. It can also be considered as the continuous version of the geometric distribution. But maybe more on this later on a separate post. Returning back to the Gamma distribution, we see that altering the  also produces a transformative effect on the shape of the Gamma PDF. Specifically, increasing  causes the distribution to move to the right along the -axis. This movement occurs because, for every , a larger  value results in a decrease in the corresponding value of , which graphically translates to a rightward movement along the axis as shown. We started by looking at the Poisson probability mass function, and started our venture into the Gamma function by pondering the question of interpolating the factorial function. From there, we were able to derive and develop an intuition for the Gamma distribution, which models the waiting time required until the occurrence of the th event in a Poisson process. This may all sound very abstract because of the theoretical nature of our discussion.",0,0,0,0,1,0,0,1
A Step Up with  Variational Autoencoders,"In a previous post, we took a look at autoencoders, a type of neural network that receives some data as input, encodes them into a latent representation, and decodes this information to restore the original input. Autoencoders are exciting in and of themselves, but things can get a lot more interesting if we apply a bit of twist. In this post, we will take a look at one of the many flavors of the autoencoder model, known as variational autoencoders, or VAE for short. Specifically, the model that we will build in this tutorial is a convolutional variational Autoencoder, since we will be using convolutional layers for better image processing. The model architecture introduced in this tutorial was heavily inspired by the one outlined in François Chollet’s Deep Learning with Python, as well as that from a separate article on the Keras blog. Let’s start by importing the modules necessary for this demonstration. The objective of today’s task is to build an autoencoder model that produces MNIST hand-written digits. The hidden dimension, or the latent space of the model, is going to a random vector living in two-dimensional space. Let’s specify this setup, along with some other miscellaneous configurations, before we proceed with constructing the model architecture. It’s time to build our model… or not quite now. Before we start stacking layers for the encoder and the decoder, we need to define a sampling function that will perform the meat of the variational inference involved in VAE.",0,0,1,1,0,0,0,0
Moments in Statistics,"In the end, both (12) and (13) are pointing at the same quantity, namely the third moment of the exponential distribution. Perhaps the complexity of calculating either quantity is similar, and the question might just boil down to a matter of preference. However, this example shows that the MGF is a robust method of calculating moments of a distribution, and even more, potentially less computationally expensive than using the brute force method to directly calculate expected values. This was a short post on moments and moment generating functions. Moments was one of these terms that I had come across on Wikipedia or math stackexchange posts, but never had a chance to figure out. Hopefully, this post gave you some intuition behind the notion of moments, as well as how moment generating functions can be used to compute useful properties that explain a distribution. In the next post, we will take a brief break from the world of distributions and discuss some topics in information theory that I personally found interesting. If you would like to dwell on the question like “how do we quantify randomness,” don’t hesitate to tune in again in a few days!.",0,0,0,0,1,0,0,1
Demystifying Entropy (And More),"We begin with the likelihood ratio: We can consider  as representing how probable the sample  came from distribution  than , given that  was sampled from some unknown distribution. If , the more likely it is that the data came from ; if , the more probable it is that the sample came from . Say we have multiple independent observations of data. Then, we can use (6) to compute the likelihood ratio for each sample. Calculating the product of these ratios will tell us which distribution is more likely given all available data points. In other words, A technique we saw when we were exploring the topic of likelihood maximization was log likelihood. Log likelihoods are useful because we can reexpress products as sums, using the property of logs. (7) makes sense, but it weighs all likelihood ratios equally. In reality, most samples are not equiprobable; some values are more likely than others, unless in the context of uniform distributions. To account for this, let’s reframe (7) as an expected values calculation, i.e. give different weight to each likelihood ratio depending on the probability of observing that data point. Let’s make (8) look better by unpacking the fraction sitting in the log function as a subtraction of two terms. The final key is to realize the secret that In other words, we have derived the mathematical definition of KL divergence! The mathematical definition of cross entropy can simply be derived by plugging in (10) into (5).",0,0,0,0,1,0,0,0
Principal Component Analysis,"In this section, we will see how PCA is essentially a way of performing and applying these decomposition techniques under the hood. Recall that eigendecomposition is a method of decomposing matrices as follows: where  is a diagonal matrix of eigenvalues and  is a matrix of eigenvectors. PCA is closely related to eigendecomposition, and this should come as no surprise. Essentially, by finding the eigenvalues and eigenvectors of , we are performing an eigendecomposition on the covariance matrix: Notice that  is a matrix of principal components. Of course, in this case,  is a square matrix of full rank; to apply dimension compression, we need to slice the first  entries of . At any rate, it is clear that PCA involves eigendecomposition of the covariance matrix. Eigendecomposition can only be applied to matrices of full rank. However, there is a more generalized method for non-square matrices, which is singular value decomposition. Here is a blueprint of SVD: Where  is a matrix containing the roots of the eigenvalues, with appropriate dimensional configurations to accommodate the shape of the original matrix. We cannot perform eigendecomposition on , which has no guarantee that it is square; however, SVD is definitely an option. Assume that  can be decomposed into , , and . Then the covariance matrix becomes And we end up in the same place as we did in (25). This is no surprise given that the derivation of SVD involves eigendecomposition. In this post, we took a deep dive into the mathematics behind principal component analysis.",0,1,0,0,1,0,0,0
PyTorch RNN from Scratch,"Now that we have downloaded the data we need, let’s take a look at the data in more detail. First, here are the dependencies we will need. We first specify a directory, then try to print out all the labels there are. We can then construct a dictionary that maps a language to a numerical label. We see that there are a total of 18 languages. I wrapped each label as a tensor so that we can use them directly during training. Let’s store the number of languages in some variable so that we can use it later in our model declaration, specifically when we specify the size of the final output layer. Now, let’s preprocess the names. We first want to use  to standardize all names and remove any acute symbols or the likes. For example, Once we have a decoded string, we then need to convert it to a tensor so that the model can process it. This can first be done by constructing a  mapping, as shown below. We see that there are a total of 59 tokens in our character vocabulary. This includes spaces and punctuations, such as ` .,:;-‘(num_char, 59)(59,)`. We can now build a function that accomplishes this task, as shown below: If you read the code carefully, you’ll realize that the output tensor is of size , which is different from the explanation above. Well, the reason for that extra dimension is that we are using a batch size of 1 in this case.",1,0,1,0,0,0,0,0
Complex Fibonacci,"The takeaway from the code snippet is that holds, regardless of whether or not  is a non-negative integer. Indeed, Binet’s formula gives us what we might refer to as the interpolation of the fibonacci sequence, in this case extended along the real number line. A corollary of the real number interpolation of the fibonacci sequence via Binet’s formula is that now we can effectively plot the complex fibonacci numbers on the Cartesian plane. Because  can be continuous, we would expect some graph to appear, where the -axis represents real numbers, and , the imaginary. This requires a bit of a hack though; note that the result of Binet’s formula is a complex number, or a two-dimensional data point. The input to the function is just a one-dimensional real number. Therefore, we need a way of representing a map from a one-dimensional real number line to a two-dimensional complex plane. This is sort of tricky if you think about it: the normal two-dimensional plane as we know it can only represent a mapping from the -axis to the -axis—in other words, a transformation from one-dimensional space to another one-dimensional space. A three-dimensional -coordinate system, on the other hand, represents a transformation from a two-dimensional space, represented by  and , to another one-dimensional space, namely . We aren’t used to going to other way around, where a one-dimensional space is mapped to a two-dimensional space, as is the case here.",0,0,0,0,0,0,1,0
"Basel, Zeta, and some more Euler","Euler begins his exposition by analyzing the Taylor expansion of the sine function, which goes as follows: Dividing both sides by , we obtain the following: Now it’s time to follow Euler’s amazing intuition. If we take a close look at the equation , we can convince ourselves that its solutions will adhere to the form , where  is a non-zero integer between . This is expected given the periodic behavior of the sine function and its intercepts with the -axis. Given these zeros, we can then reconstruct the original function  as an infinite product using the fundamental theorem of algebra, or more specifically, Weierstrass factorization. Let’s try to factor out the coefficient of the  term through some elementary induction. First, we observe that calculating the product of the first two terms produces the following expression: Then, we can express the target coefficient, denoted by , as follows: Where  denotes the coefficient of  obtained by expanding the rest of the terms following  in the infinite product above. If we repeat this process once more, a clear pattern emerges: Iterating over this process will eventually allow us to express our target coefficient as a sum of inverse squares multiplied by some constant, in this case : But then we already know the value of  from the modification of the Taylor polynomial for sine we saw earlier, which is ! Therefore, the Basel problem reduces to the following: Therefore, And there we have the solution to the Basel problem.",0,0,0,0,0,0,1,0
Demystifying Entropy (And More),"This is why we use bytes to represent the amount of disk storage in computers, for instance. It is also worth mentioning that the alternative name for bits is Shannons, named eponymously after the mathematician who pioneered the field of information theory, as mentioned above. Now that we have some idea of what information is and how we can quantify it using binary numbers in bits, it’s time to get into the math. Information can be calculated through the formula where  is the information need to express the random event , and  is the probability that event  occurs, i.e. . There are different versions of this formula, such as the one that uses Euler’s constant as the log base instead of 2. Whereas the unit of information as measured through (1) is in bits, that calculated through (2) as shown below is in the unit of nats. For the purposes of this post, we will be using equation (1) instead of two. This is primarily because we will be using the binary number analogy to build an intuition for information computation. Let’s quickly create a visualization that shows the relationship between probability and information in bits. As equation (1) describes this relationship quite concisely, let’s try plotting it on a graph.  So that’s how we calculate randomness in a random event—the amount of information that is needed to represent randomness as probability.",0,0,0,0,1,0,0,0
A Step Up with  Variational Autoencoders,"I say almost, because we still have not dealt with the trailing term in (13): At this point, it is extremely useful to recall the definition of cross entropy, which is generically defined as follows: Therefore, we see that the trailing term in (13) is just a cross entropy between two distributions! This was a circumlocutions journey, but that is enough math we will need for this tutorial. It’s time to get back to coding. All that math was for this simple code snippet shown below: As you can see, this short code snippet shows, in essence, how we can define a compile a model with a custom loss function. In this case,  refers to the reconstruction loss, which is the cross entropy term we saw earlier. , as you might expect, simply refers to KL divergence. Notice how there is a  multiplying factor in the  expression, just like we did when we derived it in the section above. With some keen observations and comparisons, you will easily see that the code is merely a transcription of (13), with some minor differences given dimensionality. One important fact to note is that the gradient descent algorithm, by default, seeks to minimize the loss function. However, we discussed above how the objective of VAE is to maximize ELBO. Therefore, we modify ELBO into a loss function that is to be minimized by defining the loss function as the negative of ELBO. In other words, the cost function  is defined as ; hence the difference in sign.",0,0,1,1,0,0,0,0
"PyTorch, From Data to Modeling","This is as simple as calling  and passing in the dataset we want to load. If we loop through the , for instance, we can see that it is giving us a nice batch of 32 photos. Note that the dimensions are in the form of . As for the labels, we get 32 values where each number corresponds to an image. As the last step, let’s just make sure that we know what each of these labels correspond to. The  is a tuple of strings that translate label indices to actual strings we can interpret. For example, if we see the label , we know that it denotes , which is . Modeling in PyTorch is the probably the part I love the most. TensorFlow’s sequential API is a great way to start, and PyTorch also provides the same sort of way of building sequential models. However, once you try to build anything that’s more complicated than that, I think PyTorch’s class-based way of approaching modeling makes a lot more intuitive sense and provides more room for experimentation and customization. Before getting into too much detail, below is a very simple CNN we will refer to as an example throughout this post. The first thing you will realize is that the model itself is a class that inherits from . This is a pattern you will see all the time with PyTorch models.",0,0,1,0,0,0,0,0
Stirling Approximation,"Then,  will be a new Poisson random variable with mean . If we extend this idea to apply to  independent random variables instead of just two, we can conclude that  collection of independent random variables from  to  sampled from a population of mean  will have mean . And by the nature of the Poisson distribution, the same goes for variance (We will elaborate on this part more below). The Central Limit Theorem then tells us that the distribution of the sum of these random variables will approximate a normal distribution. This concludes a rough proof of the Stirling approximation. For those of you who are feeling rusty on the Poisson distribution as I was, here is a simple explanation on the Poisson—specifically, its mean and variance. By the virtue of the definition of the parameter, it should be fairly clear why :  is a rate parameter that indicates how many events occur within a window of unit time. The expected calculation can easily be shown using Taylor expansion: Next, we prove that the variance of a Poisson random variable defined by parameter  is equal to . Let  be a Poisson random variable. Then, Then, using the definition of variance, we know that From this, we are once again reminded of the defining property of the Poisson, which is that both the mean and variance of a Poisson random variable is defined by the parameter . Let’s tie this back to our original discussion of the Central Limit Theorem.",0,0,0,0,1,0,1,1
Markov Chain and Chutes and Ladders,"” This simply means that the progress of the game depends only on the players’ current positions, not where they were or how they got there. A player might have ended up where they are by taking a ladder or by performing a series of regular dice rolls. In the end, however, all that matters is that the players eventually hit the hundredth cell. To perform a Markov chain analysis on the Chutes and Ladders game, it is first necessary to convert the information presented on the board as a stochastic matrix. How would we go about this process? Let’s assume that we start the game at the th cell by rolling a dice. There are six possible events, each with probability of . More specifically, we can end up at the index numbers 38, 2, 3, 14, 5, or 6. In other words, at position 0, where  and  denote the current and next position of the player on the game board, respectively. We can make the same deductions for other cases where . We are thus able to construct a 101-by-101 matrix representing the transition probabilities of our Chutes and Ladders system, where each column represents the system at a different state, i.e. the th entry of the th column vector represents the probabilities of moving from cell  to cell . To make this more concrete, let’s consider a program that constructs the stochastic matrix , without regards to the chutes and ladders for now.",0,1,0,0,0,0,0,0
Introduction to tf-idf,"In short, document frequency tells us how frequently a given word appears throughout all documents; the inverse is the reciprocal of that quantity. In practice, we often apply a logarithm to prevent the idf score from exploding. Also, we add some smoothing to prevent division by zero. There seems to be many variations of how smoothing is implemented in practice, but here I present one way that seems to be adopted by scikit-learn. For other schemes, refer to this table on Wikipedia. However, this is a mere technically; the intuition we motivated earlier still applies regardless. With these ideas in mind, let’s go implement tf-idf vectorization in Python! In this section, we will develop a simple set of methods to convert a set of raw documents to tf-idf vectors, using a dummy dataset. Below are four documents (again, I know they’re short) that we will be using throughout this tutorial. The first step is to preprocess and tokenize the data. Although the specifics of preprocessing would probably differ from task to task, in this simple example, we simply remove all punctuations, change documents to lower case letters, and tokenize them by breaking down documents into a bag of words. Other possible techniques not discussed here include stemming and lemmatization. The  function accepts as input a set of documents and removes all the punctuation in each document. Here is the result of applying our function to the dummy data. Next, we need to tokenize the strings by splitting them into words.",1,0,0,0,0,0,0,0
"PyTorch, From Data to Modeling","Now, I can “move” tensors and models up to the GPU by doing something like and these statements would allow inference and training to occur within the GPU. And below are some constants I will be using in this notebook. Namely, we will run training for a total of 4 epochs, with a batch size of 32 and a learning rate of 0.001. Now that we have all the things we need, let’s jump into some data preparation and modeling. Another thing I love about PyTorch is the sheer ease with which you can preprocess data. PyTorch makes it incredibly easy to combine and stack multiple transforms to create custom transformations to be applied to the dataset. The easiest way to go about this is to use the  method, which looks like this: Here, we are applying to transformations: the first changes the dataset and casts it into PyTorch tensors,, and the second one normalizes the dataset to have a mean of 0.5 and a standard deviation of also 0.5 across all three channels of RGB. How can we apply this transform? Well, we can pass it to initialize the datasets as shown below: Because I already have the CIFAR10 downloaded in the  directory of my local, PyTorch does not download the dataset again. We could go with the dataset as-is, but we can use the  class to further batch and shuffle the dataset, which we normally want 99 percent of the time.",0,0,1,0,0,0,0,0
"PyTorch, From Data to Modeling","is a super class from which we can inherit to build anything from full-fledged models to custom blocks or layers to be used in some other larger model. In the initialization function, we also define a number of layers that will be used in forward propagation. You might be wondering why these have to initialized in the initialization function, as opposed to the forward function itself. While I don’t have a complete, technically cogent explanation to that question, intuitively, we can understand a model’s layers as being components of the model itself. After all, the weights of these layers are adjusted with each iteration or epoch. In that sense, we want the layers to be attached to the model instance itself; hence the OOP design of PyTorch’s model class. In this particular instance, we define a number of convolutional layers, a pooling layer, and two fully connected layers used for classification output. The declaration of the layers themselves are not too different from other frameworks, such as TensorFlow. Also, I’ve written out all the named arguments so that it is immediately clear what each argument is configuring. Once we’ve declared all the necessary components in the initialization function, the next steps to actually churn out forward propagation results given some input. In PyTorch, this is done by defining the  function. As you can see above, we basically call on the layers we’ve declared in the initialization function via  and pass in any parameters we want.",0,0,1,0,0,0,0,0
Complex Fibonacci,"With some algebra, one can verify that Putting these together, we finally get Binet’s formula: An interesting point to note about Binet’s formula is that  doesn’t necessarily have to be a non-negative integer as we had previously assumed. In fact, it can be any number: rational, irrational, real, or even complex. The fact that the fibonacci numbers can extend to real number indexing becomes more apparent once we code out the formula. Nothing special at all, this is just a literal transcription of the formula presented above. But now, watch what happens when we try to get the 1.1th fibonacci number, for instance: Lo and behold, we get a complex fibonacci number! I thought this was so fascinating, almost like seeing a magic of some sort. Although I had known about the fibonacci sequence for as long as I can remember, I had never thought about it in continuous terms: in my mind, the fibonacci sequence was, after all, a sequence—a discrete set of numbers adhering to the simple rule that the next number in line is the sum of the previous two. The intriguing part is that, even in this complex fibonacci madness, the simple rule still holds. For instance, You might be wondering why we don’t compare things exactly by means of This is because this equality doesn’t hold due to floating point arithmetic. Therefore, we simply verify equivalence by comparing their magnitude with an arbitrarily small number, .",0,0,0,0,0,0,1,0
"0.5!: Gamma Function, Distribution, and More","We can divide both sides by  to obtain the following expression: We can then apply the substitution  to obtain Notice that we can consider the integrand to be a probability distribution function since the result of integration over the prescribed domain yields 1, the total probability. Seen this way, we can finally delineate a definition of the Gamma distribution as follows, with a trivial substitution of parameters. If this derivation involving the Gamma function does not click with you, we can take the alternative route of starting from the functional definition of the Gamma distribution: the Gamma distribution models the waiting time until the occurrence of the th event in a Poisson process. In other words, given some rate  which denotes the rate at which an event occurs, what is the distribution of the waiting time going to look like? The Gamma distribution holds an answer to this question. Let’s jump right into derivation. The first ingredient we need is the equation for the Poisson probability mass function, which we might recall goes as follows:  denotes the number of events that occur in unit time, while  denotes the rate of success. To generalize this formula by removing the unit time constraint, we can perform a rescaling on  to produce the following: where  denotes the probability that  events occur within time . Notice that setting  gives us the unit time version of the formula presented above.",0,0,0,0,1,0,0,1
Stirling Approximation,"It’s about time that we go back to the old themes again. When I first started this blog, I briefly dabbled in real analysis via Euler, with a particular focus on factorials, interpolation, and the Beta function. I decided to go a bit retro and revisit these motifs in today’s post, by introducing Stirling’s approximation of the factorial. There are many variants of Stirling’s approximation, but here we introduce the general form as shown: Let’s begin the derivation by first recalling the Poisson distribution. The Poisson distribution is used to model the probability that a certain event occurs a specified number of times within a defined time interval given the rate at which these events occur. The formula looks as follows: One interesting fact about the Poisson distribution is that, when the parameter  is sufficiently large, the Poisson approximates the Gaussian distribution whose mean and variance are both . This happens when the random variable . We can easily simplify (2) since the power of the exponent is zero. Thus, we have By simply rearranging (3), we arrive at Stirling’s approximation of the factorial: This is cool, but we still haven’t really shown why a Poisson can be used to approximate a Gaussian—after all, this premise was the bulk of this demonstration. To see the intuition behind this approximation, it is constructive to consider what happens when we add independent Poisson random variables. Say we have  and , both of which are independent Poisson random variables with mean  and .",0,0,0,0,1,0,1,1
The Exponential Family,"This was the hard part: now, all that is left is to configure the rest of the functions to complete the factorization. One possible answer is presented below: By now, it should be sufficienty clear that the definition of the exponential family is robust enough to encompass at least the two probability distributions: the exponential and the Bernoulli. Although we do not go over other examples in this article, the exponential family is a well-defined set of probability distributions that, at thei core, are defined by a common structure. And as we will see in the next section, this underlying similarity makes certain calculations surprisingly convenient. In a previous post, we explorerd the notion of maximum likelihood estimation, and contrasted it with maximum a posteriori estimation. The fundamental question that maximum likelihood estimation seems to answer is: given some data, what parameter of a distribution best explains that observation? This is an interesting question that merits exploration in and of itself, but the discussion becomes a lot more interesting and pertinent in the context of the exponential family. Before diving into MLE, let’s define what is known as the canonical form of the exponential family. Despite its grandiose nomenclature, the canonical form simply refers to a specific flavor of factorization scheme where in which case (3) simplifies to We will assume some arbitrary distribution in the exponential family following this canonical form to perform maxmimum likelihood estimation.",0,0,0,0,1,0,0,1
Scikit-learn Pipelines with Titanic,"In today’s post, we will explore ways to build machine learning pipelines with Scikit-learn. A pipeline might sound like a big word, but it’s just a way of chaining different operations together in a convenient object, almost like a wrapper. This abstracts out a lot of individual operations that may otherwise appear fragmented across the script. I also personally think that Scikit-learn’s ML pipeline is very well-designed. So here is a brief introduction to ML pipelines is Scikit-learn. For the purposes of this tutorial, we will be using the classic Titanic dataset, otherwise known as the course material for Kaggle 101. I’m still trying to get my feet into Kaggle, so it is my hope that this tutorial will also help those trying to break into data science competitions. First, let’s import the modules and datasets needed for this tutorial. Scikit-learn is the go-to library for machine learning in Python. It contains not only data loading utilities, but also imputers, encoders, pipelines, transformers, and search tools we will need to find the optimum model for the task. Let’s load the dataset using . Let’s observe the data by calling . By default, this shows us the first five rows and as many columns as it can fit within the notebook. Let’s take a look at the data in more depth to build a foundation for our analysis. This step typically involves the following steps: Let’s proceed in order.",0,0,0,0,0,1,0,0
The Math Behind GANs,"This means that the expression in (15) can be expressed as a JS divergence: The conclusion of this analysis is simple: the goal of training the generator, which is to minimize the value function , we want the JS divergence between the distribution of the data and the distribution of generated examples to be as small as possible. This conclusion certainly aligns with our intuition: we want the generator to be able to learn the underlying distribution of the data from sampled training examples. In other words,  and  should be as close to each other as possible. The optimal generator  is thus one that which is able to mimic  to model a compelling model distribution . In this post, we took a brief tour of the math behind general adversarial networks. Since the publication of Goodfellow’s work, more GAN models have been introduced and studied by different scholars, such as the Wasserstein GAN or CycleGAN to name just a few. The underlying mathematics for these models are obviously going to be different from what we have seen today, but this is a good starting point nonetheless. I hope you enjoyed reading this post. In the next post, I plan to explore the concept of Fisher information and the Fisher matrix. It is going to be another math-heavy ride with gradients and Hessians, so keep you belts fastened!.",0,0,1,0,1,0,0,0
Gamma and Zeta,"Maintaining momentum in writing and self-learning has admittedly been difficult these past few weeks since I’ve started my internship. Normally, I would write one post approximately every four days, but this routine is no longer the norm. To my defense, I’ve been learning a ton about Django and backend operations like querying and routing, and I might write a post about these in the future. But for today, I decided to revisit a topic we’ve previously explored on this blog, partially in the hopes of using nostalgia as positive energy in restarting my internal momentum. I must also note that I meant to write this post for a very long time after watching this video by blackpenredpen whose videos have been a source of mathematical learning and inspiration for me. Let’s talk about the Gamma and Zeta functions. Before we begin the derivation, perhaps it’s a good idea to review what the two greek letter functions are. The Gamma function is written as And we all know that the Gamma function can be seen as an interpolation of the factorial function, since for non-negative integers, the following relationship stands: Note that there is also a variant of the Gamma function, known as the Pi function, which has somewhat of a nicer form: To the mathematically uninformed self, the Pi function seems a lot more tractable and intuitive. Nonetheless, the prevailing function is Euler’s Gamma function instead of Gauss’s Pi function. The reasons for Gamma’s dominance over Pi is discussed extensively in this math overflow thread.",0,0,0,0,0,0,1,0
Word2vec from Scratch,"In a previous post, we discussed how we can use tf-idf vectorization to encode documents into vectors. While probing more into this topic and geting a taste of what NLP is like, I decided to take a jab at another closely related, classic topic in NLP: word2vec. word2vec is a technique introduced by Google engineers in 2013, popularized by statements such as “king - man + woman = queen.” The gist of it, as you may know, is that we can express words as vectors that encode their semantics in a meaningful way. When I was just getting starting to learn TensorFlow, I came across the embedding layer, which performed exactly this operation: transforming words into vectors. While I thought this process was extremely interesting, I didn’t know about the internals of this structure until today, particularly after reading this wonderful tutorial by Chris McCornick. In this post, we will be implementing word2vec, a popular embedding technique, from scratch with NumPy. Let’s get started! Instead of going over the concepts and implementations separately, let’s jump straight into the whole implementation process and elaborate on what is necessary along the way. In order to create word embeddings, we need some sort of data. Here is a text on machine learning from Wikipedia. I’ve removed some parentheses and citation brackets to make things slightly easier. Since we can’t feed raw string texts into our model, we will need to preprocess this text.",1,0,1,0,0,0,0,0
How lucky was I on my shift?,"Assuming independence on each coin toss, we can use multiplication to calculate this probability: Notice that  because we assumed the coin was fair. Had it not been fair, we would have different probabilities for  and , explained by the relationship that . This is what the binomial PMF is implying: calculating the probability that we get  successes in  trials requires that we multiply the probability of success  by  times and the probability of failure  by  times, because those are the numbers of successful and unsuccessful trials respectively. Now that we have reviewed the concept of binomial distribution, it is time to apply it to our example of phone calls at the Yongsan PMO. Although I do not have an  data sheet on me, let’s assume for the sake of convenience that, on average, 12 calls come to the PMO per shift, which is eight hours. Given this information, how can we simulate the situation as a binomial distribution? First, we have to define what constitutes a success in this situation. While there might be other ways to go about this agenda, the most straightforward approach would be to define a phone call as a success. This brings us to the next question: how many trials do we have? Here is where things get a bit more complicated—we don’t really have trials! Notice that this situation is somewhat distinct from coin tosses, as we do not have a clearly defined “trial” or an experiment.",0,0,0,0,1,0,0,1
On Expectations and Integrals,"Imagine this process as being similar to what we learn in Calculus 101, where integrals are visualized as an infinite sum of skinny rectangles as the limit approaches zero. Essentially, we are doing the same thing, except that now, the base of each rectangle is defined as the difference between  and  instead of  and  as is the case with the Riemann integral. Another way to look at this is to consider the integral as calculating the area beneath the curve represented by the parameterization . This connection becomes a bit more apparent if we consider the fact that the Riemann integral is calculating the area beneath the curve represented by . In other words, the Riemann-Stieltjes integral can be seen as dealing with a change of variables. You might be wondering why the Riemann-Stieltjes integral is necessary in the first place. After all, the definition of expectation we already know by heart should be enough, shouldn’t it? To answer this question, consider the following  function: This cumulative mass function is obviously discontinuous since it is a step-wise function. This also means that it is not differentiable; hence, we cannot use the definition of expectation that we already know. However, this does not mean that the random variable  does not have an expected value.",0,0,0,0,1,0,0,0
Likelihood and Probability,"“I think that’s very unlikely.” “No, you’re probably right.” These are just some of the many remarks we use in every day conversations to express our beliefs. Linguistically, words such as “probably” or “likely” serve to qualify the strength of our professed belief, that is, we express a degree of uncertainty involved with a given statement. In today’s post, I suggest that we scrutinize the concept of likelihood—what it is, how we calculate it, and most importantly, how different it is from probability. Although the vast majority of us tend to conflate likelihood and probability in daily conversations, mathematically speaking, these two are distinct concepts, though closely related. After concretizing this difference, we then move onto a discussion of maximum likelihood, which is a useful tool frequently employed in Bayesian statistics. Without further ado, let’s jump right in. As we have seen in an earlier post on Bayesian analysis, likelihood tells us—and pardon the circular definition here—how likely a certain parameter is given some data. In other words, the likelihood function answers the question: provided some list of observed or sampled data , what is the likelihood that our parameter of interest takes on a certain value ? One measurement we can use to answer this question is simply the probability density of the observed value of the random variable at that distribution. In mathematical notation, this idea might be transcribed as: At a glance, likelihood seems to equal probability—after all, that is what the equation (1) seems to suggest.",0,0,0,0,1,0,0,0
Building Neural Network From Scratch,"Welcome back to another episode of “From Scratch” series on this blog, where we explore various machine learning algorithms by hand-coding them from scratch. So far , we have looked at various machine learning models, such as kNN, logistic regression, and naive Bayes. Now is time for an exciting addition to this mix: neural networks. Around last year December, I bought my first book on deep learning, titled Deep Learning from Scratch,  by Saito Goki. It was a Korean translation of a book originally published in Japanese by O’Reilly Japan. Many bloggers recommended the book as the go-to introductory textbook on deep learning, some even going as far as to say that it is a must-have. After reading a few pages in, I could see why: as the title claimed, the author used only  to essentially recreate deep learning models, ranging from simple vanilla neural networks to convolutional neural networks. As someone who had just started to learn Python, following the book was a lot harder than expected, but it was a worthwhile read indeed. Inspired by that book, and in part in an attempt to test the knowledge I gained from having read that bok, I decided to implement my own rendition of a simple neural network supported by minibatch gradient descent. Let’s jump right into it. The default setup of my Jupyter Notebook, as always: Before we start building our model, we should first prepare some data.",1,1,1,0,0,0,0,0
A Simple Autocomplete Model,"Let’s perform a quick sanity check to see if the function works as expected. Specifying  to 60 means that each instance in the training data will be 60 consecutive characters sampled from the text data every  characters. The result tells us that we have a total of 200278 training instances, which is probably plenty to train, test, and validate our model. The result also tells us that there are 57 unique characters in the text data. Note that these unique characters not only include alphabets but also and other miscellaneous white spacing characters and punctuations. Let’s now design our model. Because there is obviously going to be sequential, temporal structure underlying the training data, we will use an LSTM layer, a type of advanced recurrent neural network we saw in the previous post. In fact, this is all we need, unless we want to create a deep neural network spanning multiple layers. However, training such a model would cost a lot of time and computational resource. For the sake of simplicity, we will build a simple model with a single LSTM layer. The output layer is going to be a dense layer with  number of neurons, activated with a softmax function. We can thus interpret the index of the biggest value of the final array to correspond to the most likely character. Below is a full plot of the model that shows the dimensions of the input and output tensors of all layers.",0,0,1,1,0,0,0,0
A Brief Introduction to Recurrent Neural Networks,"First, note that our model accepts input of size . The dimensionality of the output is a little more tricky because of the  option. What concatenate does is that it basically flattens all  number of outputs into a single list. In this case, because we set the option to , we get a flattened list containing , or 6400 elements. The main takeaway is that recurrent neural networks can be used to implement some sort of memory functionality, which is useful when dealing with datasets where there exists some sort of sequential structure. One way to implement memory is by using the output of the previous sequence to define a  variable, which is used to compute the next output as we have done above. Now let’s get down to business with the  API. Implementing a recurrent neural network is not so much different from building a simple feed forward or convolutional neural network: we simply import a RNN-specific layer and arrange these layers to construct a working model. Before we proceed any further, let’s first import all necessary dependencies for this tutorial. As with any tutorial, we need to start by loading and preprocessing data. Luckily, there isn’t going to be much preprocessing involved since we will be using a dataset available from the  library, the IMBD movie reviews dataset. The dataset contains 25,000 movie reviews from IMDB, labeled as either positive or negative. Each review is encoded as a sequence of integers according to a consistent encoding scheme.",0,0,1,1,0,0,0,0
Bayesian Linear Regression,"MAP versus MLE is a recurring theme that appears throughout the paradigmatic shift from frequentist to Bayesian, so it merits discussion. Now that we have a posterior distribution for  which we can work with, it’s time to derive the predictive distribution. We go about this by marginalizing  using the property of conditional probability, as illustrated below. This may seem like a lot, but most of it was simple calculation and distributing vectors over parentheses. It’s time to use the power of conjugacy again to extract a normal distribution out of the equation soup. Let’s complete the square of the exponent according to the Gaussian form after making the appropriate substitutions Again, observing this is not a straightforward process, especially if we had no idea what the final distribution is going to look like. However, given that the resulting predictive posterior will take a Gaussian form, we can backtrack using this knowledge to obtain the appropriate substitution parameters in (13). Continuing, where the last equality stands because we can pull out terms unrelated to  by considering them as constants. Why do we bother to pull out the exponent? This is because the integral of a probability density function evaluates to 1, leaving us only with the exponential term outside the integral. To proceed further from here, let’s take some time to zoom in on  for a second. Substituting , we get We can now plug this term back into (15) as shown below.",0,1,0,0,0,0,0,0
Building Neural Network From Scratch,"Recall that our neural network is structured as follows: The last layer is a softmax unit that receives input  to produce output . Our goal, then, is to compute the gradient where  and  each represent the values taken by the th and th neuron in layers  and , respectively. One point of caution is that it is important to consider whether  and  are equal, as this produces differences in the calculation of the gradient. First consider the case when : When : We see that the gradient is different in the two cases! This is certainly going to important for us when calculating the gradient of , the cross entropy loss function, with respect to . Specifically, we have to consider the two cases separately by dividing up the summation expression into two parts, as shown below: That was a long ride, but in the end, we end up with a very nice expression! This tells us that the gradient of the cross entropy loss function with respect to the second affine layer is simply the size of the error term. In other words, if we expand the result in (13) to apply to the entire matrix of layers, we get This provides a great place for us to start. We can commence from here to find the gradient of the loss function with respect to other layers more further down the neural network.",1,1,1,0,0,0,0,0
The Magic of Euler’s Identity,"It is also interesting to see that the Taylor series for  is an odd function, while that for  is even, which is coherent with the features of their respective original functions. Last but not least, notice that the derivative of Taylor polynomial of  gives itself, as it should. Now that we have the Taylor polynomials, proving Euler’s identity becomes a straightforward process of plug and play. Let’s plug  into the Taylor polynomial for : Notice that we can separate the terrms with and without : In short, ! With this generalized equation in hand, we can plug in  into  to see Euler’s identity: The classic proof, although fairly straightforward, is not my favorite mode of proving Euler’s identity because it does not reveal any properties about the exponentiation of an imaginary number, or an irrational number for that matter. Instead, I found geometric interpretations of Euler’s formula to be more intuitive and thought-provoking. Below is a version of a proof for Euler’s identity. Let’s start by considering the complex plane. There are two ways of expressing complex numbers on the Argand diagram: points and vectors. One advantage of the vector approach over point representation is that we can borrow some simple concepts from physics to visualize  through the former: namely, a trajectory of a point moving along the complex plane with respect to some time parameter .",0,0,0,0,0,0,1,0
"Newton-Raphson, Secant, and More","7 is a familiar value, and indeed it is what was returned by the Newton-Raphson method as well. We confirm that this is indeed the root of the equation. Now that we have looked at both methods, it’s time to make a quick comparison. We will be comparing three different methods: By setting  to be , we can obtain a full list of root updates as the three methods begin their quest for the root of the function. We can then see which method converges the quickest. Let’s see how this little experiment turns out. We first begin by importing some dependencies to plot the history of values. Then, we obtain the history for each of the three approaches and plot them as a scatter plot. The result is shown below.  You might have to squint your eye to see that  (Netwon-Raphson with direct derivatives) and  (Newton-Raphson with center divided difference) almost coincide exactly at the same points. I was honestly somewhat surprised by the result: although we had verified the advantage of using center divided difference over forward or backward divided difference via some simple big-O analysis with trailing error terms, I did not expect the two to coincide with such exactitude. Another interesting observation is that the secant method seems to take slightly longer than the Newton-Raphson method. This is probably due to the fact that the secant method uses backward divided difference, and also the fact that it requires two previous at each iteration instead of one.",0,0,0,0,0,0,1,0
"Linear Regression, in Two Ways",") In our case, we love orthogonality because they are key to deriving the equation for the line of best fit through projection. To see what this means, let’s quickly assume a toy example to work with: assume we have three points,  and , as shown below.  As we can see, the three points do not form a single line. Therefore, it’s time for some regression. Let’s assume that this line is defined by . The system of equations which we will attempt to solve looks as follows: Or if you prefer the vector-matrix representation as I do, This system, remind ourselves, does not have a solution because we have geometrically observed that no straight line can pass through all three points. What we can do, however, is find a projection of the vector  onto matrix  so that we can identify a solution that is closest to , which we shall denote as . As you can see, this is where all the linear algebra kicks in. Let’s start by thinking about , the projection of  onto . After some thinking, we can convince ourselves that  is the component of  that lives within the column space of , and that  is the error component of  that lives outside the column space of . From this, it follows that  is orthogonal to , since any non-orthogonal component would have been factored into . Concretely, since the transpose is an alternate representation of the dot product.",0,1,0,0,0,0,0,0
Revisiting Basel with Fourier,"Then, we get With a very small bit of algebra, we end up with And there we have it, the value of ! It’s interesting to see how all this came out of the fourier series of . In this section, we will be taking a look at some interesting representations of the Basel problem, mysteriously packaged in integrals. At a glance, it’s somewhat unintuitive to think that an infinite summation problem can be stated as an integral in exact terms; however, the translation from summation to integrals are not out of the blue. Using things like Taylor series, it is in fact possible to show that the Basel problem can be stated as an integral. For instance, consider this integral One thing I am starting to realize these past few days is that some of these integrals are extremely difficult despite being deceptively simple in their looks. This is a good example. To get started, we might consider making a quick change of variables, namely . This will effectively get rid of the rather messy-looking denominator sitting in the fraction. To make further progress, at this point let’s consider the Taylor series expansion of . We can derive this by considering the following integral: since this integral evaluates to . One way to look at (10) would be to consider it as a sum of some geometric series whose first term begins with 1 and has a constant ratio of . In other words, Here is where a bit of complication comes in.",0,0,0,0,0,0,1,0
Complex Fibonacci,"A simple hack that nonetheless makes a lot of sense in this case is to use the real-number line for two purposes: representing the input dimension, namely the real number line, and one component of the output dimension—the real number portion of the output to Binet’s formula. This admittedly results in a loss of information, since finding the point where  won’t give us the th fibonacci number; instead, it will only tell us what the fibonacci number is whose real number component equals . Nonetheless, this is an approach that makes sense since the real number line is a common dimension in both the input and output data. With this in mind, let’s go ahead and try to plot the interpolation of the fibonacci sequence on the complex plane. First, we import the modules we will need. Then, we simply specify the domain on the real number line and generate the fibonacci numbers, separating out the real and imaginary components. Note that  is not going to be used for plotting; instead, we use  as the -axis, and this is where the loss of temporal information comes in, as mentioned earlier. Now, let’s go ahead and plot it out!  And there it is, the full fibonacci sequence, interpolated across the real numbers. When I first saw this pattern in Matt Parker’s video, I was simply in awe, a loss of words. There’s something inexplicably beautiful and wonderful at this pattern, almost as if it was some part of God’s plan.",0,0,0,0,0,0,1,0
Principal Component Analysis,"Recall from (1) that reconstruction can be achieved by applying compression followed by a decoding operation: Since we know that  is just  and  is  by definition, we can express (1) in a different way. In retrospect, this is somewhat intuitive since  can roughly be thought of as a pseudo-orthonormal matrix—pseudo since there is no guarantee that it is a square matrix. Now, all that is left is to find the matrix . The way to go about this is to reconsider (3), the notion of minimizing data loss, given our findings in (6). In other words, Instead of considering a single observation, here we consider the design matrix in its entirety. Note that  is a design matrix whose rows correspond to a single observation. And because we are dealing with matrices, the Euclidean norm was replaced with its matrix equivalent, the Frobenius norm. Observe that the first term  can safely be removed from the argument since it is a constant with respect to ; let’s also change the argument of the minimum to the maximum given the negative sign. The Frobenius norm of a real matrix can be calculated as Therefore, The last equality is due to a useful property of trace, which is that we can cycle the order of matrices without changing its value. Let’s consider a single column in , denoted as . You might also imagine this as a situation where  is one-dimensional, meaning we want to compress data into a single scalar value.",0,1,0,0,1,0,0,0
Convex Combinations and MAP,"And we have derived the MAP estimate for the mean of the univariate Gaussian! Maximum a posteriori analysis is great and all, but what does the final result exactly tell us? While there might be many ways to interpret understand the result as derived in (9), one particular useful intuition to have relates to the concept of convex combinations. Simply put, a convex combination is a linear combination of different points or quantities in which the coefficients of the linear combinations add up to one. More concretely, We can also imagine that  and  are each -dimensional vectors, and that a convex combination is simply a dot product of these two vectors given that the elements of  sum up to one. Why did I suddenly bring up convex combinations out of no where? Well, it turns out that the result in (9) in fact an instance of a convex combination of two points satisfying the form Indeed, it is not difficult to see that the coefficient of  and  add up to 1, which is precisely the condition for a linear combination to be considered convex. Now here is the important part: the implication of this observation is that we can consider the MAP estimate of parameter  as an interpolation, or more simply, some weighted average between  and . This interpretation also aligns with the whole notion of Bayesian inference: our knowledge of the parameter is partially defined by the prior, but updated as more data is introduced.",0,0,0,0,1,0,0,0
Gaussian Process Regression,"This is where I think GPs get really interesting: the key point of GP is to realize that we want to model some smooth function that best fits our data. What does this “smoothness” mean in terms of covariance? The answer is that  values that are close to each other must be highly correlated, whereas those that are far apart would have low covariance. In other words, knowing the value of  tells us a lot about the value of , whereas it tells us very little about the value of . In short, the closer the values, the higher the covariance. So at the end of the day, all there is to GP regression is to construct this covariance matrix using some distance function. In GPs, these covariance matrices are referred to as kernels. Kernels can be understood as some sort of prior that we impose upon the regression problem. The idea of smoothness noted earlier is one such example of a prior. But it is a general prior that makes a lot of sense, since we normally don’t want stepwise or non-differential functions as the result of regression. But there are hundreds and thousands of kernels out there that each suit different purposes. For the sake of simplicity, however, we will only take a look at one such kernel that relates to smoothness: the squared exponential kernel, often referred to as the RBF kernel.",1,0,0,0,0,1,0,0
A sneak peek at Bayesian Inference,"So far on this blog, we have looked the mathematics behind distributions, most notably binomial, Poisson, and Gamma, with a little bit of exponential. These distributions are interesting in and of themselves, but their true beauty shines through when we analyze them under the light of Bayesian inference. In today’s post, we first develop an intuition for conditional probabilities to derive Bayes’ theorem. From there, we  motivate the method of Bayesian inference as a means of understanding probability. Suppose a man believes he may have been affected with a flu after days of fever and coughing. At the nearest hospital, he is offered to undergo a clinical examination that is known to have an accuracy of 90 percent, i.e. it will return positive results to positive cases 90 percent of the time. However, it is also known that the test produces false positives 50 percent of the time. In other words, a healthy, unaffected individual will test positive with a probability of 50 percent. In cases like these, conditional probability is a great way to package and represent information. Conditional probability refers to a measure of the probability of an event occurring, given that another event has occurred. Mathematically, we can define the conditional probability of event  given  as follows: This equation simple states that the conditional probability of  given  is the fraction of the marginal probability  and the area of intersection between those two events, .",0,0,0,0,1,0,0,1
Revisiting Basel with Fourier,"Or, even better, with the key insight that  is an even function, we might intelligently deduce that there will be no sine terms at all, since sine functions are by nature odd. In other words, all . This can of course be shown through derivation as we have done above for the cosine coefficients. Therefore, putting everything together, we end up with If we consider the case when , we have Do you smell the basel problem in the air? The summation on the right hand side is a great sign that we are almost done in our derivation. Moving the fractional term to the left hand side, we get: Diding both sides by 4, And there you have it, the answer to the Basel problem, solved using Fourier series! We can also derive a convergence value of the Dirichelt Eta function from this Fourier series as well. Recall that the Eta function looks as follows: Now how can we get a Dirichelt Eta function out of the fourier series of ? Well, let’s get back to (8) and think our way through. One noteworthy observation is that we already have  in the summation, which looks awfully similar to the Dirichlet Eta function. Since we want to get rid of the cosine term, we can simply set —this will make all cosine terms evaluate to 1, effectively eliminating them from the expression.",0,0,0,0,0,0,1,0
Scikit-learn Pipelines with Titanic,"Now that we have the two pipelines for numeric and categorical columns, now it’s time to put them together into one nice package, then apply the process over the entire dataframe. This packaging can nicely be abstracted via the , which is the magic glue to put all the pieces together. We simply have to tell which transformer applies to which column, along with the name for each process. is the complete package that we will use to transform our data. Note that  allows us to specify which pipeline will be applied to which column. This is useful, since by default, imputers or transformers apply to the entire dataset. More often or not, this is not what we want; instead, we want to be able to micro-manage categorical and numerical columns. The combination of  and  is thus a very powerful one. Now all that is left is to build a final pipeline that includes the classifier model. Let’s see how well our model performs on a stratified 5-fold cross validation. Note that this is without any hyperparameter tuning. And just like that, we can evaluate the performance of our model. When it comes to general fitting and testing, a useful tip I found on Kaggle is the following rule of thumb: If you think about it for a second, this configurations makes a lot of sense: if the pipeline contains a model, it means that it is the full package.",0,0,0,0,0,1,0,0
Wonders of Monte Carlo,"All we have to do, therefore, is to compute the expected value of the integrand by randomly generating a series of numbers within the specified domain, plug those values into the function , and take their average. This is a very elementary function that simply generates a specified number of samples given  within the domain . These numbers are then plugged into the function , after which an unweighted mean of these values are computed to approximate an integral. Let’s test the accuracy of this crude Monte Carlo method by using our example of  computed earlier. The result is a very poor approximation that is way off, most likely because we only used ten randomly generated numbers. Much like earlier, however, we would expect Monte Carlo to perform better with larger samples. The example we have analyzed so far was a very simple one, so simple that we would probably have been better off calculating the integral by hand than writing code. That’s why it’s time to put our crude Monte Carlo to the test with integrals more difficult to compute. Consider the following expression: One might try calculating this integral through substitution or integration by parts, but let’s choose not to for the sake of our mental health. Instead, we can model the integrand in Python and ask Monte Carlo to do the work for us. Concretely, this process might look as follows.",0,0,0,0,1,0,0,0
A sneak peek at Bayesian Inference,"Like this, conditional probability allows us to update our beliefs on uncertainty given new information, and we will see in the later sections that this is the core idea behind Bayesian inference. Let’s return back to the example of the potential patient with a flu. Shortly afterwards at the hospital, the the man was convinced by the doctor and decided to take the clinical test, the result of which was positive. We cannot assume that the man is sick, however, since the test has a rather high rate of false positives as we saw earlier. In this situation, the parameter that is of interest to us can be expressed as In other words, given a positive test result, what is the probability that the man is actually sick? However, we have no means as of yet to directly answer this question; the two pieces of information we have are that , and that . To calculate the value of , we need Bayes’s theorem to do its trick. Let’s quickly derive Bayes’ theorem using the definition of conditional probabilities delineated earlier. Recall that Multiply  and  on both sides of (1) and (2) respectively to obtain the following result: Notice that the two equations describe the same quantity, namely . We can use equivalence to put these two equations together in the following form. Equation (3) can be manipulated in the following manner to finally produce a simple form of Bayes’ theorem: We can motivate a more intricate version this rule by modifying the denominator.",0,0,0,0,1,0,0,1
Fisher Score and Information,"Fisher’s information is an interesting concept that connects many of the dots that we have explored so far: maximum likelihood estimation, gradient, Jacobian, and the Hessian, to name just a few. When I first came across Fisher’s matrix a few months ago, I lacked the mathematical foundation to fully comprehend what it was. I’m still far from reaching that level of knowledge, but I thought I’d take a jab at it nonetheless. After all, I realized that sitting down to write a blog post about some concept forces me to study more, so it is a positive, self-reinforcing cycle. Let’s begin. Fisher’s score function is deeply related to maximum likelihood estimation. In fact, it’s something that we already know–we just haven’t defined it explicitly as Fisher’s score before. First, we begin with the definition of the likelihood function. Assume some dataset  where each observation is identically and independently distributed according to a true underlying distribution parametrized by . Given this probability density function , we can write the likelihood function as follows: While it is sometimes the convention that the likelihood function be denoted as , we opt for an alternative notation to reserve  for the loss function. To continue, we know that the maximum likelihood estimate of the distribution’s parameter is given by This is the standard drill we already know.",0,0,0,0,1,0,0,0
BLEU from scratch,"Although this can sound like a lot, really it’s just putting all the pieces we have discussed so far together. Let’s take a look at the code implementation. The weighting happens in the  part within the generator expression within the  statement. In this case, we apply weighting across  that goes from  to . Now we’re done! Let’s test out our final implementation with  for  from 1 to 4, all weighted equally. The  package offers functions for BLEU calculation by default. For convenience purposes, let’s create a wrapper functions. This wrapping isn’t really necessary, but it abstracts out many of the preprocessing steps, such as applying . This is because the  BLEU calculation function expects tokenized input, whereas  and  are untokenized sentences. And we see that the result matches that derived from our own implementation! In this post, we took a look at BLEU, a very common way of evaluating the fluency of machine translations. Studying the implementation of this metric was a meaningful and interesting process, not only because BLEU itself is widely used, but also because the motivation and intuition behind its construction was easily understandable and came very naturally to me. Each component of BLEU addresses some problem with simpler metrics, such as precision or modified precision. It also takes into account things like abnormally short or repetitive translations. One area of interest for me these days is seq2seq models. Although RNN models have largely given way to transformers, I still think it’s a very interesting architecture worth diving into.",1,0,1,0,0,0,0,0
"Basel, Zeta, and some more Euler","These days, I cannot help but fall in love with Euler’s works. His proofs and discoveries are simple and elegant yet also fundamental and deeply profound, revealing hidden relationships between numbers and theories that were unthought of during his time. I tend to avoid questions like “who was the best  in history” because they most often lead to unproductive discussions that obscure individual achievements amidst meaningless comparisons, but I dare profess here my belief that only a handful of mathematicians can rival Euler in terms of his genius and prolific nature. That is enough Euler for today. I’m pretty sure that this is not going to be the last post on Euler given the sheer amount of work he produced during his lifetime. My exploration of the field of mathematics is somewhat like a random walk, moving from one point to another with no apparent pattern or purpose other than my interest and Google’s search suggestions, but my encounter with Euler will recur continuously throughout this journey for sure. But for now, I’m going to take a brief break from Euler and return back to the topic of good old statistical analysis, specifically Bayesian methods and Monte Carlo methods. Catch you up in the next one!.",0,0,0,0,0,0,1,0
"Basel, Zeta, and some more Euler","In the later segment of his life, Euler found a way to express the zeta function as, you guessed it, an infinite product. This time, however, Euler did not rely on Taylor polynomials. Instead, he employed a more general approach to the problem. It is here that we witness Euler’s clever manipulation of equations again. We commence from the zeta function, whose terms are enumerated below. Much like how we multiply the ratio to a geometric sequence to calculate its sum, we adopt a similar approach by multiplying the second term,  to the entire expression. This operations yields By subtracting this modified zeta function from the original, we derive the following expression below. Now, we only have what might be considered as the odd terms of the original zeta function. We then essentially repeat the operation we have performed so far, by multiplying the expression by  and subtracting the result from the odd-term zeta function. It is not difficult to see that iterating through this process will eventually yield Euler’s product identity for the zeta function. The key to understanding this identity is that only prime numbers will appear as a component of the product identity. We can see this by reminding ourselves of the clockwork behind the sieve of Eratosthenes, which is basically how the elimination and factorization works in the derivation of Euler’s identity. Taking this into account, we can deduce that Euler’s identity will take the following form: This expression is Euler’s infinite product representation of the zeta function.",0,0,0,0,0,0,1,0
Markov Chain and Chutes and Ladders,"This code block produces the following output: The first entry of this array, which is the value , deserves our attention, as it is the eigenvalue which corresponds to the stationary distribution eigenvector. Since the index of this value is , we can identify its eigenvector as follows: Notice that this eigenvector is a representation of a situation in which the player is in the th cell of the game board! In other words, it is telling us that once the user reaches the th cell, they will stay on that cell even after more dice rolls—hence the stationary distribution. On one hand, this information is impractical given that a player who reaches the end goal will not continue the game to go beyond the th cell. On the other hand, it is interesting to see that the eigenvector reveals information about the structure of the Markov chain in this example. Markov chains like these are referred to as absorbing Markov chains because the stationary equilibrium always involves a non-escapable state that “absorbs” all other states. One might visualize this system as having a loop on a network graph, where it is impossible to move onto a different state because of the circular nature of the edge on the node of the absorbing state. At this point, let’s remind ourselves of the end goal. Since we have successfully built a stochastic matrix, all we have to do is to set some initial starting vector  and perform iterative matrix calculations.",0,1,0,0,0,0,0,0
Building Neural Network From Scratch,"Internally, the  function calls the  gradient descent algorithm to update the weights and finally returns the  which contains updated parameters based on the training data. As mentioned above, each  and  are minibatches that will be feeded into our  gradient descent function. Note that the  function is simply an implementation of equation (7). At the core of the  function is the  function, which is our implementation of back propagation. This provides a nice point of transition to the next section. Back propagation is a smart way of calculating gradients. There are obviously many ways one might go about gradient calculation. We can simply imagine there being a loss function that is a function of all the thousands of weights and biases making up our neural network, and calculate partial derivatives for each parameter. However, this naive aproach is problematic because it is so computationally expensive. Moreover, if you think about it for a second, you might realize that doing so would result in duplicate computations due to the chain rule. Take the simple example below. If we were to calculate the gradient of the loss function with respect to  and , all we need to compute is the gradient of , since that of  will naturally be obtained along the way. In other words, computing the gradient simply requires that we start from the very end of the neural network and propagate the gradient values backwards to compute the partial derivatives according to the chain rule.",1,1,1,0,0,0,0,0
Moments in Statistics,"The word “moment” has many meanings. Most commonly, it connotes a slice of time. In the realm of physics, moment refers to the rotational tendency of some object, similar to how torque measures the change in an object’s angular momentum. As statisticians, however, what we are interested in is what moment means in math and statistics. In this post, we will attempt to shed new light on the topic of probability distributions through moment generating functions, or MGF for short. The mathematical definition of moments is actually quite simple. And of course, we can imagine how the list would continue: the th moment of a random variable would be . It is worth noting that the first moment corresponds to the mean of the distribution, . The second moment is related to variance, as . The third moment relates to the symmetry of the distribution, or the lack thereof, a quality which goes by the name of skewness. The fourth moment relates to kurtosis, which is a measure of how heavy the tail of a distribution is. Higher kurtosis corresponds to many outliers, while the converse would signify that the distribution contains little deviations. As you can see, the common theme is that the moment contains information about the defining features of a distribution, which is why it is such a convenient way to present information about a distribution. As the name suggests, MGF is a function that generates the moments of a distribution.",0,0,0,0,1,0,0,1
An Introduction to Markov Chain Monte Carlo,"Finally, here is the post that was promised ages ago: an introduction to Monte Carolo Markov Chains, or MCMC for short. It took a while for me to understand how MCMC models work, not to mention the task of representing and visualizing it via code. To add a bit more to the excuse, I did dabble in some other topics recently, such as machine learning models or information theory, which is also partially why this post was delayed quite a bit. Nevertheless, it’s finally here and ready to go. In this post, we will take a look at the Metropolis-Hastings algorithm, the simplest variant among the family of MCMC models. Let’s see what the Bayesian hype is all about. It’s been a while since we last discussed Bayesian inference, so it’s probably a good idea to start with a brief recap. Bayesian statistics commences from Bayes’ theorem, a seminal statement in probability theory that can be expressed as follows Alternatively, Bayes’ theorem can be stated more generally in the context of some partitioned sample space, For simplicity, I omit the equation for the case involving continuous random variables. Simply put, the summation experssion in the denominator would simply be replaced with that involving integration. The power of the proposition underlying Bayes’s theorem really comes into light when we consider it in the context of Bayesian analysis.",1,0,0,0,0,0,0,0
"Newton-Raphson, Secant, and More","In the example below, we show that using  results in a very similar value (in fact, it is identical in this case, but we need to take into other factors such as numerical stability and overflow which might happen with such high-precision numbers). This result aligns with the earlier observation that center divided difference provides very accurate approximations of the first derivative. Note that the advantage of using  is that we can now apply Newton-Raphson to non-polynomial equations that cannot be formulated in list index representation format. For instance, let’s try something like . To verify that this is indeed correct, we can plug  back into . Also, given that , we can use some heuristics to realize that the answer must be only ever so slightly larger than 1. Notice that the result is extremely close to zero, suggesting that we have found the correct root. Now that we have seen the robustness of the Newton-Raphson method, let’s take a look at another similar numerical method that uses backward divided difference for derivative approximation. In this section, we will look at the secant method, which is another method for identifying the roots of non-linear equations. Before we get into a description of how this method works, here’s a quick graphic, again from Wikipedia, on how the secant method works.  As the name implies, the secant function works by drawing secant lines that cross the function at each iteration.",0,0,0,0,0,0,1,0
Naive Bayes Model From Scratch,"As per convention of this tutorial, the returned dictionary has keys corresponding to each class and values indicating the likelihood that the  belongs to that class. We can see the  function in action by passing a dummy test instance. We are almost done! All that we have to do is to create a funcition that returns the predicted label of a testing instance given some labeled training data. Implemenitng this process is straightforward since we have all the Bayesian ingredients we need, namely the prior and the likelihood. The last step is to connect the dots with Bayes’ theorem by calculating the product of the prior and likelihood for each class, then return the class label with the largest posterior, as illustrated below. Let’s see if the  works as expected by seeing if passing as argument , for which we know that its label is 1, actually returns 1. The function is only able to process a single testing instance. Let’s complete our model construction by writing the  function that takes labeled data and a testing set as its argument to return a  array containing the predicted class labels for each instance in the testing set. Done! Let’s import some data from the  library. The wine set data is a classic multi-class classfication data set.",1,0,0,0,0,1,0,0
Naive Bayes Model From Scratch,"The underlying idea is that, given some data with  feature columns, we can derive a probability distribution for the label for that intance. The naive assumption that the naive Bayes classifier makes—now you can guess where that name comes from—is that each of the  variables in the instance vector are independent of one another. In other words, knowing a value for one of the features does not provide us with any information about the values for the other  feature columns. Combining this assumption of independence with Bayes’ theorem, we can now restate (1) as follows: Pretty straight forward. We know that the demominator, which often goes by the name “evidence” in Bayesian inference, is merely a normalizing factor to ensure that the posterior distribution integrates to 1. So we can discard this piece of information and distill (2) down even farther: Equation (3) tells us that it is possible to calculate the probability of instance  belonging to class  systematically. Why is this important? The simple answer is that we can use (3) to train the naive Bayes classifier. Say we know that for a particular instance , the label is . Then, we have to find the distribution for each feature such that we can maximize . Does this ring any bells? Yes—it is maximum a posteriori estimation! In other words, our goal would be to maximize the posterior distribution for each training instance so that we can eventually build a model that would output the most likely label that the testing instance belongs to.",1,0,0,0,0,1,0,0
Building Neural Network From Scratch,"Instead of using hand-made dummy data as I had done in some previous posts, I decided to use the  library to generate random data points. This approach makes a lot more sense given that neural networks require a lot more input data than do machine learning models. In this particular instance, we will use the  function to accomplish this task. Let’s take a look at what our data looks like. As expected, the dataset contains the  and  coordinates of the points generated by the  function. If you haven’t heard about this function before, you might be wondering what all the moons deal is about. Well, if we plot the data points, it will become a lot more obvious.  As you can see, the generated points belong to either one of two classes, and together, each class of points seem to form some sort of moon-like shape. Our goal will be to build a neural network that is capable of determining whether a given point belongs to class 0 or class 1. In other words, this is a classic example of a binary classification problem. It is standard practice in any classification problem to convert class labels into one-hot encodeded vectors. The reason why this preprocessing is necessary is that the class number is merely a label that does not carry any meaning. Assume a simple classification problem with 3 labels: 0, 1, and 2.",1,1,1,0,0,0,0,0
"Beta, Bayes, and Multi-armed Bandits","Having a uniform prior only makes sense on the very first try, when there is no historical data to estimate the parameter from. However, once we start pulling the lever and seeing the results of each consecutive pull, we should be able to build some prior expectation as to what the true value of the parameter is. This suggests that the uniform prior approach is missing some important key pieces. To really drive this point home, let’s discuss more about the notion of conjugate priors, specifically in the context of the Beta and binomial distributions. The notion of conjugate priors is something that recurs extremely often in Bayesian analysis. This is mainly because conjugate priors offer a nice closed-form solution to posterior distribution computation. Simply put, a conjugate prior to some likelihood function is a type of prior that, when multiplied with a given likelihood, produces a posterior distribution that is of the same form as itself. For example, a Beta prior, when multiplied with a binomial likelihood, produces a Beta posterior. This is what we want in Bayesian analysis, since we can now assume that posterior to be our new prior in the next iteration of experiments. In this section, we will build on top of this high level understanding of conjugacy to show that a Beta distribution is indeed a conjugate prior to the binomial likelihood function. On that end, let’s start with a quick definition review of the Beta distribution and the Beta function.",0,0,0,0,1,0,0,1
The Gibbs Sampler,"So at this point, we have now empirically checked that Gibbs sampling indeed works: even if we can’t directly sample from the distribution, if we have access to conditional distributions, we can still achieve an asymptotically similar result. Now comes the mathematics portion of deriving the conditional distribution of a multivariate Gaussian, as promised earlier. In this section, we will derive an expression for the conditional distribution of the multivariate Gaussian. This isn’t really relevant to the Gibbs sampling algorithm itself, since the sampler can be used in non-Gaussian contexts as long as we have access to conditional distributions. Nonetheless, deriving this is a good mental exercise that merits some discussion. Just for the sake of quick review, let’s briefly revisit the familiar definition of a conditional probability: In the context of random vectors, we can rewrite this as Of course, if  and  are scalars, we go back to the familiar bivariate context of our example. In short, deriving the expression for the conditional distribution simply amounts to simplifying the fraction whose denominator is the marginal distribution and the numerator is the joint distribution. Let’s clarify the setup and notation first. We define a -dimensional random vector that follows a multivariate Gaussian distribution, namely . This vector, denoted as , can be split into a -dimensional vector  and -dimensional vector  in the following fashion: It is apparent that . Similarly, we can split up the covariance matrix  in the following fashion where , , . Also, given the symmetric property of the covariance matrix, .",0,1,0,0,1,0,0,0
Naive Bayes Model From Scratch,"Welcome to part three of the “from scratch” series where we implement machine learning models from the ground up. The model we will implement today, called the naive Bayes classifier, is an interesting model that nicely builds on top of the Bayesian mindset we developed in the previous post on Markov Chain Monte Carlo. Much like the logistic regression model, naive Bayes can be used to solve classification tasks, as opposed to regression in which case the goal is to predict a continuous variable. The main difference between logistic regression and naive Bayes is that naive Bayes is built on a probabilistic model instead of an optimization model such as graident descent. Hence, implementing naive Bayes is somewhat easier from a programming point of view. Enough of the prologue, let’s cut to the chase. To understand naive Bayes, we need not look further than Bayes’s theorem, which is probably the single most referenced theorem on this blog so far. I won’t explain this much since we have already seen it so many times, but presented below is the familar formula for reference and readability’s sake. Very standard, perhaps with the exception of some minor notation. Here,  refers to a single instance, represented as a vector with  entries; , the corresponding label or class for that instance. Note that  is not a feature matrix, but a single instance. More concretely, Of course,  is just a scalar value. This characterization is very apt in the context of machine learning.",1,0,0,0,0,1,0,0
Gaussian Process Regression,"Here, we modify (9) to have an added parameter, , which is a multiplicative constant to the exponent. The  function simply uses double iteration to fill each entry of the covariance matrix. Note that  and  do not have to be identical in length; if their lengths are different, the resulting kernel matrix will simply be rectangular. This is expected given that the components of , namely  in (19), will never be square unless the number of test and training points are equal. Now let’s generate some dummy data. In theory, the final function sampled through GP is considered an infinite dimensional vector, but for practical reasons of implementation, the vector in this case will be at most 60 dimensions: ten training points and 50 test points, appended together as one vector. Next, let’s build the kernel with the test points and draw random samples to see what our prior looks like. Recall that sampling can be easily achieved by performing the Cholesky decomposition on the kernel. Let’s plot the ten random samples drawn from the prior. Note that at this point, we have not seen any training data at all. The only stricture imposed on GP vis a vis the kernel is the fact that the function must be smooth, i.e. points that are close to each other in must be highly correlated.  Indeed, the sampled data seems to present somewhat smooth curves, although the smoothness is somewhat mitigated by the fact that the model are only vectors of 50 dimensions.",1,0,0,0,0,1,0,0
The Exponential Family,"Although this is by no means a rigorous proof, we see not only the evident fact that the exponential distribution indeed belongs to the exponential family, but also that the factorization formula in (3) isn’t just a complete soup of equations and variables. We can do the same for the Bernoulli distribution, which also falls under the exponential family. The formula for the Bernoulli distribution goes as follows: Again, I have added a very simple indicator function to ensure that the the probability mass function is well-defined across the entire real number line. Again, the indicator function is a simple boolean gate function that checks whether  is an element within a set of zero and one: Factorizing the Bernoulli is slightly more difficult than doing the same for the exponential distribution, largely because it is not apparent from (9) how factorization can be achieved. For example, we do not see any exponential term embedded in (9) as we did in the case of the exponential distributions. Therefore, a simple one-to-one correspondence cannot be identified. The trick to get around this problem is to introduce a log transformation, then reapplying an exponential. In other words, By applying this manipulation, we can artificially create an exponential term to more easily coerce (9) into the factorization mold. Specifically, observe that the power of the exponent can be expressed as a dot product between two vectors, each parameterized by  and  , respectively.",0,0,0,0,1,0,0,1
PyTorch Tensor Basics,"As someone who prefers a more opinionated guideline, this was rather confusing at first. However, here is what I have gathered while sifting through Stack Overflow and PyTorch discussion forums. Let’s first start with a dummy random tensor. (Note that I could have done , as per the conclusion from the section above.) The  operation returns a new tensor whose dimensions match those that have been passed into the function as arguments. For example, the snippet below shows how we can reshape  into a  tensor. One very important detail, however, is that this operation is not in-place. In other words, if we check the size of  again, you will realize that it is still a  tensor, as was originally initialized. To change  itself, we could do Or even better, we can use , which is an in-place operation by design. Notice that, unlike when we called ,  changes the tensor itself, in-place. In older versions of PyTorch,  existed as a non in-place operator. However, in newer versions of PyTorch, this is no longer the case, and PyTorch will complain with an informative deprecation error message. Note that  is not an in-place operator, meaning its behavior will largely be identical to that of . PyTorch keeps an internal convention when it comes to differentiating between in-place and copy operations. Namely, functions that end with a  are in-place operators. For example, one can add a number to a tensor in-place via , as opposed to the normal , which does not happen in-place.",0,0,1,0,0,0,0,0
Dissecting the Gaussian Distribution,"The biggest difference between correlation and covariance is that correlation is bounded between -1 and 1, whereas covariance is unbounded. The bottom line is that both correlation and covariance measure the strength of linearity between two variables, with correlation being a normalized version of covariance. At this point in time, one might point out that covariance is not really a multivariate concept since it is defined for only two variables, not three or more. Indeed, the expression  is mathematically incoherent. However, covariance can be  a multivariate metric since we can express the covariance of any pairs of random variables by constructing what is called the covariance matrix. Simply put, the covariance matrix is a matrix whose elements are the pairwise covariance of two random variables in a random vector. Before we get into the explanation, let’s take a look at the equation for the covariance matrix: where  and . This is the matrix analogue of the expression which is an alternate definition of variance. It is natural to wonder why we replaced the squared expression with  instead of  as we did earlier with the term in the exponent. The simplest answer that covariance is expressed as a matrix, not a scalar value. By dimensionality,  produces a single scalar value, whereas  creates a matrix of rank one.",0,0,0,0,1,0,0,1
An Introduction to Markov Chain Monte Carlo,"But before we move into code, there is something that should be corrected before we move on. In (6), we derived an experssion for the jump condition. The jump condition is not wrong per se, yet a slight modification has to be made to fully capture the gist of Metrapolis-Hastings. The precise jump condition for the sampler goes as follows: where This simply means that we accept the prorposed pararmeter if the quantity calculated in (7) is larger than a random number between 0 and 1 sampled from a uniform distribution. This is why MCMC models involve a form of random walk—while leaving room for somewhat unlikely parameters to be selected, the model samples relatively more from regions of high posterior probability. Now that we have some understanding of how Markov Chain Monte Carlo and the Metropolis-Hastings algorithm, let’s implement the MCMC sampler in Python. As per convention, listed below are the dependencies required for this demonstration. Let’s start by generating some toy data for our analysis. It’s always a good idea to plot the data to get a sense of its shape.  The data looks roughly normal. This is because we created the toy data using the  function, which generates random numbers from a normal distribution centered around 0. The task for this tutorial, given this data, is going to be estimating the mean of the posterior distribution, assuming we know its standard deviation to be 1.",1,0,0,0,0,0,0,0
"Newton-Raphson, Secant, and More","Below is a Python variant of the backward divided difference formula. Some tweaks have been made to the formula for use in the section that follows, but at its core, it’s clear that the function uses the approximation logic we’ve discussed so far. Another variant of the forward and backward divided difference formula is the center divided difference. By now, you might have some intuition as to what this formula is—as the name implies, we somehow use the center point, instead of going forward or backwards from the point of approximation. Here is the formula: Heuristically, this formula also makes sense. We can imagine going both a step forward and backward, then dividing the results by the total of two steps we’ve taken, one in each direction. Shown below is the Python implementation of the center divided difference formula. According to conventional mathematical wisdom, the center divided method normally provides a more robust way of approximating first order derivatives. In this subsection, we discuss why this is the case. Using Taylor expansion, we can approximate the value of  as follows, given that  goes to 0 under the limit. Notice that we can manipulate (4) to derive the forward divided difference equation in (1). If we move the  term to the LHS, then divide both sides by , we end up with Here, we used big-O notation to denote the order of magnitude of the trailing terms. The trailing terms are significant since they are directly related to the accuracy of our approximation.",0,0,0,0,0,0,1,0
Maximum A Posteriori Estimation,"This can be seen by simply interpreting the posterior from a conditional probability point of view: the posterior denotes the probability of the value of the model parameter is  given data . Put differently, the value of  that maximizes the posterior is the optimal parameter value that best explains the sample observations. This is why at its heart, MAP is not so much different from MLE: although MLE is frequentist while MAP is Bayesian, the underlying objective of the two methods are fundamentally identical. And indeed, this similarity can also be seen through math. And we see that (5) is almost identical to (3), the formula for MLE! The only part where (5) differs is the inclusion of an additional term in the end, the log prior. What does this difference intuitively mean? Simply put, if we specify a prior distribution for the model parameter, the likelihood is no longer just determined by the likelihood of each data point, but also weighted by the specified prior. Consider the prior as an additional “constraint”, construed in a loose sense. The optimal parameter not only has to conform to the given data, but also not deviate too much from the established prior. To get a more intuitive hold of the role that a Bayesian prior plays in MAP, let’s assume the simplest, most uninformative prior we can consider: the uniform distribution. A uniform prior conveys zero beliefs about the distribution of the parameter, i.e. all values of  are equally probable.",0,0,0,0,1,0,0,0
"Newton-Raphson, Secant, and More","The  is a function that returns a Python function given a list that conforms to this list index representation. Let’s see if this works as expected. , so the function passes our quick sanity test. One useful helper function that I also implemented for the sake of convenience is a array-to-equation parser that translates a list representation into a mathematical expression in Python. This is best demonstrated than explained, so I’ll defer myself to an example. Below is the full definition of the  function. At this point, I also thought that it would be useful and interesting to compose a function that translates the string output of  into a proper Python function we can use to calculate values. Below is the  function that receives as input some parsed output string and returns a corresponding Python function. Now, we can do something like this: Now that we have more than enough tools we can use relating to the list index representation we decided to use to represent polynomials, it’s time to exploit the convenience that this representation affords us to calculate derivatives. Calculating derivatives using the list index representation is extremely easy and convenient: in fact, it can be achieved in just a single line. Let’s test this function with the  example we have been using previously. Let’s also use the  function to make the final result for human-readable. Seems like the derivative calculation works as expected.",0,0,0,0,0,0,1,0
Revisiting Basel with Fourier,"Notice that now we have a geometric series, which means that now we can also express this integral as Like this, there are countless ways of using integrals to express the Basel problem. This representation, in particular, could be understood as an integral over a unit square in the cartesian coordinate over a bivariate function, . In this post, we took a look at a new way of approaching the Basel problem using Fourier expansion. We also looked at some interesting integral representations of the Basel problem. While a lot of this is just simple calculus and algebra, I nonetheless find it fascinating how the Basel problem can be approached from so many different angles—hence my renewed respect for Euler and other mathematicians who wrestled with this problem hundreds of years ago. As simple as it appears, there are so many different techniques and modes of analysis we can use to approach the problem. It was nice exercise and review of some calculus techniques. I’ve been digging more into the curious interchange of integral and summation recently, and when this operation is allowed, if at all. Turns out that this problem is slightly more complicated than it appears and requires some understanding of measure theory, which I had tried getting into a few months ago without much fruition. Hopefully this time, I’ll be able to figure something out, or at the very least gain some intuition on this operation. I hope you’ve enjoyed reading this post. Catch you up in the next one.",0,0,0,0,0,0,1,0
Demystifying Entropy (And More),"Because we were dealing with a very simple example of biased coins, entropy values we calculated did not go past 1 bits, but we can easily imagine situations were it might, such as a dice roll or more complicated real-life examples. In this light, entropy is one metric with which we can quantify randomness, which is the mission we set out to accomplish in this post. But entropy is a lot more than just an interesting concept on randomness. Entropy has wide ranging applications, especially in the field of machine learning and neural networks. Among these, we will be looking at cross entropy and Kullback-Leibler divergence, two derivative concepts of entropy that are arguably most commonly used. Let’s start with the big picture first—when these concepts are used, what is the relationship between the two, why they are important—and move onto the details later. First, we have to know that cross entropy, unlike just entropy, deals with two probability distributions instead of one. Specifically, cross entropy is a way of measuring the pseudo-distance between two probability distributions. In a typical scenario, we might have a true probability distribution  that we are trying to model, and our deep learning algorithm might produce some approximate probability distribution . We might evaluate the effectiveness of our model by calculating the distance between  and . Seen in this light, cross entropy can be interpreted as a target cost function to be minimized. Here is the equation that explains the relationship between entropy, cross entropy, and KL divergence.",0,0,0,0,1,0,0,0
Scikit-learn Pipelines with Titanic,"Sometimes, weakly correlated features can be combined together to form a new feature, which might exhibit higher correlation with respect to the target. We can combine  and  into a new feature, called . Strictly speaking, we would have to add 1, but adding all values by one corresponds to shifting everything by a constant value, which will not affect modeling since such constant adjustments will be taken care of by the preprocessing step anyway. Note that feature engineering is also applied to both the training and test set simultaneously. We have created two new features, namely  and . Let’s go ahead and perform feature engineering on the  column as well to squeeze out more information. Now we have some data that seems a lot more workable. However, we still have a problem with the  column: It seems like there are many titles, so we should probably perform some binning or grouping. For men, the most common title is ; for women,  and . Let’s see if there is a difference in the survival rate between the two most common title for females It seems like the the difference is insignificant, so we will simply group them together in one. Imputation refers to a technique used to replace missing values. There are many techniques we can use for imputation. From the analysis above, we know that the columns that require imputation are as follows: Let’s first take a look at the data types for each column.",0,0,0,0,0,1,0,0
So What are Autoencoders?,"For experimental puposes, I tried using the  callback on Google Colab.  is a platform that gives developers full view of what happens during and after the training process. It makes observing metrics like loss and accuracy a breeze. I highly recommend that you check out this tutorial on how to use and configure this functionality on your notebook. Now that the training is over, what can we do with this autoencoder? Well, let’s see if the autoencoder is now capable of removing noise from tainted image files. But before we jump right into that, let’s first build a simple function that displays images for our convenience. Using the  function, we can now display 25 test images that we will feed into the autoencoder.  Let’s add noise to the data.  Finally, the time has come! The autoencoder will try to “denoise” the contaminated images. Let’s see if it does a good job.  Lo and behold, the autoencoder produces pristine images, almost reverting them back to their original state! I find autoencoders interesting for two reasons. First, they can be used to compress images into lower dimensions. Our original image was of size 28-by-28, summing up to a total of 784 pixels. Somehow, the autoencoder finds ways to decompress this image into vectors living in the predefined 128 dimensions. This is interesting in and of itself, since it presents ways that we might be able to compress large files with minimal loss of information.",0,0,1,1,0,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"The children of one parent will not all have identical genes: due to mutation, which occurs by chance, some will acquire even more superior features that puts them far ahead of their peers. Needless to say, such beneficiaries of positive mutation will survive and leave offspring, carrying onto the next generation. Those who experience adversarial mutation, on the other hand, will not be able to survive. In genetic algorithm engineering, we want to be able to simulate this process over an extended period of time without hard-coding our solution, such that the end result after hundred or thousands of generations will contain the optimal solution. Of course, we can’t let the computer do everything: we still have to implement mutational procedures that define an evolutionary process. But more on that later. First, let’s begin with the simple task of building a way of modeling a population. First, let’s define a class to represent the population. I decided to go with a class-based implementation to attach pieces of information about a specific generation of population to that class object. Specifically, we can have things like  to represent the full population,  to represent th chosen, selected superior few,  to store the score of the best chromosome in the population,  to store the best chromosome itself, and , the adjacency matrix that we will be using to calculate the distance in the context of TSP. Here is a little snippet of code that we will be using to randomly generate the first generation of population.",1,0,0,0,0,0,0,0
"Linear Regression, in Two Ways","We can further break this expression down by taking note of the fact that the norm of a vector can be expressed as a product of the vector and its transpose, and that  as established in the previous section of this post. Putting these together, Using distribution, we can simplify the above expression as follows: It’s time to take the gradient of the error function, the matrix calculus analogue of taking the derivative. Now is precisely the time when the propositions (4) and (5) we explored earlier will come in handy. In fact, observe that first term in (6) corresponds to case (5); the second term, case (4). The last term can be ignored because it is a scalar term composed of , which means that it will not impact the calculation of the gradient, much like how constants are eliminated during derivation in single-variable calculus. Now, all we have to do is to set the expression above to zero, just like we would do in single variable calculus with some optimization problem. There might be those of you wondering how we can be certain that setting this expression to zero would yield the minimum instead of the maximum. Answering this question requires a bit more math beyond what we have covered here, but to provide a short preview, it turns out that our error function, defined as  is a positive definite matrix, which guarantees that the critical point we find by calculating the gradient gives us a minimum instead of a maximum.",0,1,0,0,0,0,0,0
Introduction to tf-idf,"In creating tf vectors for each document, we will be referencing the word-to-index mapping in our corpus. Let’s see what we get for the four documents in our dummy example. Due to floating point arithmetic, the decimals don’t look the most pleasing to the eye, but it’s clear that normalization has been performed as expected. Also note that we get 4 vectors of length 9 each, as expected. Next, it’s time to implement the idf portion of the vectorization process. In order to calculate idf, we first need a total count of each number in the entire document collection. A module that is perfect for this job is , which accepts as input an iterable and outputs a dictionary-like object whose values represent the count of each key. Let’s test in on our dummy dataset to see if we get the count of each tokenized word. This is precisely what we need to calculate idf. Recall the formula for calculating idf As noted earlier, the intuition behind idf was that important keywords probably appear only in specific relevant documents, whereas generic words of comparatively lesser importance appear throughout all documents. We transcribe (4) into code as follows: Now, we have the idf vectors for the nine terms in the dummy dataset. At this point, all there is left to do is to multiply the term frequencies with their corresponding idf scores. This is extremely easy, since we are essentially performing a dot product of the tf and idf vectors for each document.",1,0,0,0,0,0,0,0
Gamma and Zeta,"At any rate, it’s both interesting and yet also unsurprising to see that these two functions are brainchildren of Gauss and Euler, two names that arguably appear the most in the world of math. The Riemann zeta function is perhaps one of the most famous functions in the world of analysis. It is also sometimes referred to as the Euler-Riemann zeta function, but at this point, prefixing something with “Euler” loses significance since just about everything in mathematics seems to have some Euler prefix in front of it. The Riemann zeta function takes the following form: But this definition, as simple and intuitive as it is, seems to erroneously suggest that the Riemann zeta function is only defined over non-negative integers. This is certainly not the case. In fact, the reason why the Riemann zeta function is so widely studied in mathematics is that its domain ranges over the complex number plane. While we won’t be discussing the complexity of the Riemann zeta function in this regard (no pun intended), it is nonetheless important to consider about how we might calculate, say, . This is where the Gamma function comes in. As hinted earlier, an alternative definition of the Riemann zeta function can be constructed using the Gamma function that takes the Riemann zeta beyond the obvious realm of integers and into the real domain. We first start with a simple change of variables. Specifically, we can substitute  for .",0,0,0,0,0,0,1,0
Principal Component Analysis,"I used Ian Goodfellow’s Deep Learning and a lecture slide from Columbia references for this post. The setup of a classic PCA problem might be summarized as follows. Suppose we have a dataset of  points, each living in -dimensional space. In other words, 
where Our goal is to find a way to compress the data into lower dimensional space  where . We might imagine this as a transformation, i.e. the objective is to find a transformation So that applying  will yield a new vector  living in lower dimensional space. We can also imagine there being a reverse transformation or a decoding function  that achieves Because PCA is in essence a linear transformation, it is most natural to express and understand it as a matrix. Let’s define this transformation as , and the matrix corresponding to the decoding . In other words, PCA makes a number of assumptions to simplify this problem. The most important assumption is that each column of  is orthogonal to each other. As we will see later in an alternate derivation with statistics, this has to do with the notion of covariance. Another restriction is that the columns of  must have a Euclidean norm of one. This constraint is necessary for us to find a unique matrix  that achieves compression—otherwise, we could have any multiples, leading to an infinite number of such matrices. We make one more convenient assumption about the given data points, . That is,  is assumed to have a mean of zero, i.e. .",0,1,0,0,1,0,0,0
Fisher Score and Information,"The next step, as we all know, is to take the derivative of the term in the argument maxima, set it equal to zero, and voila! We have found the maximum likelihood estimate of the parameter. A quick aside that may become later is the fact that maximizing the likelihood amounts to minimizing the loss function. Now here comes the definition of Fisher’s score function, which really is nothing more than what we’ve done above: it’s just the gradient of the log likelihood function. In other words, we have already been implicitly using Fisher’s score to find the maximum of the likelihood function all along, just without explicitly using the term. Fisher’s score is simply the gradient or the derivative of the log likelihood function, which means that setting the score equal to zero gives us the maximum likelihood estimate of the parameter. An important characteristic to note about Fisher’s score is the fact that the score evaluated the true value of the parameter equals zero. Concretely, this means that given a true parameter , This might seem deceptively obvious: after all, the whole point of Fisher’s score and maximum likelihood estimation is to find a parameter value that would set the gradient equal to zero. This is exactly what I had thought, but there are subtle intricacies taking place here that deserves our attention. So let’s hash out exactly why the expectation of the score with respect to the true underlying distribution is zero.",0,0,0,0,1,0,0,0
Dissecting the Gaussian Distribution,"We can also see why (9) is coherent by unpacking the expected values expression as shown below: Using the linearity of expectation, we can rewrite the equation as Therefore, we end up with which almost exactly parallels the definition of variance, which we might recall is where . The key takeaway is that the covariance matrix constructed from the random vector  is the multivariable analogue of variance, which is a function of the random variable . To gain a better idea of what the covariance matrix actually looks like, however, it is necessary to review its structure element-by-element. Here is the brief sketch of the -by- covariance matrix. This might seem complicated, but using the definition of covariance in (8), we can simplify the expression as: Note that the covariance matrix is a symmetric matrix since . More specifically, the covariance matrix is a positive semi-definite matrix. This flows from the definition of positive semi-definiteness. Let  be some arbitrary non-zero vector. Then, You might be wondering how (9) ends up as (10). Although this relationship may not be immediately apparent, that the two expressions are identical can be seen by setting the random vector as and performing basic matrix vector multiplication operations. For the sake of brevity, this is left as an exercise for the reader. We now have all the pieces we need to complete the puzzle. Recall that we were trying to derive the probability density function of the multivariate Gaussian by building on top of the formula for the univariate Gaussian distribution.",0,0,0,0,1,0,0,1
Introduction to tf-idf,"The motivation behind tf-idf commences from a simple question: how do we determine the semantic importance of a word in a set of documents? On one hand, words the appear a lot are probably worth paying attention to. For example, in one of my posts on Gaussian distributions, the word “Gaussian” probably appears many times throughout the post. A keyword probably appears frequently in the document; hence the need to calculate tf. On the other hand, there might be words that appear a lot, but aren’t really that important at all. For example, consider the word “denote.” I know that I use this word a lot before writing down equations or formulas, just for the sake of notational clarity. However, the word itself carries little information on what the post is about. The same goes for other words, such as “example,” “however,” and so on. So term frequency only doesn’t really tell us much; instead, we want to pay attention to words that occur frequently in a given document, but doesn’t appear a lot in others—such words are most likely to be unique keywords that potentially capture the gist of that document. Given this analysis, it isn’t difficult to see why tf-idf is designed the way it is. Although we give priority weight to words with high term frequency, we discount words that appear frequently across all documents by dividing tf by idf, or inverse document frequency.",1,0,0,0,0,0,0,0
PyTorch RNN from Scratch,"In PyTorch, RNN layers expect the input tensor to be of size . Since every name is going to have a different length, we don’t batch the inputs for simplicity purposes and simply use each input as a single batch. For a more detailed discussion, check out this forum discussion. Let’s quickly verify the output of the  function with a dummy input. Now we need to build a our dataset with all the preprocessing steps. Let’s collect all the decoded and converted tensors in a list, with accompanying labels. The labels can be obtained easily from the file name, for example . We could wrap this in a PyTorch  class, but for simplicity sake let’s just use a good old  loop to feed this data into our model. Since we are dealing with normal lists, we can easily use ’s  to separate the training data from the testing data. Let’s see how many training and testing data we have. Note that we used a  of 0.1. We will be building two models: a simple RNN, which is going to be built from scratch, and a GRU-based model using PyTorch’s layers. Now we can build our model. This is a very simple RNN that takes a single character tensor representation as input and produces some prediction and a hidden state, which can be used in the next iteration. Notice that it is just some fully connected layers with a sigmoid non-linearity applied during the hidden state computation. We call  at the start of every new batch.",1,0,1,0,0,0,0,0
Introduction to tf-idf,"Although I’ve been able to automate some portion of the blog workflow, there’s always been a challenging part that I wanted to further automate myself using deep learning: automatic tagging and categorization. Every post requires some form of YAML front matter, containing information such as the title, tag, and category of the blog post to be uploaded. Although I sometimes create new tags or categories if existing ones seem unfit, I only deal with a limited number of topics on this blog, which is why I’ve always thought that some form of supervised learning be able to automate the process by at least generating some possible tags for me. I’m currently in the process of preparing the data (my previous blog posts) and building a simple NLP document classification model for the job. However, NLP is a field that I’m admittedly not well-acquainted with, not to mention the fact that I’ve not bee posting a lot about deep learning implementations for a while now. So in today’s short post, I decided to write about tf-idf vectorization, which is a very simple yet powerful technique that is often used in routine tasks like document classification, where SOTA models aren’t really required. As always, this post is going to take a hands-on approach by demonstrating a simple way of implementing tf-idf vectorization from scratch. Let’s get started. tf-idf stands for term frequency-inverse document frequency.",1,0,0,0,0,0,0,0
Recommendation Algorithm with SVD,"Perhaps we should scale this in terms of relative distances or plot it on a three dimensional space, which is exactly what we are going to in a moment. Before we jump into visualizations, however, let’s deal with the elephant in the room first: is it okay to simply chop off a few dimensions to reduce a high dimensional image to fit into three-dimensional space? To answer this question, let’s check the  matrix for this particular instance of singular value decomposition. Note that we already have the first three values of  in our hands given that  in our instantiation of singular value decomposition. The information we lose pertains to the last two values, given by  and . These values are smaller in order of magnitude compared to, for instance, the largest value of , which is . This supports the idea that the information we lose amid dimensionality reduction is minimal. Alternatively, we can also see this by taking a look at the full, unreduced version of the matrix  or . For example, the code snippet below displays the full version of the factor . It is not difficult to see that the last few columns of  contain values so small that their contribution to data is going to be minimal at best. This is not the most mathematical way of presenting the concept of data—doing so would require us to take a look at other metrics such as covariance—but this basic analysis will suffice for our purposes for now.",1,1,0,0,0,0,0,0
Dissecting the Gaussian Distribution,"If we put the pieces of the puzzle back together, we finally have the probability distribution of the multivariate Gaussian distribution: To develop a better intuition for the multivariate Gaussian, let’s take a look at a case of a simple 2-dimensional Gaussian random vector with a diagonal covariance matrix. This example was borrowed from this source. Using the formula for the multivariate Gaussian we derived in (11), we can construct the probability distribution function given , , and . Note that computing , the inverse of the covariance matrix, can be accomplished simply by taking the reciprocal of its diagonal entries since  was assumed to be a diagonal matrix. Continuing, In other words, the probability distribution of seeing a random vector  given  and  is equal to the product of the two univariate Gaussians. This result is what we would expect given that . For instance, if  and  are independent, i.e. observing a value of  does not inform us of anything about  and vice versa, it would make sense that the possibility of observing a random vector  with entries  and  is merely the product of the independent probabilities of each observing  and . This example illustrates the intuitive link between the multivariate and univariate Gaussian distributions. In this post, we took a look at the normal distribution from the perspective of probability distributions. By working from the definition of what constitutes a normal data set, we were able to completely build the probability density function from scratch.",0,0,0,0,1,0,0,1
Dissecting LSTMs,"To make things easier, let’s make a quick substitution with an intermediate variable, i.e. let . Then, But  was just an intermediate variable. How can we get the gradient for  itself? Well, since the only transformation was just a , chain rule tells us that all we need is to multiply the antiderivative of , which we already derived above. Also keep in mind that since  is a recurrent variable, we have to apply the gradient from the next call as well, just like . Note that all we had to do is to multiply the  function we derived above, then add the backpropgation from the next iteration to account for the recurrent nature of the network. We still have a decent amount of work to do, but the fortunate news is that once we derive an expression for one parameter, the rest can also be obtained in an identical fashion. Therefore, for the sake of demonstration, we will only deal with  and . Let’s start with the easier of the two, . Recall that As we have done earlier, let’s introduce an intermediate variable, , and try deriving the gradient for that variable. Note that with this substitution, . Now we can move onto deriving the expressions for the gradient of the actual parameters, starting with . This is extremely simple since  and  are defined by a linear relationship. The next in line is . This is also very simple, since all we need to do is to consider one instance of matrix multiplication.",0,0,1,0,0,0,0,0
"Basel, Zeta, and some more Euler","In hindsight, solving the Basel problem is not rocket science; it is a mere application of the Taylor polynomial, coupled with some modifications and operations to mold the problem into a specific form. However, it takes extreme clairvoyance to see the link between the Basel problem and the Taylor polynomial of the sine function. At this point, it doesn’t even surprise us to know that Euler applied this line of thinking to calculate the value of the sum of higher order inverses. An interesting corollary of Euler’s solution to the Basel problem is the Wallis product, which is a representation of the quantity  as an infinite product, as shown below: It seems mathematically unintuitive to say that an irrational number such as  can be expressed as a product of fractions, which is a way of representing rational numbers. However, we can verify the soundness of the Wallis product by substituting  for  in (1): Taking the reciprocal of this entire expression reveals the Wallis product. The Basel problem is a specific case of the Riemann zeta function, whose general form can be written as follows. A small digression: when , the zeta function converges to a value known as Apéry’s constant, eponymously named after the French mathematician who proved its irrationality in the late 20th century. Beyond the field of analytics and pure math, the zeta function is widely applied in fields such as physics and statistics. Perhaps we will explore these topics in the future. So back to the zeta function.",0,0,0,0,0,0,1,0
Recommendation Algorithm with SVD,"An impotant observation to make is that, as we have noted earlier, User 6 and User 8 have rows that are identical. While this should not be a surprise given that the two users had what seemed to be an identical taste in movies, it is still interesting to see how SVD is able to extract this information and display it onto a new axis. Next, let’s see what  looks like. Shown above is the transpose of , which means that  is just really . What’s important here is that the five movies have also been reduced to three dimensions. We don’t really know what the columns of this matrix means; all we know is that it is some distillation and amalgamation of information about the ten users on some unknown axis. At any rate, the previous ten dimensional vectors have now been reduced to three dimensions, which is great news for us—as three dimensional beings, it’s always easier to visualize and deal with three dimensions or less than 10D. Movie 2 and Movie 3 do not look as similar as they did before on the ratings matrix. However, perhaps this is due to the fact that all entries of this matrix have pretty small values, and it is difficult to see how the difference between Movie 2 and 3 compares to, say, the distance between Movies 1 and 4.",1,1,0,0,0,0,0,0
Logistic Regression Model from Scratch,"The data we will be looking at is the banknote authentification data set, publicly available on the UCI Machine Learning Repository. This data set contains 1372 observations of bank notes, classified as either authentic or counterfeit. The five features columns of this data set are: Let’s use some modules to import this data set onto our notebook, as shown below. The imported data set was slightly modified in two ways to fit our model. First, I separated the class label data from the data set and stored it as a separate  array. Second, I appended s to each observation to create a new column that accounts for intercept approximation. All this means is that we consider our linear model to be where for all available sample observations. This is something that we have been assuming all along throughout the gradient descent derivation process, but had not been stated explicitly to reduce confusion. Just consider it a strategic choice on our part to simplify the model while allowing for the logistic regression model to consider bias. Let’s check the shape of the imported data set to check that the data has been partitioned correctly. Now, it’s time to split the data into training and testing data. To do this, I recycled a function we built earlier in the previous post on k-nearest neighbors algorithm. Using , we can partition the data set into training and testing data. Let’s make 20 percent of observations as testing data and allocate the rest for training.",1,0,0,0,0,1,0,0
My First GAN,"Now that we have an idea of what the function accomplishes, let’s use it to start training. The  seems to fluctuate a bit, which is not necessarily a good sign but also quite a common phenomenon in GAN training. GANs are notoriously difficult to train, since it requires balancing the performance of the generator and the discriminator in such a way that one does not overpower the other. This is referred to as a min-max game in game theory terms, and finding an equilibrium in such structures are known to be difficult. Let’s take a look at the results now that the iterations are over.  The created images are admittedly fuzzy, pixelated, and some even somewhat alien-looking. This point notwithstanding, I find it incredibly fascinating to see that at least some generated images actually resemble ships in the sea. Of particular interest to me are the red ships that appear in  and . Given the simplicity of the structure of our network, I would say that this is a successful result. Let’s take a look at the learning curve of the GAN.  As you might expect, the loss is very spiky and erratic. This is why it is hard to determine when to stop training a GAN. Of course, there are obvious signs of failure: when the loss of one component starts to get exponentially larger or smaller than its competitor, for instance. However, this did not happen here, so I let the training continue until the specified number of interactions were over.",0,0,1,1,0,0,0,0
"PyTorch, From Data to Modeling","Since this is a very simple CNN, you will see that there is nothing exciting going on; we are simply getting the output of the previous layer and passing that as input into the next. After going through some convolutions and fully connected layers, we can return the result. There are one caveats worth mentioning here, which is the use of . There is a  that I could have easily used, and indeed there is an entire discussion on the PyTorch forum on the difference between the two. The bottom line is that they are pretty similar for our purposes. The most salient difference between the two is that the functional approach cannot be used when declaring a sequential model. However, since we are defining a custom forward function, this limitation does not apply. Personally, I prefer the functional because it means that there is one less layer to declare in the initialization function. However, it’s probably better to err on the side of the  if you’re not totally sure. Now that we’ve designed and implemented a model, it’s time to train it. This is the part where people might argue that TensorFlow 2 or Keras is superior to PyTorch. In Keras, you can simply call  to train the model. However, in PyTorch, this is not necessarily the case, unless you really want to imitate the Keras API and define a  function yourself. PyTorch is more low-level in that you need to define a custom training loop manually.",0,0,1,0,0,0,0,0
Natural Gradient and Fisher,"Recall that the simple, generic case of multivariate Taylor expansion looks as follows: This is simply a generalization of the familiar univariate Taylor series approximation we saw earlier. (In most cases, we stop at the second order because computing the third order in the multivariate case requires us to obtain a three-dimensional symmetric tensor. I might write a post on this topic in the future, as I only recently figured this out and found it very amusing.) Continuing our discussion of KL divergence, let’s try to expand the divergence term using Taylor approximation. Here,  is small distance in the distribution space defined by KL divergence as the distance metric. This can be a bit obfuscating notation-wise because of the use of  as our variable, assuming  as a fixed constant, and evaluating the gradient and the Hessian at the point where   since we want to approximate the value of KL divergence at the point where where . But really, all that is happening here is that in order to approximate KL divergence, we’re starting at the point where , and using the slope and curvature obtained at that point to approximate the value of KL divergence at distance  away. Picturing the simpler univariate situation in the Cartesian plane might help. The bottom line is that the KL divergence is effectively defined by the Fisher matrix. The implication of this is that now, the gradient descent algorithm is subject to the constraint where  is some constant.",0,0,0,0,1,1,0,0
Recommendation Algorithm with SVD,"In short, the reason why SVD works is that the eigenvalue matrix  can be obtained either way by performing an eigendecomposition of the matrix  or . Now that we have a mathematical understanding of how singular value decomposition, let’s see how we can apply SVD to build a simple recommendation algorithm. This section will continue as follows. First, we examine SVD as a technique of data compression and dimensionality reduction. Next, we generate some toy data of movie reviews and apply SVD to see how we can build a simple function that gives movie recommendations to users given their movie ratings history. Let’s jump right in. Why is singular value decomposition so important? Sure, it should now be fairly clear that SVD is a decomposition technique that can be applied to any matrix, whether square or not, which in and of itself makes it a very powerful tool in the statistician’s arsenal. But the true beauty of singular value decomposition comes from the fact that we can perform data compression by extracting meaningful information from the given data. This process is otherwise known as dimensionality reduction, and it is one of the most common applications of singular value decomposition. Let’s see what this means with an example. Here is , a target matrix for singuluar value decomposition. Calculating , we get which is symmetric as we expect.",1,1,0,0,0,0,0,0
Wonders of Monte Carlo,"Let’s say we want to estimate the value of an integral of a function  over some domain . Now assume that there is some probability density function  defined over . Then, we can alter this integral as  shown below. Notice that this integral can now be understood as an expected value for some continuous random variable. In other words,  collapses into the following expression. What does this tell us? This means that we can simply calculate an integral by randomly sampling the values of  such that  follows some probability distribution . The probability distribution part simply ensures that values of  that are more probable are sampled more often than others. Intuitively, we are effectively taking a weighted mean of the values of , which is the loose definition of expected values. Now, to simplify things a bit, we are going to take a look at an example that does not involve much probability distributions. Conside the following integal of sine, a classic in calculus 101: The reason why we chose this integral is that we know how to calculate it by hand. Therefore, we can match the accuracy of our crude Monte Carlo against an actual, known value. Let’s fist quickly compute this integral. Now time for Monte Carlo. Notice that there is no probability distribution explicitly defined over the domain of integration in our example. In other words,  simply follows a continuous uniform distribution, meaning that all values of  within  are equally likely.",0,0,0,0,1,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"While genetic algorithms are not the most efficient or guaranteed method of solving TSP, I thought it was a fascinating approach nonetheless, so here goes the post on TSP and genetic algorithms. Before we dive into the solution, we need to first consider how we might represent this problem in code. Let’s take a look at the modules we will be using and the mode of representation we will adopt in approaching TSP. The original, popular TSP requires that the salesperson return to the original starting point destination as well. In other words, if the salesman starts at city A, he has to visit all the rest of the cities until returning back to city A. For the sake of simplicity, however, we don’t enforce this returning requirement in our modified version of TSP. Below are the modules we will be using for this post. We will be using , more specifically a lot of functions from  for things like sampling, choosing, or permuting.  arrays are also generally faster than using normal Python lists since they support vectorization, which will certainly be beneficial when building our model. For reproducibility, let’s set the random seed to 42. Now we need to consider the question of how we might represent TSP in code. Obviously, we will need some cities and some information on the distance between these cities. One solution is to consider adjacency matrices, somewhat similar to the adjacency list we took a look at on the post on Breadth First and Depth First Search algorithms.",1,0,0,0,0,0,0,0
"Basel, Zeta, and some more Euler","The more I continue my journey down the rabbit hole of mathematics, the more often I stumble across one name: Leonhard Euler. Nearly every concept that I learn, in one way or another, seems to be built on top of some strand of his work, not to mention the unending list of constants, formulas, and series that bears his name. It is simply mind-blowing to imagine that a single person could be so creative, inventive, and productive to the extent that the field of mathematics would not be where it is today had it not been for his birth on April 15, 1707. Why such intensive fanboying, you might ask. Well, let’s remind ourselves of the fact that the interpolation of the factorial through the Gamma function was spearheaded by Euler himself. But this is just the start of the beginning. Consider, for example, the Basel problem, an infamous problem that mathematicians have been trying to solve for nearly a century with no avail, until the 28-year-old Euler came to the rescue. The Basel problem can be stated as follows: At a glance, this seems like a fairly simple problem. Indeed, we know that this series converges to a real value. We also know that integration would give us a rough approximation. However, how can evaluate this series with exactitude? Euler’s solution, simple and elegant, demonstrates his genius and acute heuristics.",0,0,0,0,0,0,1,0
A Step Up with  Variational Autoencoders,"If you are wondering how (1) translates to the return statement, then the following equation might resolve your curiosity. This is the promised elaboration on the relationship between log variance and standard deviation: Therefore, multiplying 0.5 is just a simple algebraic manipulation to morph log variance to standard deviation. The reason why we use log variance instead of just variance or standard deviation is to ensure numerical stability in computation. Now that this part has been cleared, let’s start stacking away layers! Just like the autoencoder, VAEs are composed of two discrete components: the encoder and the decoder. Here, we take a look at the first piece of the puzzle, the encoder network. There are several things to note about this model. First, I decided to use a  loop to simplify the process of stacking layers. Instead of repeating the same code over multiple lines, I found this approach to be more succinct and concise. Second, we define a custom layer at the end, shown as , that uses the  function we defined earlier. This is the final key that enables us to build an encoder model that receives as input a 28-by-28 image, then output a two-dimensional latent vector representation of that image to pass onto the decoder network. Below is the summary of what our model looks like. Note that the model outputs a total of three quantities: , , and .",0,0,1,1,0,0,0,0
Gaussian Process Regression,"Given any non-zero vector , The key takeaway is that, given some positive semi-definite matrix, we can easily factor it into what we might consider to be its square root in the form of . The Cholesky decomposition is extremely useful in the context of sampling. Recall that, in a univariate setting, we can model any normal distribution by simply sampling from a standard normal distribution with zero mean and unit variance: We can extend this simplle idea to the context of multivariate Gaussians. One natural complication, however, is that variance  is a matrix in a multivariate setting. Therefore, we would somehow have to find the standard deviation of the Gaussian, or effectively its square root. This is precisely where the Cholesky decomposition comes in handy. We will be using this means of sampling when implementing GP regression in the next section. Let’s put all the pieces together. The crux of GP regression is conditioning. Recall that Here, the setup was that we have some multivariate Gaussian vector . Given some values for a portion of this random vector, namely , we can then derive another multivariate Gaussian for  using conditioning. This is exactly what we are trying to do with GP regression. Assuming that the data is normally distributed, given a number of training points and their corresponding  values, how can we make predictions at test points? In other words,  are the test points; , the training points.",1,0,0,0,0,1,0,0
A Step Up with  Variational Autoencoders,"This is why VAEs are considered to be generative models: if we feed the VAE some two-dimensional vector living in the latent space, it will spit out a digit. Whether or not that digit appears convincing depends on the random vector the decoder was provided as input: if the vector is close to the learned mean, , then the result will be convincing; if not, we might see a confusing blob of black and white. Let’s see what exactly is going on in the fuzzy region of the image, because that is apparently where all the digits mingle together and seem indistinguishable from one another. Put differently, if we vary the random vector little by little across that region, we will be able to see how the digit slowly morphs into another number.  How cool is that? We were able to get a VAE to show us how one digit can shift across a certain domain of the latent space. This is one of the many cool things we can do with a generative model like a variational autoencoder. In this post, we took a deep dive into the math behind variational autoencoders. It was a long journey, but definitely worth it because it exposed us to many core concepts in deep learning and statistics. At the same time, I found it fascinating to see how a model could learn from a representation to generate numbers, as we saw in the very last figure.",0,0,1,1,0,0,0,0
Dissecting the Gaussian Distribution,"So far, we’ve looked at the univariate Gaussian, which involved only one random variable . However, what if the random variable in question is a vector that contains multiple random variables? It is not difficult to see that answering this question requires us to think in terms of matrices, which is the go-to method of packaging multiple numbers into neat boxes, known as matrices. Instead of deriving the probability distribution for the multivariate Gaussian from scratch as we did for the univariate case, we’ll build on top of the equation for the univariate Gaussian to provide an intuitive explanation for the multivariate case. In a previous post on linear regression, we took a look at matrix calculus to cover basic concepts such as the gradient. We established some rough intuition by associating various matrix calculus operations and their single-variable calculus analogues. Let’s try to use this intuition as a pivot point to extend the univariate Gaussian model to the multivariate Gaussian. For readability sake, here is the univariate model we have derived earlier. Examining (7), the first observation we might make is that  is no longer a coherent expression in the multivariable context. The fix to this is extremely simple: recall that in vector world. Therefore, we can reexpress (7) as This is the result of simply changing the squared term.",0,0,0,0,1,0,0,1
PyTorch RNN from Scratch,"In this post, we’ll take a look at RNNs, or recurrent neural networks, and attempt to implement parts of it in scratch through PyTorch. Yes, it’s not entirely from scratch in the sense that we’re still relying on PyTorch autograd to compute gradients and implement backprop, but I still think there are valuable insights we can glean from this implementation as well. For a brief introductory overview of RNNs, I recommend that you check out this previous post, where we explored not only what RNNs are and how they work, but also how one can go about implementing an RNN model using Keras. This time, we will be using PyTorch, but take a more hands-on approach to build a simple RNN from scratch. Full disclaimer that this post was largely adapted from this PyTorch tutorial this PyTorch tutorial. I modified and changed some of the steps involved in preprocessing and training. I still recommend that you check it out as a supplementary material. With that in mind, let’s get started. The task is to build a simple classification model that can correctly determine the nationality of a person given their name. Put more simply, we want to be able to tell where a particular name is from. We will be using some labeled data from the PyTorch tutorial. We can download it simply by typing This command will download and unzip the files into the current directory, under the folder name of .",1,0,1,0,0,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"The simple idea is that we can construct some matrix that represent distances between cities  and  such that  represents the distance between those two cities. When , therefore, it is obvious that  will be zero, since the distance from city  to itself is trivially zero. Here is an example of some adjacency matrix. For convenience purposes, we will represent cities by their indices. Now it’s time for us to understand how genetic algorithms work. Don’t worry, you don’t have to be a biology major to understand this; simple intuition will do. The idea is that, we can use some sort of randomized approach to generate an initial population, and motivate an evolutionary cycle such that only superior genes will survive successive iterations. You might be wondering what genes are in this context. Most typically, genes can be thought of as some representation of the solution we are trying to find. In this case, an encoding of the optimal path would be the gene we are looking for. Evolution is a process that finds an optimal solution for survival through competition and mutation. Basically, the genes that have superior traits will survive, leaving offspring into the next generation. Those that are inferior will be unable to find a mate and perish, as sad as it sounds. Then how do these superior or inferior traits occur in the first place? The answer lies in random mutations.",1,0,0,0,0,0,0,0
My First GAN,"For this tutorial, we will be using images of ships, which are labeled as 8. So let’s go ahead and specify that. We see that  contains 6000 images, which is more than enough to start training our GAN. To train the GAN, we will define a  function. Essentially, this function creates binary labels for real and fake images. Recall that the goal of the discriminator is to successfully discern generated images from real ones. Also recall that to create generated images, the generator needs to sample from a latent dimension. In other words, training will consist of the following steps: These high level abstractions are what  implements behind the scenes. There are several subtleties that deserve our attention. First, we fade out the labels ever so slightly to expedite the training process. These are little magic tricks that people have found to work well on GAN training. While I’m not entirely sure about the underlying principle, it most likely comes from the fact that having a smooth manifold is conducive to the training of a neural network. Second, coercing a true label on the GAN essentially trains the generator. Note that we never explicitly address the generator in the function; instead, we only train the discriminator. By coercing a true label on the GAN, we are effectively forcing the generator to produce more compelling images, and penalizing it when it fails to do so. Personally, I find this part to be the genius and beauty of training GANs.",0,0,1,1,0,0,0,0
How lucky was I on my shift?,"At the Yongsan Provost Marshall Office, I receive a wide variety of calls during my shift. Some of them are part of routine communications, such as gate checks or facility operation checks. Others are more spontaneous; fire alarm reports come in from time to time, along with calls from the Korean National Police about intoxicated soldiers who get involved in mutual assault or misdemeanors of the likes. Once, I got a call from the American Red Cross about a suicidal attempt of a soldier off post. All combined, I typically find myself answering about ten to fifteen calls per shift. But yesterday was a special day, a good one indeed, because I received only five calls in total. This not only meant that USAG-Yongsan was safe and sound, but also that I had a relatively light workload. On other days when lawlessness prevails over order, the PMO quickly descends into chaos—patrols get dispatched, the desk sergeant files mountains of paperwork, and I find myself responding to countless phone calls while relaying relevant information to senior officials, first sergeants, and the Korean National Police. So yesterday got me thinking: what is the probability that I get only five calls within a time frame of eight hours, given some estimate of the average number of calls received by the PMO, say 12? How lucky was I? One way we might represent this situation is through a binomial distribution.",0,0,0,0,1,0,0,1
Fisher Score and Information,"To begin, let’s write out the full expression of the expectation in integral form. If we evaluate this integral at the true parameter, i.e. when , The key part of this derivation is the use of the Leibniz rule, or sometimes known as Feynman’s technique or differentiation under the integral sign. I am most definitely going to write a post detailing in intuitive explanation behind why this operation makes sense in the future, but to prevent unnecessary divergence, for now it suffices to use that rule to show that the expected value of Fisher’s score is zero at the true parameter. Things start to get a little more interesting (and more complicated) as we move onto the discussion of Fisher’s Information Matrix.  There are two sides of the coin that we will consider in this discussion: Fisher’s information as understood as the covariance matrix of the score function, and Fisher’s information as understood as a Hessian of the negative log likelihood. The gist of it is that there are two different ways of understanding the same concept, and that they provide intriguing complementary views on the information matrix. Before jumping into anything else, perhaps it’s instructive to review variance, covariance, and the covariance matrix. Here is a little cheat sheet to help you out (and my future self, who will most likely be reviewing this later as well). An intuitive way to think about variance is to consider it as a measure of how far samples are from the mean.",0,0,0,0,1,0,0,0
VGG PyTorch Implementation,"Whenever we encounter , we would append a max pool layer to that stack. This is probably the longest code block I’ve written on this blog, but as you can see, the meat of the code lies in two methods,  and . These methods are where all the fun stacking and appending described above takes place. I actually added a little bit of customization to make this model a little more broadly applicable. First, I added batch normalization, which wasn’t in the original paper. Batch normalization is known to stabilize training and improve performance; it wasn’t in the original VGG paper because the batch norm technique hadn’t been introduced back when the paper was published. Also, the model above can actually handle rectangular images, not just square ones. Of course, there still is a constraint, which is that the  and  parameters must be multiples of 32. Let’s roll out the model architecture by taking a look at VGG19, which is the deepest architecture within the VGG family. If we print the model, we can see the deep structure of convolutions, batch norms, and max pool layers. We can clearly see the two submodules of the network: the convolutional portion and the fully connected portion. Now let’s see if all the dimensions and tensor sizes match up. This quick sanity check can be done by passing in a dummy input. This input represents a 3-channel 224-by-224 image. Passing in this dummy input and checking its shape, we can verify that forward propagation works as intended.",0,0,1,0,0,0,0,0
Riemann Zeta and Prime Numbers,"Before we get into the specifics, below are the dependencies we will need. The first function we will build is one that randomly samples  natural numbers from 1 to , and checks if all number pairs within this sample is coprime. For this, we use , which reduces the result of applying  to two pairs of numbers in the randomly sampled number list.  is a quite common operation in functional programming, and we saw an example of this operation in the context of Spark in a previous post as well. Let’s see this function in action. I’ve added a  flag for convenience of testing and demonstration. Let’s toggle this option on for now and see what we get. The GCD of 6, 7, and 1 are 1, so the returned result is  as we expect. We also notice that three numbers were returned since . Next, we define a testing function that will simulate multiple runs of the  test for us. Because this is a Monte Carlo simulation, to have confidence in our estimate, we need to iterate the sampling process multiple times until we have sufficient amount of data. The  parameter determines the number of simulations we will perform. And much like in the previous  function, the  parameter determines the upper bound of our sampling range. Therefore, the total number of simulations we run will effectively be  times. Last but not least,  indicates how many numbers we want to sample each time—this parameter is semantically identical to the  parameter we saw in the  function above.",0,0,0,0,0,0,1,0
Moments in Statistics,"We have not looked specifically at the exponential distribution in depth previously, but it is a distribution closely related to the [Gamma distribution], which we derived in this post. Specifically, when parameter  in a Gamma distribution, it is in effect an exponential distribution. Perhaps we will explore these relationships, along with the Erlang distribution, in a future post. For now, all we have to know is the probability density function of the exponential distribution, which is This time, the task is to obtain the third moment of the distribution, i.e. . But the fundamental approach remains identical: we can either use the definition of expected values to calculate the third moment, or compute the MGF and derive it three times. At a glance, the latter seems a lot more complicated. However, it won’t take long for us to see that sometimes, calculating the MGF is sometimes as easy as, if not easier than, taking the expected values approach. Let’s twist up the order and try the MGF method first. We can pull out the lambda and combine the exponential terms to get This is an easy integral. Let’s proceed with the integration and evaluation sequence: Now, all we have to do is to derive the result in (12) three time and plug in . Although calculating the third order derivative may sound intimidating, it may seem easier in comparison to evaluating the integral which would require us to use integration by parts.",0,0,0,0,1,0,0,1
Dissecting the Gaussian Distribution,"Based on prior knowledge, we would expect to find the local maximum at , as this is where the bell curve peaks. If we were to dig a bit deeper into prior knowledge, we would expect the point of inflection to be one standard deviations away from the mean, left and right. Let’s verify if these are actually true. From good old calculus, we know that we can obtain the local extrema by setting the first derivative to zero. We can ignore the constants as they are non-zero. Then, we end up with Because the exponent is always positive, the only way for the expression to evaluate to zero is if This tells us that the local maximum of the univariate Gaussian occurs at the mean of the distribution, as we expect. The inflection point can be obtained by setting the second order derivative of the probability distribution function equal to zero. Luckily, we’re already halfway done with calculating the second order derivative since we’ve already computed the first order derivative above. As we have done above, let’s ignore the constants since they don’t affect the calculation. Because the first exponential term cannot equal zero, we can simplify the equation to Therefore, From this, we can see that the inflection point of the univariate Gaussian is exactly one standard deviation away from the mean. This is one of the many interesting properties of the normal distribution that we can see from the formula for the probability distribution.",0,0,0,0,1,0,0,1
Convolutional Neural Network with Keras,"This network pretty much follows the standard vanilla convolutional neural network model, which typically involves stacking convolution, batch normalization, and pooling layers on top of each other. The dropout layers were also added so as to minimize any potential overfitting. The  argument was configured as , named after Kaiming He who found the optimal weight initialization kernel for convolutional layers. The  argument ensures that the the feature maps are not downsized too quickly due to repeated applications of convolution and pooling. The  layer simply normalizes the tensor returned from the previous layer. There are ongoing research as to what effect batch normalization has on neural networks, but the general consensus is that it helps the model learn more quickly and efficiently. The  function returns the predefined sequential model, compiled using the configurations as shown below. Let’s take a look at the summary of the model. The summary shows that this model has 551,466 trainable parameters. The memory capacity of this model is not big, but it is definitely larger than the network we built in the previous post using the Keras API. Now that the model is ready to be deployed, we need to train and test the model. But before that, let’s quickly define a function that will provide us with a visualization of how the model is learning. This function is very similar to the one used in the previous post—all it does it that it plots the model’s accuracy and cross entropy loss with each epoch.",0,0,1,1,0,0,0,0
Complex Fibonacci,"Then, in the next call of , the program recalculates the same values calculated earlier, up until the th fibonacci number, just one short of the previous one. The classic way to deal with this problem is to use a technique known as memoization. The idea is simple: we keep some sort of memo or cache of values that have already been calculated and store them in some data structure that we don’t have to recalculate values that have already been computed prior. Here is a simple implementation. To see how effective memoization is compared to vanilla recursion, let’s use the  module. Comparing this to the  test on  with memoization, the benefits of caching becomes immediately clear: 3 second and 150 nanoseconds are different by orders of magnitude, and we only asked the functions to calculate the 35th fibonacci number. We can get a sense of how quickly this disparity would grow if we try to calculate something like the 1000th fibonacci number in the sequence. Another perk of using caching as above is that we can now get the full sequence up to the 35th fibonacci number. Although memoization is interesting, it is not the main topic of today’s post. Instead, I want to discuss Binet’s formula, a formula with which we can calculate the th fibonacci number. Binet’s formula states that We can trivially verify that  and that . For more robust empirical verification, we will resort to code later.",0,0,0,0,0,0,1,0
A Step Up with  Variational Autoencoders,"We need the first two parameters to later sample from the latent distribution; , of course, is needed to train the decoder. The decoder network looks similar to the the encoder, except that much of the architecture is in reverse order. Most notably, we use  to undo the convolution done by the encoder. This allows us to effectively scale up the input back to its original dimension, which is what we want to do with a generative model like a VAE. One subtly worth mentioning is the fact that we use a sigmoid activation in the end. This is because we want the pixel values of the output to be between 0 and 1, just as the original input was normalized before it was fed into the encoder network via division by 255. The summary of the decoder network is presented below: Now that we have both the encoder and the decode network fully defined, it’s time to wrap them together into one autoencoder model. This can simply achieved by defining the input as the input of the encoder—the normalized MNIST images—and defining the output as the output of the decoder when fed a latent vector. Concretely, this process might look as follows: Let’s look a the summary of the CVAE. Note that the encoder and the decoder look like individual layers in the grand scheme of the VAE architecture. We have almost everything we need, but there is one crucial step that is missing: compiling the model with an optimizer and a loss function.",0,0,1,1,0,0,0,0
Traveling Salesman Problem with Genetic Algorithms,"Now, we will select  number of parents to be the basis of the next generation. Here, we use a simple roulette model, where we compare the value of the probability vector and a random number sampled from a uniform distribution. If the value of the probability vector is higher, the corresponding chromosome is added to . We repeat this process until we have  parents. As expected, we get 4 parents after selecting the parents through . Now is the crucial part: mutation. There are different types of mutation schemes we can use for our model. Here, we use a simple swap and crossover mutation. As the name implies, swap simply involves swapping two elements of a chromosome. For instance, if we have , we might swap the first two elements to end up with . The problem with swap mutation, however, is the fact that swapping is a very disruptive process in the context of TSP. Because each chromosome encodes the order in which a salesman has to visit each city, swapping two cities may greatly impact the final fitness score of that mutated chromosome. Therefore, we also use another form of mutation, known as crossovers. In crossover mutation, we grab two parents. Then, we slice a portion of the chromosome of one parent, and fill the rest of the slots with that of the other parent. When filling the rest of the slots, we need to make sure that there are no duplicates in the chromosome. Let’s take a look at an example.",1,0,0,0,0,0,0,0
